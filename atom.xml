<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>谢以轩</title>
  
  <subtitle>季节的流年里，时光如水而过。春风送暖，染一季芳菲，催一树花开，最美不过人间四月天。鸟语花香的清晨，推开窗子，看桃花灼灼，花瓣纷扬，让心灵浸染春色，那淡淡的清新沉醉了我的一帘幽梦。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://Xiezhenyu98.github.io/"/>
  <updated>2019-10-19T08:06:07.116Z</updated>
  <id>https://Xiezhenyu98.github.io/</id>
  
  <author>
    <name>谢振瑜</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MyBatis动态sql：更方便的拼接sql语句</title>
    <link href="https://Xiezhenyu98.github.io/2019/10/19/MyBatis%E5%8A%A8%E6%80%81sql%EF%BC%9A%E6%9B%B4%E6%96%B9%E4%BE%BF%E7%9A%84%E6%8B%BC%E6%8E%A5sql%E8%AF%AD%E5%8F%A5/"/>
    <id>https://Xiezhenyu98.github.io/2019/10/19/MyBatis动态sql：更方便的拼接sql语句/</id>
    <published>2019-10-19T08:06:18.167Z</published>
    <updated>2019-10-19T08:06:07.116Z</updated>
    
    <content type="html"><![CDATA[<h3 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h3><p>&emsp;&emsp;if标签是最常用的判断语句，相当于java中的if语句。在MyBatis中使用if标签，我们先看一下不使用if标签的时候会有什么情况。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 多条件查询 用过用户对象中的条件查询用户列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserListByUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询用户性别 模糊查询用户名 查询用户cid 国籍id --&gt;</span></span><br><span class="line">select * </span><br><span class="line">from user </span><br><span class="line">where </span><br><span class="line">u_sex = #&#123;u_sex&#125; </span><br><span class="line">and u_username like "%"#&#123;u_username&#125;"%" </span><br><span class="line">and u_cid = #&#123;u_cid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在上面的案例中，多条件查询用户性别u_sex，模糊查询用户名u_username，查询用户国籍c_id，返回一个集合。我们在使用条sql语句的时候，我们必须把所有的参数传过来，如果出现我只有查询用户性别u_sex，模糊查询用户名u_username的情况，我们又必须再写一条sql语句。而使用了if标签之后可以解决这个问题。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 多条件查询 用过用户对象中的条件查询用户列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserListByUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询用户性别 模糊查询用户名 查询用户cid 国籍id --&gt;</span></span><br><span class="line">select * </span><br><span class="line">from user </span><br><span class="line">where </span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_sex!=null"</span>&gt;</span></span><br><span class="line">u_sex = #&#123;u_sex&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span>';l.,</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_username!=null"</span>&gt;</span></span><br><span class="line">and u_username like "%"#&#123;u_username&#125;"%" </span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_cid!=null"</span>&gt;</span></span><br><span class="line">and u_cid = #&#123;u_cid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在上面的案例中，当参数u_username传递进映射器时，如果参数不为空则再sql语句上拼接上对用户名的模糊查询，如果为空，则不拼接。这样我们就可以不用写多条sql语句了。但是，如果我们u_sex为空u_username不为空，在sql语句拼接时就会出现<code>select * from user where and u_username like &quot;%&quot;#{u_username}&quot;%&quot;</code>的错误语法格式。接下来的where标签可以解决这个问题。</p><h3 id="where标签"><a href="#where标签" class="headerlink" title="where标签"></a>where标签</h3><p>&emsp;&emsp;where标签，当标签内的条件成立时，才会加入where这个SQL关键字到组装的SQL里面，否则就不加入，where还可以去掉一些特殊的SQL语法，比如说and、or，它去掉的时前缀的and和or。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserListByUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询用户性别 模糊查询用户名 查询用户cid 国籍id --&gt;</span></span><br><span class="line">select * </span><br><span class="line">from user </span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_sex!=null"</span>&gt;</span></span><br><span class="line">u_sex = #&#123;u_sex&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_username!=null"</span>&gt;</span></span><br><span class="line">and u_username like "%"#&#123;u_username&#125;"%" </span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_cid!=null"</span>&gt;</span></span><br><span class="line">and u_cid = #&#123;u_cid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在上面的案例中，如果and全写在sql拼接语句的后面，当c_cid==null的话，使用where语句就去不掉结尾的and。接下来的trim标签可以解决这个问题。</p><h3 id="trim标签"><a href="#trim标签" class="headerlink" title="trim标签"></a>trim标签</h3><p>&emsp;&emsp;trim标签是要去掉一些特殊的字符串，它又四个属性，prefix、suffix、prefixOverrides、suffixOverrides。下面通过一个例子说一下这四个属性分别代表的意义。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserListByUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询用户性别 模糊查询用户名 查询用户cid 国籍id --&gt;</span></span><br><span class="line">select * </span><br><span class="line">from user </span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">suffixOverrides</span>=<span class="string">"and"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_sex!=null"</span>&gt;</span></span><br><span class="line">u_sex = #&#123;u_sex&#125; and </span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_username!=null"</span>&gt;</span></span><br><span class="line">u_username like "%"#&#123;u_username&#125;"%" and </span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_cid!=null"</span>&gt;</span></span><br><span class="line">u_cid = #&#123;u_cid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;prefix=”where”，的意思是在trim头标签加上where之后再拼接上trim内的SQL语句，如果将其换成suffix=”where”的话，就会在trim内的的SQL语句后面接上where，显然在上面的案例中是不对的。<br>&emsp;&emsp;suffixOverrides=”and”，的意思是去掉拼接语句尾部一些不合法的一些特殊字符，比如说and、or，如果将其换成prefixOverrides=”and”的话，就是去掉拼接语句开头一些不合法的的特殊字符。</p><h3 id="set标签"><a href="#set标签" class="headerlink" title="set标签"></a>set标签</h3><p>set标签在跟新表属性的时候，如果遇上不合法的逗号，会将其去掉。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateSetUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修改用户名和用户密码以及性别以id为限制 --&gt;</span></span><br><span class="line">update user</span><br><span class="line">set</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_username!=null and u_username!=''"</span>&gt;</span></span><br><span class="line">u_username = #&#123;u_username&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_password!=null and u_password!=''"</span>&gt;</span></span><br><span class="line">u_password = #&#123;u_password&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_sex!=null and u_sex!=''"</span>&gt;</span></span><br><span class="line">u_sex = #&#123;u_sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">where u_id = #&#123;u_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在上面这个案例中，如果if语句最后一个不成立而它上一个if语句成立的时候，在拼接SQL语句的时候，就会出现SQL语法的错误，而使用set标签可以很好的解决这个错误。下面是使用set标签的案例。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateSetUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修改用户名和用户密码以及性别以id为限制 --&gt;</span></span><br><span class="line">update user</span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_username!=null and u_username!=''"</span>&gt;</span></span><br><span class="line">u_username = #&#123;u_username&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_password!=null and u_password!=''"</span>&gt;</span></span><br><span class="line">u_password = #&#123;u_password&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_sex!=null and u_sex!=''"</span>&gt;</span></span><br><span class="line">u_sex = #&#123;u_sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">where u_id = #&#123;u_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如果最后一个条件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">### foreach标签</span><br><span class="line">&amp;emsp;&amp;emsp;foreach标签是一个循环语句，它的作用是遍历集合，它能够很好地支持数组和List、Set接口的集合，对此提供遍历的功能。</span><br><span class="line">&amp;emsp;&amp;emsp;比如说，我要查找数据库中id为1、3、5的用户，SQL语句应该这样写```select * from user where u_id in(1,3,5)```只能固定查3个id的用户，如果要查4个，必须再写一条sql语句，而foreach可以很好的解决这个问题。</span><br><span class="line">```xml</span><br><span class="line">&lt;select id=&quot;selectUserListByIds&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">select *</span><br><span class="line">from user</span><br><span class="line">where u_id </span><br><span class="line">in</span><br><span class="line">&lt;foreach collection=&quot;array&quot; item=&quot;id&quot; open=&quot;(&quot; close=&quot;)&quot; separator=&quot;,&quot;&gt;</span><br><span class="line">#&#123;id&#125;</span><br><span class="line">&lt;/foreach&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><ul><li>collection表示传入的是数组还是集合是数组用array，是集合用list、set等，但如果是包装类的话，则需要使用包装类里面数组或集合的字段名。</li><li>item表示用什么表示数据或者集合里面的数，即循环中当前的元素。</li><li>open、close表示用什么元素把集合两端包起来。</li><li>separate表示用什么分隔。</li><li>index表示当前元素在集合中的位置。<h3 id="choose、when、otherwise标签"><a href="#choose、when、otherwise标签" class="headerlink" title="choose、when、otherwise标签"></a>choose、when、otherwise标签</h3>&emsp;&emsp;choose、when、otherwise标签类似于java里面的wsitch…case…default…功能语句。下面是一个简单的案例。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserByUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.siliedu.bean.User"</span> <span class="attr">resultType</span>=<span class="string">"com.siliedu.bean.User"</span>&gt;</span></span><br><span class="line">select *</span><br><span class="line">from user</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"u_id!=null"</span>&gt;</span></span><br><span class="line">and u_id=#&#123;u_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"u_username!=null"</span>&gt;</span></span><br><span class="line">and u_username=#&#123;u_username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">and 1=2</span><br><span class="line"><span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;当传过来的user的id不为空时，按照id为条件去查找，当传过来的id为空而username不为空时按照username去查找，当两个都为空时，查找不到。</p><h3 id="sql标签"><a href="#sql标签" class="headerlink" title="sql标签"></a>sql标签</h3><p>&emsp;&emsp;在写sql语句的时候，有很多重复的语句片段，比如说，<figure class="highlight plain"><figcaption><span>* from user```这句话就被重复了很多次，而使用sql标签可以将这些重复的字段提出来，什么时候用就引入一下就可以了。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">```xml</span><br><span class="line">&lt;sql id=&quot;selectUser&quot;&gt;</span><br><span class="line">select *</span><br><span class="line">from user</span><br><span class="line">&lt;/sql&gt;</span><br><span class="line">&lt;select id=&quot;selectUserListByIds&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">&lt;include refid=&quot;selectUser&quot;/&gt;</span><br><span class="line">where u_id </span><br><span class="line">in</span><br><span class="line">&lt;foreach collection=&quot;array&quot; item=&quot;id&quot; open=&quot;(&quot; close=&quot;)&quot; separator=&quot;,&quot; index=&quot;2&quot;&gt;</span><br><span class="line">#&#123;id&#125;</span><br><span class="line">&lt;/foreach&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><h3 id="bind标签"><a href="#bind标签" class="headerlink" title="bind标签"></a>bind标签</h3><p>&emsp;&emsp;bind标签的作用是用过ONGL表达式去定义一个上下文变量，这样更方便使用，例如在进行模糊查询时，MySQL需要用到%和参数连接。<br>定义接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUserLikeUsername</span><span class="params">(@Param(<span class="string">"str"</span>)</span>String str)</span>;</span><br></pre></td></tr></table></figure><p>定义映射文件和一个新的变量，然后执行模糊查询</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserLikeUsername"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"com.siliedu.bean.User"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">"'%'+str+'%'"</span>/&gt;</span></span><br><span class="line">select *</span><br><span class="line">from user</span><br><span class="line">where</span><br><span class="line">u_username like #&#123;pattern&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test11</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line">InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//需要sqlSessionFactoryBulider</span></span><br><span class="line">SqlSessionFactoryBuilder ssfb = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">//创建sqlSessionFactory</span></span><br><span class="line">SqlSessionFactory ssf = ssfb.build(in);</span><br><span class="line"><span class="comment">//生产一个sqlSession</span></span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line">UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; list = mapper.selectUserLikeUsername(<span class="string">"王"</span>);</span><br><span class="line"><span class="keyword">for</span>(User u : list) &#123;</span><br><span class="line">System.out.println(u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;if标签&quot;&gt;&lt;a href=&quot;#if标签&quot; class=&quot;headerlink&quot; title=&quot;if标签&quot;&gt;&lt;/a&gt;if标签&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;if标签是最常用的判断语句，相当于java中的if语句。在MyBatis中使用if标签，我们先看一下
      
    
    </summary>
    
    
      <category term="SSM" scheme="https://Xiezhenyu98.github.io/categories/SSM/"/>
    
    
      <category term="MyBatis" scheme="https://Xiezhenyu98.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis的输入和输出映射</title>
    <link href="https://Xiezhenyu98.github.io/2019/10/17/MyBatis%E7%9A%84%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA%E6%98%A0%E5%B0%84/"/>
    <id>https://Xiezhenyu98.github.io/2019/10/17/MyBatis的输入和输出映射/</id>
    <published>2019-10-17T11:11:41.165Z</published>
    <updated>2019-10-17T11:11:09.535Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;MyBatis的输入和输出映射，通过parameterType完成输入映射，通过resultType和resultMap完成输出映射。</p><h2 id="1、输入映射parameterType"><a href="#1、输入映射parameterType" class="headerlink" title="1、输入映射parameterType"></a>1、输入映射parameterType</h2><p>&emsp;&emsp;输入映射中，可以给出类的全名，也可以给出类的别名，但是别名必须是MyBatis内部定义或者自定义的，可以选择JavaBean、Map等简单的参数类型传递给SQL。</p><h3 id="1-1基本类型"><a href="#1-1基本类型" class="headerlink" title="1.1基本类型"></a>1.1基本类型</h3><p>&emsp;&emsp;基本类型可以使用别名的方式，如果想要查看常见的 Java 类型内建的相应的类型别名，<a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases" target="_blank" rel="noopener">点击这里</a>，它们都是不区分大小写的。(具体的测试方法可以看我上一篇写的博客)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUserById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">delete from user where u_id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2自定义对象"><a href="#1-2自定义对象" class="headerlink" title="1.2自定义对象"></a>1.2自定义对象</h3><p>&emsp;&emsp;输入类型还可以为自定义的对象，在书写Sql语句获取数值的时候，可以使用”#{对象字段名}”的方式取得数值。以下就是通过输入一个自定义对象的方式将参数传递给SQL，实现修改指定用户名的功能。(具体的测试方法可以看我上一篇写的博客)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"io.xiezhenyu98.bean.User"</span>&gt;</span></span><br><span class="line">update user set u_username = #&#123;u_username&#125; where u_id=#&#123;u_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3自定义包装类"><a href="#1-3自定义包装类" class="headerlink" title="1.3自定义包装类"></a>1.3自定义包装类</h3><p>&emsp;&emsp;输入类型还可以为自定义的包装类，在书写SQL语句获取数值的时候，可以使用”#{包装类字段.被包装类字段}”的方法获得数值。<br>UserVo.java包装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVo</span> </span>&#123;</span><br><span class="line"><span class="comment">//包装类</span></span><br><span class="line"><span class="comment">//需要全部的user对象信息</span></span><br><span class="line"><span class="keyword">private</span> User user;</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.user = user;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需要表B的id name属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserMapper.java接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过UserVo id查询一个用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">selectUserByUserVoId</span><span class="params">(UserVo vo)</span></span>;</span><br></pre></td></tr></table></figure><p>UserMapper.xml映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查找用户UserVo --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserByUserVoId"</span> <span class="attr">parameterType</span>=<span class="string">"UserVo"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">select * from user where u_id = #&#123;user.u_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line">InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//需要sqlSessionFactoryBulider</span></span><br><span class="line">SqlSessionFactoryBuilder ssfb = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">//创建sqlSessionFactory</span></span><br><span class="line">SqlSessionFactory ssf = ssfb.build(in);</span><br><span class="line"><span class="comment">//生产一个sqlSession</span></span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line">UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">UserVo vo = <span class="keyword">new</span> UserVo();</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setU_id(<span class="number">1</span>);</span><br><span class="line">vo.setUser(user);</span><br><span class="line">User resultUser = mapper.selectUserByUserVoId(vo);</span><br><span class="line">System.out.println(resultUser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User [u_id=1, u_username=老王, u_password=123, u_sex=1, u_createTime=null, u_cid=1]</span><br></pre></td></tr></table></figure><h2 id="2、输出映射resultType、resultMap"><a href="#2、输出映射resultType、resultMap" class="headerlink" title="2、输出映射resultType、resultMap"></a>2、输出映射resultType、resultMap</h2><h3 id="2-1resultType"><a href="#2-1resultType" class="headerlink" title="2.1resultType"></a>2.1resultType</h3><p>&emsp;&emsp;resultType，定义类的全路径，在允许自动匹配的情况下，结果集将通过JavaBean的规范映射，数据库中表的字段名和JavaBean中的字段名对应，或定义为int、double、float、map等参数，也可以使用别名，但是要符合别名的规范，且不能和resultMap同时使用。resultType是常用的参数之一，比如统计总条数时可以把它设置为int。</p><h4 id="2-1-1基本类型"><a href="#2-1-1基本类型" class="headerlink" title="2.1.1基本类型"></a>2.1.1基本类型</h4><p>&emsp;&emsp;输出映射的基本类型和输入映射的基本类型一样，可以使用别名的方式，如果想要查看常见的 Java 类型内建的相应的类型别名，<a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases" target="_blank" rel="noopener">点击这里</a>，它们都是不区分大小写的。以下是查询用户总数返回Integer的返回值。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询用户总条数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserCount"</span> <span class="attr">resultType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">select count(*) from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2自定义类型"><a href="#2-1-2自定义类型" class="headerlink" title="2.1.2自定义类型"></a>2.1.2自定义类型</h4><p>输出映射的自定义类型(具体的测试方法可以看我上一篇写的博客)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查找用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">select * from user where u_id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2resultMap"><a href="#2-2resultMap" class="headerlink" title="2.2resultMap"></a>2.2resultMap</h3><p>&emsp;&emsp;resultMap，它是映射集的引用，将执行强大的映射功能。可以使用resultType、resultMap的其中一个，resultMap能提供自定义映射规则的机会，数据库中表的字段名和JavaBean中的字段名不对应，则需要添加自定义映射。resultMap是MyBatis最复杂的元素，可以配置映射规则、级联、typeHandler等等。</p><h4 id="2-2-1Bean对象字段与数据库中字段不匹配"><a href="#2-2-1Bean对象字段与数据库中字段不匹配" class="headerlink" title="2.2.1Bean对象字段与数据库中字段不匹配"></a>2.2.1Bean对象字段与数据库中字段不匹配</h4><p>创建Country实例，实例中Country的id与数据库中的不匹配(数据库中的为c_id)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Country</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String c_countryname;</span><br><span class="line"><span class="keyword">private</span> String c_capital;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getC_countryname</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_countryname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setC_countryname</span><span class="params">(String c_countryname)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.c_countryname = c_countryname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getC_capital</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_capital;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setC_capital</span><span class="params">(String c_capital)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.c_capital = c_capital;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Country [id="</span> + id + <span class="string">", c_countryname="</span> + c_countryname + <span class="string">", c_capital="</span> + c_capital + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建CountryMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> com.siliedu.bean.Country;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CountryMapper</span> </span>&#123;</span><br><span class="line"><span class="comment">//查询所有</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Country&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建CountryMapper映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.siliedu.mapper.CountryMapper"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询所有 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- country为resultMap起一个名字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Country"</span> <span class="attr">id</span>=<span class="string">"country"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id为javaBean中的字段，c_id为数据库中的字段，两个字段不匹配 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"c_id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- country为使用名为country的resultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultMap</span>=<span class="string">"country"</span>&gt;</span></span><br><span class="line">select * from country</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test5</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line">InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//需要sqlSessionFactoryBulider</span></span><br><span class="line">SqlSessionFactoryBuilder ssfb = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">//创建sqlSessionFactory</span></span><br><span class="line">SqlSessionFactory ssf = ssfb.build(in);</span><br><span class="line"><span class="comment">//生产一个sqlSession</span></span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line">CountryMapper mapper = session.getMapper(CountryMapper.class);</span><br><span class="line">List&lt;Country&gt; list = mapper.selectAll();</span><br><span class="line"><span class="keyword">for</span>(Country c : list) &#123;</span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Country [id=1, c_countryname=中国, c_capital=北京]</span><br><span class="line">Country [id=3, c_countryname=美国, c_capital=华盛顿]</span><br><span class="line">Country [id=4, c_countryname=英国, c_capital=伦敦]</span><br><span class="line">Country [id=5, c_countryname=日本, c_capital=东京]</span><br></pre></td></tr></table></figure><p>在这里如果我们将resultMap改成resultType的话，id将查询不到。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"country"</span>&gt;</span></span><br><span class="line">select * from country</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Country [id=null, c_countryname=中国, c_capital=北京]</span><br><span class="line">Country [id=null, c_countryname=美国, c_capital=华盛顿]</span><br><span class="line">Country [id=null, c_countryname=英国, c_capital=伦敦]</span><br><span class="line">Country [id=null, c_countryname=日本, c_capital=东京]</span><br></pre></td></tr></table></figure><h4 id="2-2-2关联查询"><a href="#2-2-2关联查询" class="headerlink" title="2.2.2关联查询"></a>2.2.2关联查询</h4><h5 id="2-2-2-1一对一"><a href="#2-2-2-1一对一" class="headerlink" title="2.2.2.1一对一"></a>2.2.2.1一对一</h5><p>&emsp;&emsp;一个用户只对应一个国家。(在单表查询的时候，javaBean对象的字段和数据库字段一致的时候可以省略但在多表查询的时候，我们要查询什么字段，就必须把什么字段列在映射文件上)<br>UserVo包装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVo</span> <span class="keyword">extends</span> <span class="title">User</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Country country;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Country <span class="title">getCountry</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> country;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCountry</span><span class="params">(Country country)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.country = country;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"UserVo [country="</span> + country + <span class="string">", getU_id()="</span> + getU_id() + <span class="string">", getU_username()="</span> + getU_username()</span><br><span class="line">+ <span class="string">", getU_sex()="</span> + getU_sex() + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询所有用户的包装类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;UserVo&gt; <span class="title">selectAllUserVo</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>UserMapper.xml映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询所有用户的包装类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"UserVo"</span> <span class="attr">id</span>=<span class="string">"uservolist"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在单表查询的时候，javaBean对象的字段和数据库字段一致的时候可以省略</span></span><br><span class="line"><span class="comment"> 但在多表查询的时候，我们要查询什么字段，就必须把什么字段列上去 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"u_id"</span> <span class="attr">column</span>=<span class="string">"u_id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"u_username"</span> <span class="attr">column</span>=<span class="string">"u_username"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"u_sex"</span> <span class="attr">column</span>=<span class="string">"u_sex"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"country"</span> <span class="attr">javaType</span>=<span class="string">"Country"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"c_id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"c_countryname"</span> <span class="attr">column</span>=<span class="string">"c_countryname"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAllUserVo"</span> <span class="attr">resultMap</span>=<span class="string">"uservolist"</span>&gt;</span></span><br><span class="line">select u.u_id,u.u_username,u.u_sex,c.c_id,c.c_countryname from user u left join country c on u.u_cid=c.c_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test6</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line">InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//需要sqlSessionFactoryBulider</span></span><br><span class="line">SqlSessionFactoryBuilder ssfb = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">//创建sqlSessionFactory</span></span><br><span class="line">SqlSessionFactory ssf = ssfb.build(in);</span><br><span class="line"><span class="comment">//生产一个sqlSession</span></span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line">UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">List&lt;UserVo&gt; list = mapper.selectAllUserVo();</span><br><span class="line"><span class="keyword">for</span>(UserVo userVo : list) &#123;</span><br><span class="line">System.out.println(userVo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：查询到了所有的用户，以及用户的国家，没有国家的用户也查询到了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">UserVo [country=Country [id=1, c_countryname=中国, c_capital=null], getU_id()=1, getU_username()=老王, getU_sex()=1]</span><br><span class="line">UserVo [country=Country [id=3, c_countryname=美国, c_capital=null], getU_id()=2, getU_username()=jack, getU_sex()=1]</span><br><span class="line">UserVo [country=Country [id=3, c_countryname=美国, c_capital=null], getU_id()=3, getU_username()=alice, getU_sex()=0]</span><br><span class="line">UserVo [country=Country [id=1, c_countryname=中国, c_capital=null], getU_id()=4, getU_username()=王司机, getU_sex()=1]</span><br><span class="line">UserVo [country=Country [id=4, c_countryname=英国, c_capital=null], getU_id()=5, getU_username()=anna, getU_sex()=0]</span><br><span class="line">UserVo [country=Country [id=1, c_countryname=中国, c_capital=null], getU_id()=6, getU_username()=李师傅, getU_sex()=1]</span><br><span class="line">UserVo [country=Country [id=5, c_countryname=日本, c_capital=null], getU_id()=7, getU_username()=漩涡鸣人, getU_sex()=1]</span><br><span class="line">UserVo [country=Country [id=5, c_countryname=日本, c_capital=null], getU_id()=8, getU_username()=娜美, getU_sex()=0]</span><br><span class="line">UserVo [country=Country [id=1, c_countryname=中国, c_capital=null], getU_id()=9, getU_username()=王五, getU_sex()=1]</span><br><span class="line">UserVo [country=null, getU_id()=10, getU_username()=老赵, getU_sex()=null]</span><br><span class="line">UserVo [country=null, getU_id()=11, getU_username()=老孙, getU_sex()=null]</span><br><span class="line">UserVo [country=null, getU_id()=12, getU_username()=98k, getU_sex()=null]</span><br></pre></td></tr></table></figure><h5 id="2-2-2-1一对多"><a href="#2-2-2-1一对多" class="headerlink" title="2.2.2.1一对多"></a>2.2.2.1一对多</h5><p>一个国家有多个用户。<br>CountryVo包装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountryVo</span> <span class="keyword">extends</span> <span class="title">Country</span></span>&#123;</span><br><span class="line"><span class="comment">//需要维护一个User集合</span></span><br><span class="line"><span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserList</span><span class="params">(List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userList = userList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"CountryVo [userList="</span> + userList + <span class="string">", toString()="</span> + <span class="keyword">super</span>.toString() + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CountryMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询所有的CountryVo</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;CountryVo&gt; <span class="title">selectAllCountryVo</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>CountryMapper映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询所有的CountryVo --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"CountryVo"</span> <span class="attr">id</span>=<span class="string">"countryvo"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"c_id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"c_countryname"</span> <span class="attr">column</span>=<span class="string">"c_countryname"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"c_capital"</span> <span class="attr">column</span>=<span class="string">"c_capital"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 一对多关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"userList"</span> <span class="attr">ofType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"u_id"</span> <span class="attr">column</span>=<span class="string">"u_id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"u_username"</span> <span class="attr">column</span>=<span class="string">"u_username"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAllCountryVo"</span> <span class="attr">resultMap</span>=<span class="string">"countryvo"</span>&gt;</span></span><br><span class="line">select </span><br><span class="line">c.c_id,</span><br><span class="line">c.c_countryname,</span><br><span class="line">c.c_capital,</span><br><span class="line">u.u_id,</span><br><span class="line">u.u_username </span><br><span class="line">from country c </span><br><span class="line">left join </span><br><span class="line">user u on </span><br><span class="line">u.u_cid=c.c_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test7</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line">InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//需要sqlSessionFactoryBulider</span></span><br><span class="line">SqlSessionFactoryBuilder ssfb = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">//创建sqlSessionFactory</span></span><br><span class="line">SqlSessionFactory ssf = ssfb.build(in);</span><br><span class="line"><span class="comment">//生产一个sqlSession</span></span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line">CountryMapper mapper = session.getMapper(CountryMapper.class);</span><br><span class="line">List&lt;CountryVo&gt; list = mapper.selectAllCountryVo();</span><br><span class="line"><span class="keyword">for</span>(CountryVo countryVo : list) &#123;</span><br><span class="line">System.out.println(countryVo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：查询出了，一个国家有几个用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CountryVo [userList=[User [u_id=1, u_username=老王, u_password=null, u_sex=null, u_createTime=null, u_cid=null], User [u_id=4, u_username=王司机, u_password=null, u_sex=null, u_createTime=null, u_cid=null], User [u_id=6, u_username=李师傅, u_password=null, u_sex=null, u_createTime=null, u_cid=null], User [u_id=9, u_username=王五, u_password=null, u_sex=null, u_createTime=null, u_cid=null]], toString()=Country [id=1, c_countryname=中国, c_capital=北京]]</span><br><span class="line">CountryVo [userList=[User [u_id=2, u_username=jack, u_password=null, u_sex=null, u_createTime=null, u_cid=null], User [u_id=3, u_username=alice, u_password=null, u_sex=null, u_createTime=null, u_cid=null]], toString()=Country [id=3, c_countryname=美国, c_capital=华盛顿]]</span><br><span class="line">CountryVo [userList=[User [u_id=5, u_username=anna, u_password=null, u_sex=null, u_createTime=null, u_cid=null]], toString()=Country [id=4, c_countryname=英国, c_capital=伦敦]]</span><br><span class="line">CountryVo [userList=[User [u_id=7, u_username=漩涡鸣人, u_password=null, u_sex=null, u_createTime=null, u_cid=null], User [u_id=8, u_username=娜美, u_password=null, u_sex=null, u_createTime=null, u_cid=null]], toString()=Country [id=5, c_countryname=日本, c_capital=东京]]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;MyBatis的输入和输出映射，通过parameterType完成输入映射，通过resultType和resultMap完成输出映射。&lt;/p&gt;
&lt;h2 id=&quot;1、输入映射parameterType&quot;&gt;&lt;a href=&quot;#1、输入映射paramete
      
    
    </summary>
    
    
      <category term="SSM" scheme="https://Xiezhenyu98.github.io/categories/SSM/"/>
    
    
      <category term="MyBatis" scheme="https://Xiezhenyu98.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MaBatis的Mapper动态代理开发</title>
    <link href="https://Xiezhenyu98.github.io/2019/10/17/MaBatis%E7%9A%84Mapper%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%BC%80%E5%8F%91/"/>
    <id>https://Xiezhenyu98.github.io/2019/10/17/MaBatis的Mapper动态代理开发/</id>
    <published>2019-10-17T03:53:03.885Z</published>
    <updated>2019-10-17T03:52:29.110Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-SqlSession的介绍"><a href="#1-SqlSession的介绍" class="headerlink" title="1 SqlSession的介绍"></a>1 SqlSession的介绍</h3><p>&emsp;&emsp;SqlSession中封装了对数据库的操作，比如：更新、删除、查询等。通过SqlSessionFactory创建SqlSession，而SqlSessionFactory是由SqlSessionFactoryBuilder来创建的。</p><h4 id="1-1-SqlSessionFactoryBuilder"><a href="#1-1-SqlSessionFactoryBuilder" class="headerlink" title="1.1 SqlSessionFactoryBuilder"></a>1.1 SqlSessionFactoryBuilder</h4><p>SqlSessionFactoryBuilder的作用是创建SqlSessionFacoty，SqlSessionFacoty创建了之后就不需要SqlSessionFactoryBuilder了，由于SqlSession是通过SqlSessionFactory生产，所以一般是将SqlSessionFactoryBuilder当成一个工具类使用，需要创建sqlSessionFactory时就new一个 SqlSessionFactoryBuilder，和Spring整合后由Spring以单例方式管理sqlSessionFactory。</p><h4 id="1-2-SqlSessionFactory"><a href="#1-2-SqlSessionFactory" class="headerlink" title="1.2 SqlSessionFactory"></a>1.2 SqlSessionFactory</h4><p>SqlSession是一个面向用户的接口， sqlSession中定义了数据库操作，默认使用DefaultSqlSession实现类。</p><h3 id="2-MaBatis对Dao层的开发方式"><a href="#2-MaBatis对Dao层的开发方式" class="headerlink" title="2 MaBatis对Dao层的开发方式"></a>2 MaBatis对Dao层的开发方式</h3><h4 id="2-1-不使用Mapper动态代理开发"><a href="#2-1-不使用Mapper动态代理开发" class="headerlink" title="2.1 不使用Mapper动态代理开发"></a>2.1 不使用Mapper动态代理开发</h4><p>编写dao层接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="comment">//根据id查询用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写dao层接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="comment">//sqlSession 工厂</span></span><br><span class="line"><span class="keyword">private</span> SqlSessionFactory ssf;</span><br><span class="line"><span class="comment">//通过构造器给ssf赋值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">(SqlSessionFactory ssf)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.ssf = ssf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="comment">//生产一个sqlSession</span></span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line">User user session.selectOne(<span class="string">"UserMapper.selectUserById"</span>,id);</span><br><span class="line">session.close();</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line"><span class="comment">//sqlSession 工厂</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory ssf;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line">InputStream in;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">in = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactoryBuilder ssfb = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">ssf = ssfb.build(in);</span><br><span class="line">in.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DaoTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">UserDao dao = <span class="keyword">new</span> UserDaoImpl(ssf);</span><br><span class="line">User user = dao.getUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;不使用Mapper动态代理开发可以从代码中看到一些问题，每次我们调用SqlSession都要完成打开session、调用session完成与数据库的交互、关闭session，这三步，这些都是重复的代码。</p><h4 id="2-2-使用Mapper动态代理开发"><a href="#2-2-使用Mapper动态代理开发" class="headerlink" title="2.2 使用Mapper动态代理开发"></a>2.2 使用Mapper动态代理开发</h4><p>首先想使用Mapper动态代理开发必须遵循四大原则加一个注意：</p><ul><li>接口方法名需要与mapper.xml的要调用的sql语句的id一致</li><li>接口的形参类型需要与mapper.xml中的parameterType一致</li><li>接口的返回值需要与mapper.xml中的resultType一致</li><li>mapper.xml中的namespace要与接口的全包名一致<br>注意：mapper动态代理开发中，根据返回值类型自动选择方法</li></ul><p>UserMapper接口(mybatis提出mapper接口,相当于dao接口,mapper接口的命名方式建议为表名加Mapper)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"><span class="comment">//通过id查询一个用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">selectUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserMapper映射文件(mapper映射文件的命名方式建议表名加Mapper.xml,namespace指定为mapper接口的全限定名)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mapper.xml中的namespace要与接口的全包名一致 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.xiezhenyu.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查找用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">select * from user where u_id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将mapper.xml在SqlMapConfing.xml中进行注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.xiezhenyu.mapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line">InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//需要sqlSessionFactoryBulider</span></span><br><span class="line">SqlSessionFactoryBuilder ssfb = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">//创建sqlSessionFactory</span></span><br><span class="line">SqlSessionFactory ssf = ssfb.build(in);</span><br><span class="line"><span class="comment">//生产一个sqlSession</span></span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line">UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">User user = mapper.selectUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User [u_id=1, u_username=老王, u_password=123, u_sex=1, u_createTime=null, u_cid=1]</span><br></pre></td></tr></table></figure><p>总结：使用Mapper代理进行开发<br>&emsp;&emsp;优点：可以使我们只需要关注UserMapper.java接口中的方法，它的实现类由Mapper自动为我们生成，带来了很大的方便。<br>&emsp;&emsp;缺点：如果UserMapper.java接口中的方法调用的statement中返回是多条记录，而mapper.java方法的返回值为JavaBean对象，此时代理对象通过selectOne调用，但由于返回的是多条记录所以会报错。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-SqlSession的介绍&quot;&gt;&lt;a href=&quot;#1-SqlSession的介绍&quot; class=&quot;headerlink&quot; title=&quot;1 SqlSession的介绍&quot;&gt;&lt;/a&gt;1 SqlSession的介绍&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;SqlSes
      
    
    </summary>
    
    
      <category term="SSM" scheme="https://Xiezhenyu98.github.io/categories/SSM/"/>
    
    
      <category term="MyBatis" scheme="https://Xiezhenyu98.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>傻瓜式使用MyBatis</title>
    <link href="https://Xiezhenyu98.github.io/2019/10/13/%E5%82%BB%E7%93%9C%E5%BC%8F%E4%BD%BF%E7%94%A8MyBatis/"/>
    <id>https://Xiezhenyu98.github.io/2019/10/13/傻瓜式使用MyBatis/</id>
    <published>2019-10-13T09:59:27.728Z</published>
    <updated>2019-10-13T11:49:12.882Z</updated>
    
    <content type="html"><![CDATA[<p>MyBatis如何快速使用？</p><h2 id="MyBatis框架图"><a href="#MyBatis框架图" class="headerlink" title="MyBatis框架图"></a>MyBatis框架图</h2><p><img src="https://img-blog.csdnimg.cn/20191013190538652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1、下载MyBatis、创建项目、导包"><a href="#1、下载MyBatis、创建项目、导包" class="headerlink" title="1、下载MyBatis、创建项目、导包"></a>1、下载MyBatis、创建项目、导包</h2><p>&emsp;&emsp;下载MyBatis：<a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/releases</a><br><img src="https://img-blog.csdnimg.cn/20191013165040445.png" alt="在这里插入图片描述"><br>&emsp;&emsp;创建项目之后导入MyBatis的核心包和依赖包以及MySQL的连接包</p><h2 id="2、创建测试用例，测试数据库、测试Bean对象"><a href="#2、创建测试用例，测试数据库、测试Bean对象" class="headerlink" title="2、创建测试用例，测试数据库、测试Bean对象"></a>2、创建测试用例，测试数据库、测试Bean对象</h2><p>&emsp;&emsp;创建测试数据库，直接运行以下SQL语句即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">SQLyog Professional v12.08 (64 bit)</span></span><br><span class="line"><span class="comment">MySQL - 5.5.49 : Database - ssm_mybatis</span></span><br><span class="line"><span class="comment">*********************************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*!40101 SET NAMES utf8 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=''*/</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="comment">/*!32312 IF NOT EXISTS*/</span><span class="string">`ssm_mybatis`</span> <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span>;</span><br><span class="line"><span class="keyword">USE</span> <span class="string">`ssm_mybatis`</span>;</span><br><span class="line"><span class="comment">/*Table structure for table `country` */</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`country`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`country`</span> (</span><br><span class="line">  <span class="string">`c_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'国家id'</span>,</span><br><span class="line">  <span class="string">`c_countryname`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'国家名称'</span>,</span><br><span class="line">  <span class="string">`c_capital`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'国家首都名称'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`c_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">6</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"><span class="comment">/*Data for the table `country` */</span></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`country`</span>(<span class="string">`c_id`</span>,<span class="string">`c_countryname`</span>,<span class="string">`c_capital`</span>) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'中国'</span>,<span class="string">'北京'</span>),(<span class="number">3</span>,<span class="string">'美国'</span>,<span class="string">'华盛顿'</span>),(<span class="number">4</span>,<span class="string">'英国'</span>,<span class="string">'伦敦'</span>),(<span class="number">5</span>,<span class="string">'日本'</span>,<span class="string">'东京'</span>);</span><br><span class="line"><span class="comment">/*Table structure for table `user` */</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`u_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'用户id'</span>,</span><br><span class="line">  <span class="string">`u_username`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户名'</span>,</span><br><span class="line">  <span class="string">`u_password`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户密码'</span>,</span><br><span class="line">  <span class="string">`u_sex`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户性别'</span>,</span><br><span class="line">  <span class="string">`u_createTime`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户创建时间'</span>,</span><br><span class="line">  <span class="string">`u_cid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户国家id'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`u_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`FK_user_cid`</span> (<span class="string">`u_cid`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`FK_user_cid`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`u_cid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`country`</span> (<span class="string">`c_Id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">13</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"><span class="comment">/*Data for the table `user` */</span></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`user`</span>(<span class="string">`u_id`</span>,<span class="string">`u_username`</span>,<span class="string">`u_password`</span>,<span class="string">`u_sex`</span>,<span class="string">`u_createTime`</span>,<span class="string">`u_cid`</span>) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'老王'</span>,<span class="string">'123'</span>,<span class="string">'1'</span>,<span class="literal">NULL</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="string">'jack'</span>,<span class="string">'123321'</span>,<span class="string">'1'</span>,<span class="literal">NULL</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="string">'alice'</span>,<span class="string">'ali111'</span>,<span class="string">'0'</span>,<span class="literal">NULL</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="string">'王司机'</span>,<span class="string">'666'</span>,<span class="string">'1'</span>,<span class="literal">NULL</span>,<span class="number">1</span>),(<span class="number">5</span>,<span class="string">'anna'</span>,<span class="string">'ali111'</span>,<span class="string">'0'</span>,<span class="literal">NULL</span>,<span class="number">4</span>),(<span class="number">6</span>,<span class="string">'李师傅'</span>,<span class="string">'222'</span>,<span class="string">'1'</span>,<span class="literal">NULL</span>,<span class="number">1</span>),(<span class="number">7</span>,<span class="string">'漩涡鸣人'</span>,<span class="string">'233'</span>,<span class="string">'1'</span>,<span class="literal">NULL</span>,<span class="number">5</span>),(<span class="number">8</span>,<span class="string">'娜美'</span>,<span class="string">'233'</span>,<span class="string">'0'</span>,<span class="literal">NULL</span>,<span class="number">5</span>),(<span class="number">9</span>,<span class="string">'王五'</span>,<span class="string">'abc'</span>,<span class="string">'1'</span>,<span class="literal">NULL</span>,<span class="number">1</span>),(<span class="number">10</span>,<span class="string">'老赵'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>),(<span class="number">11</span>,<span class="string">'老孙'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>),(<span class="number">12</span>,<span class="string">'98k'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;创建测试Bean对象，与数据库创建的字段一致，并生成GET和SET方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer u_id;</span><br><span class="line"><span class="keyword">private</span> String u_username;</span><br><span class="line"><span class="keyword">private</span> String u_password;</span><br><span class="line"><span class="keyword">private</span> String u_sex;</span><br><span class="line"><span class="keyword">private</span> Date u_createTime;</span><br><span class="line"><span class="keyword">private</span> Integer u_cid;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getU_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_id</span><span class="params">(Integer u_id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.u_id = u_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getU_username</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u_username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_username</span><span class="params">(String u_username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.u_username = u_username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getU_password</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u_password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_password</span><span class="params">(String u_password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.u_password = u_password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getU_sex</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u_sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_sex</span><span class="params">(String u_sex)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.u_sex = u_sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getU_createTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u_createTime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_createTime</span><span class="params">(Date u_createTime)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.u_createTime = u_createTime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getU_cid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u_cid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_cid</span><span class="params">(Integer u_cid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.u_cid = u_cid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"User [u_id="</span> + u_id + <span class="string">", u_username="</span> + u_username + <span class="string">", u_password="</span> + u_password + <span class="string">", u_sex="</span> + u_sex</span><br><span class="line">+ <span class="string">", u_createTime="</span> + u_createTime + <span class="string">", u_cid="</span> + u_cid + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、创建sqlMapConfig-xml主配置文件"><a href="#3、创建sqlMapConfig-xml主配置文件" class="headerlink" title="3、创建sqlMapConfig.xml主配置文件"></a>3、创建sqlMapConfig.xml主配置文件</h2><p>&emsp;&emsp;以下只是sqlMapConfig.xml主配置文件的一部分(会在快速使用MyBatis中使用到的一部分)，如果想要查看完整的配置文件请查看官方文档：<a href="https://mybatis.org/mybatis-3/zh/configuration.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/configuration.html</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在集成spring时不用 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 使用jdbc的事务 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 使用连接池 链接数据库 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ssm_mybatis?serverTimezone=Asia/Shanghai&amp;amp;characterEncoding=utf-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"p123456"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入映射文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4、创建Mapper-xml映射文件"><a href="#4、创建Mapper-xml映射文件" class="headerlink" title="4、创建Mapper.xml映射文件"></a>4、创建Mapper.xml映射文件</h2><p>&emsp;&emsp;Mapper.xml映射文件中可以书写了查找用户、模糊查找用户、添加用户、修改用户、删除用户的sql语句，其中模糊查找中如果用字符串拼接的形式是不安全的，推荐使用占位符模糊查找。<br>&emsp;&emsp;由于使用占位符查找，如果这样使用#{id}，如果传过来的id为1，他会在#{id}这个位置上显示’1’，加上了单引号，我们都知道模糊查找是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> u_username <span class="keyword">like</span> %你%</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如果我们使用占位符的话%’你’%这样是不行的，所以我们书写SQL语句的时候可以这样用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> u_username <span class="keyword">like</span> <span class="string">"%"</span><span class="string">'你'</span><span class="string">"%"</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;以下是Mapper.xml映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"UserMapper"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查找用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"com.siliedu.bean.User"</span>&gt;</span></span><br><span class="line">select * from user where u_id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #&#123;&#125;占位符 尽量选用占位符解决问题 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- $&#123;&#125;字符串拼接 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 模糊查找用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserByName"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultType</span>=<span class="string">"com.siliedu.bean.User"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  select * from user where u_username like '%$&#123;value&#125;%' --&gt;</span></span><br><span class="line">select * from user where u_username like "%"#&#123;name&#125;"%"</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.siliedu.bean.User"</span>&gt;</span></span><br><span class="line">insert into user values(null,#&#123;u_username&#125;,#&#123;u_password&#125;,#&#123;u_sex&#125;,#&#123;u_createTime&#125;,#&#123;u_cid&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修改用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.siliedu.bean.User"</span>&gt;</span></span><br><span class="line">update user set u_username = #&#123;u_username&#125; where u_id=#&#123;u_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 删除用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUserById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">delete from user where u_id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5、书写测试方法"><a href="#5、书写测试方法" class="headerlink" title="5、书写测试方法"></a>5、书写测试方法</h2><h3 id="测试通过id查找用户"><a href="#测试通过id查找用户" class="headerlink" title="测试通过id查找用户"></a>测试通过id查找用户</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//通过ID查询用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line">InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//需要sqlSessionFactoryBulider</span></span><br><span class="line">SqlSessionFactoryBuilder ssfb = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">//创建sqlSessionFactory</span></span><br><span class="line">SqlSessionFactory ssf = ssfb.build(in);</span><br><span class="line"><span class="comment">//生产一个sqlSession</span></span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line"><span class="comment">//操作数据库</span></span><br><span class="line"><span class="comment">//参数1:要操作的sql语句(对应UserMapper.xml里面的namespace.id)  参数2:sql语句的参数</span></span><br><span class="line">User user = session.selectOne(<span class="string">"UserMapper.selectUserById"</span>, <span class="number">1</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试通过名字模糊查询用户"><a href="#测试通过名字模糊查询用户" class="headerlink" title="测试通过名字模糊查询用户"></a>测试通过名字模糊查询用户</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//通过name模糊查询用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line">InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//需要sqlSessionFactoryBulider</span></span><br><span class="line">SqlSessionFactoryBuilder ssfb = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">//创建sqlSessionFactory</span></span><br><span class="line">SqlSessionFactory ssf = ssfb.build(in);</span><br><span class="line"><span class="comment">//生产一个sqlSession</span></span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line"><span class="comment">//操作数据库</span></span><br><span class="line"><span class="comment">//参数1:要操作的sql语句(对应UserMapper.xml里面的namespace.id)  参数2:sql语句的参数</span></span><br><span class="line">List&lt;User&gt; list = session.selectList(<span class="string">"UserMapper.selectUserByName"</span>, <span class="string">"王"</span>);</span><br><span class="line"><span class="keyword">for</span>(User u : list) &#123;</span><br><span class="line">System.out.println(u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试新增用户"><a href="#测试新增用户" class="headerlink" title="测试新增用户"></a>测试新增用户</h3><p>由于对数据库进行了更新，session必须commit才能使事务提交，数据库才会更新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//通过新增用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line">InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//需要sqlSessionFactoryBulider</span></span><br><span class="line">SqlSessionFactoryBuilder ssfb = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">//创建sqlSessionFactory</span></span><br><span class="line">SqlSessionFactory ssf = ssfb.build(in);</span><br><span class="line"><span class="comment">//生产一个sqlSession</span></span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line"><span class="comment">//操作数据库</span></span><br><span class="line"><span class="comment">//参数1:要操作的sql语句(对应UserMapper.xml里面的namespace.id)  参数2:sql语句的参数</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setU_username(<span class="string">"小明"</span>);</span><br><span class="line">user.setU_password(<span class="string">"123456789"</span>);</span><br><span class="line">user.setU_sex(<span class="string">"1"</span>);</span><br><span class="line">user.setU_createTime(<span class="keyword">new</span> Date());</span><br><span class="line">user.setU_cid(<span class="number">1</span>);</span><br><span class="line">session.insert(<span class="string">"UserMapper.insertUser"</span>, user);</span><br><span class="line">session.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试修改用户"><a href="#测试修改用户" class="headerlink" title="测试修改用户"></a>测试修改用户</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//修改用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line">InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//需要sqlSessionFactoryBulider</span></span><br><span class="line">SqlSessionFactoryBuilder ssfb = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">//创建sqlSessionFactory</span></span><br><span class="line">SqlSessionFactory ssf = ssfb.build(in);</span><br><span class="line"><span class="comment">//生产一个sqlSession</span></span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line"><span class="comment">//操作数据库</span></span><br><span class="line"><span class="comment">//参数1:要操作的sql语句(对应UserMapper.xml里面的namespace.id)  参数2:sql语句的参数</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setU_id(<span class="number">13</span>);</span><br><span class="line">user.setU_username(<span class="string">"小刚"</span>);</span><br><span class="line">session.update(<span class="string">"UserMapper.updateUser"</span>, user);</span><br><span class="line">session.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试删除用户"><a href="#测试删除用户" class="headerlink" title="测试删除用户"></a>测试删除用户</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//删除用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test5</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line">InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//需要sqlSessionFactoryBulider</span></span><br><span class="line">SqlSessionFactoryBuilder ssfb = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">//创建sqlSessionFactory</span></span><br><span class="line">SqlSessionFactory ssf = ssfb.build(in);</span><br><span class="line"><span class="comment">//生产一个sqlSession</span></span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line"><span class="comment">//操作数据库</span></span><br><span class="line"><span class="comment">//参数1:要操作的sql语句(对应UserMapper.xml里面的namespace.id)  参数2:sql语句的参数</span></span><br><span class="line">session.delete(<span class="string">"UserMapper.deleteUserById"</span>, <span class="number">13</span>);</span><br><span class="line">session.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>以上就是MyBatis的简单使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MyBatis如何快速使用？&lt;/p&gt;
&lt;h2 id=&quot;MyBatis框架图&quot;&gt;&lt;a href=&quot;#MyBatis框架图&quot; class=&quot;headerlink&quot; title=&quot;MyBatis框架图&quot;&gt;&lt;/a&gt;MyBatis框架图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https:
      
    
    </summary>
    
    
      <category term="SSM" scheme="https://Xiezhenyu98.github.io/categories/SSM/"/>
    
    
      <category term="MyBatis" scheme="https://Xiezhenyu98.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>聊聊struts.xml配置文件-Struts(二)</title>
    <link href="https://Xiezhenyu98.github.io/2019/10/08/%E8%81%8A%E8%81%8Astruts.xml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-Struts(%E4%BA%8C)/"/>
    <id>https://Xiezhenyu98.github.io/2019/10/08/聊聊struts.xml配置文件-Struts(二)/</id>
    <published>2019-10-08T11:47:44.023Z</published>
    <updated>2019-10-08T12:12:43.249Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;上一篇写了一下struts怎么快速上手使用，下面是struts的配置文件struts.xml中一些配置的解释(●’◡’●)。</p><hr><p>&emsp;&emsp;struts.xml是整个程序的工作流程的依据，该文件的根元素是&lt;struts&gt;，其中可以包含4个子元素，分别是：&lt;include&gt;、&lt;constant&gt;、&lt;bean&gt;、&lt;package&gt;</p><h2 id="lt-include-gt-元素"><a href="#lt-include-gt-元素" class="headerlink" title="&lt;include&gt;元素"></a>&lt;include&gt;元素</h2><p>&emsp;&emsp;由于用struts开发一个大型的项目时，struts中的配置信息会越来越多，这样就会使配置文件的可读性和维护性变差，但使用了&lt;include&gt;就会解决这个问题，我们可以按照不同的功能或者模块将配置文件分割成多个配置文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"login.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"register.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="lt-constant-gt-元素"><a href="#lt-constant-gt-元素" class="headerlink" title="&lt;constant&gt;元素"></a>&lt;constant&gt;元素</h2><p>&emsp;&emsp;&lt;constant&gt;元素用于配置一些常量信息，这些常量用于控制struts2的某些特性，相当于当他运行时，给你准备哪些功能。由于&lt;constant&gt;元素的常量值过多，我只列一些常用的，以下例子是&lt;constant&gt;元素使用的常用设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 匹配所有以".action"为后缀的请求都由struts处理，其中action可变</span></span><br><span class="line"><span class="comment">如果需要匹配多个后缀都由struts处理，则使用英文","号分隔，例如value="do,action"</span></span><br><span class="line"><span class="comment">如果不写这一句，则会默认映射Action名字</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.action.extension"</span> <span class="attr">value</span>=<span class="string">"action"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否启用开发者模式，在开发者模式下可打印出更加详细的报错信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当struts配置文件改动后，是否重新加载，默认不写是false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.configuration.xml.reload"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置浏览器是否缓存静态内容，默认不写为true缓存，在开发环境下最好关闭，可以提高开发效率 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.serve.static.browserCache"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置请求参数的编码方式，实际上相当于相当调用HttpServletRequest中的setCharacterEncoding方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.i18n.encoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 每次HTTP请求系统都重新加载资源文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.i18n.reload"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 文件上传的最大值，单位为字节 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.multipart.maxSize"</span> <span class="attr">value</span>=<span class="string">"1024"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 让Struts支持动态方法调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.enable.DynamicMethodInvocation"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在URL中的Action段中是否支持斜线 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.enable.SlashesInActionNames"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 标签中是否支持ognl表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.tag.altSyntax"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="lt-bean-gt-元素"><a href="#lt-bean-gt-元素" class="headerlink" title="&lt;bean&gt;元素"></a>&lt;bean&gt;元素</h2><p>&emsp;&emsp;struts2是一个可扩展的框架，核心组件都是可以配置的，当我们需要扩展或替换struts2的核心组件时，只需要提供自己的组件实现类，并部署到struts2的容器中即可。<br>&emsp;&emsp;例子：使用一个自定义的ObjectFactory替换struts2内置的ObjectFactory：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"myFactory"</span> <span class="attr">type</span>=<span class="string">"com.opensymphony.xwork2.ObjectFactory"</span> <span class="attr">class</span>=<span class="string">"xiezhenyu.ObjectFactory"</span> /&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="lt-package-gt-元素"><a href="#lt-package-gt-元素" class="headerlink" title="&lt;package&gt;元素"></a>&lt;package&gt;元素</h2><p>&emsp;&emsp;&lt;package&gt;元素提供了将多个Action组织为一个模块的方式，package的name在整个struts配置文件中必须是唯一的，并且一个package可以扩展自另一个package。此时改package会在本身配置的基础上加入扩展package的配置，但要注意父package必须在子package前配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">package的属性</span></span><br><span class="line"><span class="comment">name:package名称，作为其他包引用本包的标识，必填属性</span></span><br><span class="line"><span class="comment">extends:继承的父package名称，可选属性。通常设置为struts-default，继承struts-default.xml，它里面定义了许多跳转类型、拦截器等一些常用的东西</span></span><br><span class="line"><span class="comment">abstract:设置package的属性为抽象的，抽象的package不能定义Action，可选属性。</span></span><br><span class="line"><span class="comment">namespace:可选属性。浏览器地址是根据namespace/action名称去访问的action其中namespace可以是虚路径</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"MyStruts"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&lt;package&gt;子元素列表</p><table><thead><tr><th>子元素</th><th>功能</th></tr></thead><tbody><tr><td>default-action-ref</td><td>配置默认的Action</td></tr><tr><td>default-class-ref</td><td>配置默认class</td></tr><tr><td>default-interceptor-ref</td><td>配置默认拦截器，对package范围内的所有Action有效</td></tr><tr><td>global-results</td><td>配置全局结果集，对package范围内的所有Action有效</td></tr><tr><td>global-exception-mapping</td><td>配置全局异常映射，对package范围内的所有Action有效</td></tr><tr><td>result-types</td><td>配置定义返回结果类型</td></tr><tr><td>interceptors</td><td>配置拦截器信息</td></tr><tr><td>action</td><td>配置Action信息</td></tr></tbody></table><h3 id="lt-default-action-ref-gt"><a href="#lt-default-action-ref-gt" class="headerlink" title="&lt;default-action-ref&gt;"></a>&lt;default-action-ref&gt;</h3><p>&emsp;&emsp;&lt;default-action-ref&gt;元素用于配置默认的Action，当一个Action请求在配置文件中找不到时，就会执行这个默认的Action，该元素只有一个name属性。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">default-action-ref</span> <span class="attr">name</span>=<span class="string">"Error"</span>&gt;</span><span class="tag">&lt;/<span class="name">default-action-ref</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-default-class-ref-gt"><a href="#lt-default-class-ref-gt" class="headerlink" title="&lt;default-class-ref&gt;"></a>&lt;default-class-ref&gt;</h3><p>&emsp;&emsp;&lt;default-class-ref&gt;元素用户配置默认的类，在配置Action时，如果没有指定具体的class属性，系统就会使用&lt;default-class-ref&gt;元素中的配置。&lt;default-class-ref&gt;只有一个class属性。当使用&lt;default-class-ref&gt;元素指定了默认类后，Struts原来默认的类会被覆盖，而且默认的Action类必须包含execute()方法。</p><h3 id="lt-default-interceptor-ref-gt"><a href="#lt-default-interceptor-ref-gt" class="headerlink" title="&lt;default-interceptor-ref&gt;"></a>&lt;default-interceptor-ref&gt;</h3><p>&emsp;&emsp;&lt;default-interceptor-ref&gt;元素用于配置默认类拦截器，如果package继承了“struts-default”，那么也会继承父类package的默认拦截器。</p><h3 id="lt-global-result-gt"><a href="#lt-global-result-gt" class="headerlink" title="&lt;global-result&gt;"></a>&lt;global-result&gt;</h3><p>&emsp;&emsp;&lt;global-result&gt;元素用于配置package范围内的全局结果集。他的子元素是&lt;result&gt;。当一个package中多个Action都使用了一个或多个结果的时候，则将其配置在全局结果集中，增强代码的可读性和维护性。例如下面这个案列：当每个Action都返回了error的时候，全都使用这个全局结果去执行。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">global-result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"error"</span>&gt;</span>/error.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">global-result</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-global-exception-mapping-gt"><a href="#lt-global-exception-mapping-gt" class="headerlink" title="&lt;global-exception-mapping&gt;"></a>&lt;global-exception-mapping&gt;</h3><p>&emsp;&emsp;&lt;global-exception-mapping&gt;元素用于配置全局异常映射，如果&lt;action&gt;元素内配置了自己的异常映射，则Action内的优先级高于此配置。他的子元素是&lt;exception-mapping&gt;。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">global-exception-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exception-mapping</span> <span class="attr">result</span>=<span class="string">"error"</span> <span class="attr">exception</span>=<span class="string">"异常类型"</span>&gt;</span><span class="tag">&lt;/<span class="name">exception-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">global-exception-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-result-type-gt"><a href="#lt-result-type-gt" class="headerlink" title="&lt;result-type&gt;"></a>&lt;result-type&gt;</h3><p>&emsp;&emsp;&lt;result-type&gt;元素用于配置自定义返回结果类型，该元素基本不用。</p><h3 id="lt-interceptors-gt"><a href="#lt-interceptors-gt" class="headerlink" title="&lt;interceptors&gt;"></a>&lt;interceptors&gt;</h3><p>&emsp;&emsp;&lt;interceptors&gt;元素用于配置拦截器的拦截器栈，他有两个子元素：&lt;interceptor&gt;和&lt;interceptor-stack&gt;，分别用来定义拦截器和拦截器栈。</p><h3 id="lt-action-gt"><a href="#lt-action-gt" class="headerlink" title="&lt;action&gt;"></a>&lt;action&gt;</h3><p>&lt;action&gt;元素是比较重要的一个元素，也是我们开发中使用最多的一个元素。它有4个属性：</p><ul><li><p>name：必选属性，Action的名字。</p></li><li><p>class：可选属性，Action处理类的名字。</p></li><li><p>method：可选属性，指定Action中的方法。如果没有配置该属性，所有请求都会被转发到execute()方法去处理。如果有多个请求需要分别交给不同的方法去处理，就可以使用该属性来指明。</p></li><li><p>converter：可选属性，指定Action使用的类型转换器。</p><p>&emsp;&emsp;method属性除了可以填固定的函数名外，还可以使用通配符的方法实现动态方法调用，使用它的前提是必须要配置&lt;constant&gt;元素和&lt;global-allowed-methods&gt;，使其能实现动态方法调用和适配所有的方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 让Struts支持动态方法调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.enable.DynamicMethodInvocation"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">package</span>  <span class="attr">name</span>=<span class="string">"Struts"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 适配所有的通配符方法 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">global-allowed-methods</span>&gt;</span>regex:.*<span class="tag">&lt;/<span class="name">global-allowed-methods</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"*User"</span> <span class="attr">class</span>=<span class="string">"xiezhenyu.UserAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;User"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"error"</span>&gt;</span>/error.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如上代码所示，name属性值中的”*“就是通配符，表示所有以User结尾的亲求都会有这个Action处理；method属性值中的“{1}”是表达式，表示name属性中”*“的值，比如请求为loginUser，那么将传递给method属性，这是会调用Action中loginUser()方法。</p><p>&lt;action&gt;中还有以下几个子元素</p></li><li><p>&lt;interceptor-ref&gt;：用于配置拦截器</p></li><li><p>&lt;exception-mapping&gt;：用于配置异常映射</p></li><li><p>&lt;result&gt;：用于配置Action的结果映射，除了常规的结果映射外，也可以像method属性值一样使用表达式，实行动态结果。&lt;result&gt;有两个属性，name、type。name为Action类在处理完成返回的都是字符串类型的结果，这个结果作为逻辑视图存在，对应&lt;result&gt;元素的name属性值，然后找到与之对应的视图资源。type为指定结果的类型，其取值如下表所示。（我们只需要记住dispatcher、redirect和chain三个常用的即可，其它的略作了解）</p></li></ul><table><thead><tr><th>type可取值</th><th>解释</th></tr></thead><tbody><tr><td>dispatcher</td><td>转发，默认结果类型，对应视图为JSP界面</td></tr><tr><td>chain</td><td>将Action和另一个Action链接起来</td></tr><tr><td>freemarker</td><td>返回结果的对应视图为FreeMarker模板</td></tr><tr><td>HttpHeaderResult</td><td>返回一个已配置好的HTTP头信息响应</td></tr><tr><td>redirect</td><td>将用户重定向到一个配置好的URL</td></tr><tr><td>redirectAction</td><td>将用户重定向到一个已定义好的Action</td></tr><tr><td>stream</td><td>将原数据作为流传递会浏览器，一般用于下载</td></tr><tr><td>velocity</td><td>返回结果的对应视图为Velocity模板</td></tr><tr><td>xslt</td><td>呈现XML到浏览器，该XML可以通过XSL模板进行转换</td></tr><tr><td>plaintext</td><td>返回普通文本内容</td></tr></tbody></table><hr><p>以上就是struts2配置文件的大部分内容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;上一篇写了一下struts怎么快速上手使用，下面是struts的配置文件struts.xml中一些配置的解释(●’◡’●)。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;struts.xml是整个程序的工作流程的依据，该文件的根元素是&amp;lt;st
      
    
    </summary>
    
    
      <category term="SSH" scheme="https://Xiezhenyu98.github.io/categories/SSH/"/>
    
    
      <category term="struts" scheme="https://Xiezhenyu98.github.io/tags/struts/"/>
    
  </entry>
  
  <entry>
    <title>傻瓜式使用Struts-Struts(一)</title>
    <link href="https://Xiezhenyu98.github.io/2019/10/07/%E5%82%BB%E7%93%9C%E5%BC%8F%E4%BD%BF%E7%94%A8Struts-Struts(%E4%B8%80)/"/>
    <id>https://Xiezhenyu98.github.io/2019/10/07/傻瓜式使用Struts-Struts(一)/</id>
    <published>2019-10-07T06:53:12.957Z</published>
    <updated>2019-10-07T07:09:53.322Z</updated>
    
    <content type="html"><![CDATA[<p>我现在大三了，很多同学都想转行JAVA(还好我大一就确定目标学java了(●’◡’●))，今天有人问我struts怎么用，为了同学的方便，我写了这篇傻瓜式使用struts框架的博客，希望能让同学们快速使用struts框架。(本篇本着可复现的态度写的，测试可用)</p><h2 id="1、导入strurs需要用到的jar包"><a href="#1、导入strurs需要用到的jar包" class="headerlink" title="1、导入strurs需要用到的jar包"></a>1、导入strurs需要用到的jar包</h2><p>经过本人整理出以下需要用到的一些包<br>commons-fileupload-1.3.3.jar<br>commons-io-2.5.jar<br>commons-lang3-3.6.jar<br>commons-logging-1.1.3.jar<br>freemarker-2.3.26-incubating.jar<br>javassist-3.20.0-GA.jar<br>log4j-api-2.10.0.jar<br>log4j-core-2.11.0.jar<br>ognl-3.1.15.jar<br>struts2-core-2.5.16.jar<br>你可以通过 <a href="http://www.xiezhenyu98.com/zhiyuan/jar/struts.zip" target="_blank" rel="noopener">点击这里</a>下载</p><h2 id="2、配置web-xml"><a href="#2、配置web-xml" class="headerlink" title="2、配置web.xml"></a>2、配置web.xml</h2><p>在web.xml中配置struts(添加filter)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、创建Action"><a href="#3、创建Action" class="headerlink" title="3、创建Action"></a>3、创建Action</h2><p>创建一个Action并继承ActionSupport，从写里面的execute方法或者写一个带有String返回值并抛出一个异常的函数（异常可以抛出也可以不抛出）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SturtsAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"sss"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、配置struts-xml"><a href="#4、配置struts-xml" class="headerlink" title="4、配置struts.xml"></a>4、配置struts.xml</h2><p>struts.xml必须创建在src根目录下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">  "-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"</span></span><br><span class="line"><span class="meta">  "http://struts.apache.org/dtds/struts-2.5.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- name:可以随便写</span></span><br><span class="line"><span class="comment">     namespace:浏览器地址是根据namespace/action名称去访问的action其中namespace可以是虚路径</span></span><br><span class="line"><span class="comment">     extends:struts-default 为继承struts的默认结果集，就是继承struts-default.xml，它里面定义了许多跳转类型、拦截器等一些常用的东西</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"Struts"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name:浏览器访问的路径</span></span><br><span class="line"><span class="comment">       class:这个类的路径</span></span><br><span class="line"><span class="comment">       method:方法名</span></span><br><span class="line"><span class="comment">       这三个连起来可以理解为：浏览器访问的路径是访问的哪个类中的哪个方法</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"StrutsAction"</span> <span class="attr">class</span>=<span class="string">"com.xiezhenyu.web.SturtsAction"</span> <span class="attr">method</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- name:与test方法中返回的字符串对应，后面的是跳转到哪一个页面 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"index"</span>&gt;</span>/index.html<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5、测试struts"><a href="#5、测试struts" class="headerlink" title="5、测试struts"></a>5、测试struts</h2><p>在eclipse跑起来之后输入地址，使用struts成功！！<br><img src="https://img-blog.csdnimg.cn/20191007140310102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><em>注意：其中struts.xml的配置文件只是其中一部分配置，目前并不能当成万金油使用，本篇只是介绍struts如何快速使用，就不一一介绍struts的详细配置文件，后续我会一一写出。</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我现在大三了，很多同学都想转行JAVA(还好我大一就确定目标学java了(●’◡’●))，今天有人问我struts怎么用，为了同学的方便，我写了这篇傻瓜式使用struts框架的博客，希望能让同学们快速使用struts框架。(本篇本着可复现的态度写的，测试可用)&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="SSH" scheme="https://Xiezhenyu98.github.io/categories/SSH/"/>
    
    
      <category term="struts" scheme="https://Xiezhenyu98.github.io/tags/struts/"/>
    
  </entry>
  
</feed>
