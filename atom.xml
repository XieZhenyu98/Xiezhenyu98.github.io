<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>谢以轩</title>
  
  <subtitle>季节的流年里，时光如水而过。春风送暖，染一季芳菲，催一树花开，最美不过人间四月天。鸟语花香的清晨，推开窗子，看桃花灼灼，花瓣纷扬，让心灵浸染春色，那淡淡的清新沉醉了我的一帘幽梦。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://Xiezhenyu98.github.io/"/>
  <updated>2019-10-08T11:54:35.669Z</updated>
  <id>https://Xiezhenyu98.github.io/</id>
  
  <author>
    <name>谢振瑜</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>聊聊struts.xml配置文件-Struts(二)</title>
    <link href="https://Xiezhenyu98.github.io/2019/10/08/%E8%81%8A%E8%81%8Astruts.xml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-Struts(%E4%BA%8C)/"/>
    <id>https://Xiezhenyu98.github.io/2019/10/08/聊聊struts.xml配置文件-Struts(二)/</id>
    <published>2019-10-08T11:47:44.023Z</published>
    <updated>2019-10-08T11:54:35.669Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;上一篇写了一下struts怎么快速上手使用，下面是struts的配置文件struts.xml中一些配置的解释(●’◡’●)。</p><hr><p>&emsp;&emsp;struts.xml是整个程序的工作流程的依据，该文件的根元素是&lt;struts&gt;，其中可以包含4个子元素，分别是：&lt;include&gt;、&lt;constant&gt;、&lt;bean&gt;、&lt;package&gt;</p><h2 id="lt-include-gt-元素"><a href="#lt-include-gt-元素" class="headerlink" title="&lt;include&gt;元素"></a>&lt;include&gt;元素</h2><p>&emsp;&emsp;由于用struts开发一个大型的项目时，struts中的配置信息会越来越多，这样就会使配置文件的可读性和维护性变差，但使用了&lt;include&gt;就会解决这个问题，我们可以按照不同的功能或者模块将配置文件分割成多个配置文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"login.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"register.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="lt-constant-gt-元素"><a href="#lt-constant-gt-元素" class="headerlink" title="&lt;constant&gt;元素"></a>&lt;constant&gt;元素</h2><p>&emsp;&emsp;&lt;constant&gt;元素用于配置一些常量信息，这些常量用于控制struts2的某些特性，相当于当他运行时，给你准备哪些功能。由于&lt;constant&gt;元素的常量值过多，我只列一些常用的，以下例子是&lt;constant&gt;元素使用的常用设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 匹配所有以".action"为后缀的请求都由struts处理，其中action可变</span></span><br><span class="line"><span class="comment">如果需要匹配多个后缀都由struts处理，则使用英文","号分隔，例如value="do,action"</span></span><br><span class="line"><span class="comment">如果不写这一句，则会默认映射Action名字</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.action.extension"</span> <span class="attr">value</span>=<span class="string">"action"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否启用开发者模式，在开发者模式下可打印出更加详细的报错信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当struts配置文件改动后，是否重新加载，默认不写是false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.configuration.xml.reload"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置浏览器是否缓存静态内容，默认不写为true缓存，在开发环境下最好关闭，可以提高开发效率 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.serve.static.browserCache"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置请求参数的编码方式，实际上相当于相当调用HttpServletRequest中的setCharacterEncoding方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.i18n.encoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 每次HTTP请求系统都重新加载资源文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.i18n.reload"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 文件上传的最大值，单位为字节 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.multipart.maxSize"</span> <span class="attr">value</span>=<span class="string">"1024"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 让Struts支持动态方法调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.enable.DynamicMethodInvocation"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在URL中的Action段中是否支持斜线 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.enable.SlashesInActionNames"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 标签中是否支持ognl表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.tag.altSyntax"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="lt-bean-gt-元素"><a href="#lt-bean-gt-元素" class="headerlink" title="&lt;bean&gt;元素"></a>&lt;bean&gt;元素</h2><p>&emsp;&emsp;struts2是一个可扩展的框架，核心组件都是可以配置的，当我们需要扩展或替换struts2的核心组件时，只需要提供自己的组件实现类，并部署到struts2的容器中即可。<br>&emsp;&emsp;例子：使用一个自定义的ObjectFactory替换struts2内置的ObjectFactory：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"myFactory"</span> <span class="attr">type</span>=<span class="string">"com.opensymphony.xwork2.ObjectFactory"</span> <span class="attr">class</span>=<span class="string">"xiezhenyu.ObjectFactory"</span> /&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="lt-package-gt-元素"><a href="#lt-package-gt-元素" class="headerlink" title="&lt;package&gt;元素"></a>&lt;package&gt;元素</h2><p>&emsp;&emsp;&lt;package&gt;元素提供了将多个Action组织为一个模块的方式，package的name在整个struts配置文件中必须是唯一的，并且一个package可以扩展自另一个package。此时改package会在本身配置的基础上加入扩展package的配置，但要注意父package必须在子package前配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">package的属性</span></span><br><span class="line"><span class="comment">name:package名称，作为其他包引用本包的标识，必填属性</span></span><br><span class="line"><span class="comment">extends:继承的父package名称，可选属性。通常设置为struts-default，继承struts-default.xml，它里面定义了许多跳转类型、拦截器等一些常用的东西</span></span><br><span class="line"><span class="comment">abstract:设置package的属性为抽象的，抽象的package不能定义Action，可选属性。</span></span><br><span class="line"><span class="comment">namespace:可选属性。浏览器地址是根据namespace/action名称去访问的action其中namespace可以是虚路径</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"MyStruts"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&lt;package&gt;子元素列表<br>|子元素|功能|<br>|–|–|<br>|default-action-ref|配置默认的Action|<br>|default-class-ref|配置默认class|<br>|default-interceptor-ref|配置默认拦截器，对package范围内的所有Action有效|<br>|global-results|配置全局结果集，对package范围内的所有Action有效|<br>|global-exception-mapping|配置全局异常映射，对package范围内的所有Action有效|<br>|result-types|配置定义返回结果类型|<br>|interceptors|配置拦截器信息|<br>|action|配置Action信息|</p><h3 id="lt-default-action-ref-gt"><a href="#lt-default-action-ref-gt" class="headerlink" title="&lt;default-action-ref&gt;"></a>&lt;default-action-ref&gt;</h3><p>&emsp;&emsp;&lt;default-action-ref&gt;元素用于配置默认的Action，当一个Action请求在配置文件中找不到时，就会执行这个默认的Action，该元素只有一个name属性。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">default-action-ref</span> <span class="attr">name</span>=<span class="string">"Error"</span>&gt;</span><span class="tag">&lt;/<span class="name">default-action-ref</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-default-class-ref-gt"><a href="#lt-default-class-ref-gt" class="headerlink" title="&lt;default-class-ref&gt;"></a>&lt;default-class-ref&gt;</h3><p>&emsp;&emsp;&lt;default-class-ref&gt;元素用户配置默认的类，在配置Action时，如果没有指定具体的class属性，系统就会使用&lt;default-class-ref&gt;元素中的配置。&lt;default-class-ref&gt;只有一个class属性。当使用&lt;default-class-ref&gt;元素指定了默认类后，Struts原来默认的类会被覆盖，而且默认的Action类必须包含execute()方法。</p><h3 id="lt-default-interceptor-ref-gt"><a href="#lt-default-interceptor-ref-gt" class="headerlink" title="&lt;default-interceptor-ref&gt;"></a>&lt;default-interceptor-ref&gt;</h3><p>&emsp;&emsp;&lt;default-interceptor-ref&gt;元素用于配置默认类拦截器，如果package继承了“struts-default”，那么也会继承父类package的默认拦截器。</p><h3 id="lt-global-result-gt"><a href="#lt-global-result-gt" class="headerlink" title="&lt;global-result&gt;"></a>&lt;global-result&gt;</h3><p>&emsp;&emsp;&lt;global-result&gt;元素用于配置package范围内的全局结果集。他的子元素是&lt;result&gt;。当一个package中多个Action都使用了一个或多个结果的时候，则将其配置在全局结果集中，增强代码的可读性和维护性。例如下面这个案列：当每个Action都返回了error的时候，全都使用这个全局结果去执行。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">global-result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"error"</span>&gt;</span>/error.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">global-result</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-global-exception-mapping-gt"><a href="#lt-global-exception-mapping-gt" class="headerlink" title="&lt;global-exception-mapping&gt;"></a>&lt;global-exception-mapping&gt;</h3><p>&emsp;&emsp;&lt;global-exception-mapping&gt;元素用于配置全局异常映射，如果&lt;action&gt;元素内配置了自己的异常映射，则Action内的优先级高于此配置。他的子元素是&lt;exception-mapping&gt;。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">global-exception-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exception-mapping</span> <span class="attr">result</span>=<span class="string">"error"</span> <span class="attr">exception</span>=<span class="string">"异常类型"</span>&gt;</span><span class="tag">&lt;/<span class="name">exception-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">global-exception-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-result-type-gt"><a href="#lt-result-type-gt" class="headerlink" title="&lt;result-type&gt;"></a>&lt;result-type&gt;</h3><p>&emsp;&emsp;&lt;result-type&gt;元素用于配置自定义返回结果类型，该元素基本不用。</p><h3 id="lt-interceptors-gt"><a href="#lt-interceptors-gt" class="headerlink" title="&lt;interceptors&gt;"></a>&lt;interceptors&gt;</h3><p>&emsp;&emsp;&lt;interceptors&gt;元素用于配置拦截器的拦截器栈，他有两个子元素：&lt;interceptor&gt;和&lt;interceptor-stack&gt;，分别用来定义拦截器和拦截器栈。</p><h3 id="lt-action-gt"><a href="#lt-action-gt" class="headerlink" title="&lt;action&gt;"></a>&lt;action&gt;</h3><p>&lt;action&gt;元素是比较重要的一个元素，也是我们开发中使用最多的一个元素。它有4个属性：</p><ul><li><p>name：必选属性，Action的名字。</p></li><li><p>class：可选属性，Action处理类的名字。</p></li><li><p>method：可选属性，指定Action中的方法。如果没有配置该属性，所有请求都会被转发到execute()方法去处理。如果有多个请求需要分别交给不同的方法去处理，就可以使用该属性来指明。</p></li><li><p>converter：可选属性，指定Action使用的类型转换器。</p><p>&emsp;&emsp;method属性除了可以填固定的函数名外，还可以使用通配符的方法实现动态方法调用，使用它的前提是必须要配置&lt;constant&gt;元素和&lt;global-allowed-methods&gt;，使其能实现动态方法调用和适配所有的方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 让Struts支持动态方法调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.enable.DynamicMethodInvocation"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">package</span>  <span class="attr">name</span>=<span class="string">"Struts"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 适配所有的通配符方法 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">global-allowed-methods</span>&gt;</span>regex:.*<span class="tag">&lt;/<span class="name">global-allowed-methods</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"*User"</span> <span class="attr">class</span>=<span class="string">"xiezhenyu.UserAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;User"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"error"</span>&gt;</span>/error.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如上代码所示，name属性值中的”*“就是通配符，表示所有以User结尾的亲求都会有这个Action处理；method属性值中的“{1}”是表达式，表示name属性中”*“的值，比如请求为loginUser，那么将传递给method属性，这是会调用Action中loginUser()方法。</p><p>&lt;action&gt;中还有以下几个子元素</p></li><li><p>&lt;interceptor-ref&gt;：用于配置拦截器</p></li><li><p>&lt;exception-mapping&gt;：用于配置异常映射</p></li><li><p>&lt;result&gt;：用于配置Action的结果映射，除了常规的结果映射外，也可以像method属性值一样使用表达式，实行动态结果。&lt;result&gt;有两个属性，name、type。name为Action类在处理完成返回的都是字符串类型的结果，这个结果作为逻辑视图存在，对应&lt;result&gt;元素的name属性值，然后找到与之对应的视图资源。type为指定结果的类型，其取值如下表所示。（我们只需要记住dispatcher、redirect和chain三个常用的即可，其它的略作了解）</p></li></ul><table><thead><tr><th>type可取值</th><th>解释</th></tr></thead><tbody><tr><td>dispatcher</td><td>转发，默认结果类型，对应视图为JSP界面</td></tr><tr><td>chain</td><td>将Action和另一个Action链接起来</td></tr><tr><td>freemarker</td><td>返回结果的对应视图为FreeMarker模板</td></tr><tr><td>HttpHeaderResult</td><td>返回一个已配置好的HTTP头信息响应</td></tr><tr><td>redirect</td><td>将用户重定向到一个配置好的URL</td></tr><tr><td>redirectAction</td><td>将用户重定向到一个已定义好的Action</td></tr><tr><td>stream</td><td>将原数据作为流传递会浏览器，一般用于下载</td></tr><tr><td>velocity</td><td>返回结果的对应视图为Velocity模板</td></tr><tr><td>xslt</td><td>呈现XML到浏览器，该XML可以通过XSL模板进行转换</td></tr><tr><td>plaintext</td><td>返回普通文本内容</td></tr></tbody></table><hr><p>以上就是struts2配置文件的大部分内容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;上一篇写了一下struts怎么快速上手使用，下面是struts的配置文件struts.xml中一些配置的解释(●’◡’●)。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;struts.xml是整个程序的工作流程的依据，该文件的根元素是&amp;lt;st
      
    
    </summary>
    
    
      <category term="SSH" scheme="https://Xiezhenyu98.github.io/categories/SSH/"/>
    
    
      <category term="struts" scheme="https://Xiezhenyu98.github.io/tags/struts/"/>
    
  </entry>
  
  <entry>
    <title>傻瓜式使用Struts-Struts(一)</title>
    <link href="https://Xiezhenyu98.github.io/2019/10/07/%E5%82%BB%E7%93%9C%E5%BC%8F%E4%BD%BF%E7%94%A8Struts-Struts(%E4%B8%80)/"/>
    <id>https://Xiezhenyu98.github.io/2019/10/07/傻瓜式使用Struts-Struts(一)/</id>
    <published>2019-10-07T06:53:12.957Z</published>
    <updated>2019-10-07T07:09:53.322Z</updated>
    
    <content type="html"><![CDATA[<p>我现在大三了，很多同学都想转行JAVA(还好我大一就确定目标学java了(●’◡’●))，今天有人问我struts怎么用，为了同学的方便，我写了这篇傻瓜式使用struts框架的博客，希望能让同学们快速使用struts框架。(本篇本着可复现的态度写的，测试可用)</p><h2 id="1、导入strurs需要用到的jar包"><a href="#1、导入strurs需要用到的jar包" class="headerlink" title="1、导入strurs需要用到的jar包"></a>1、导入strurs需要用到的jar包</h2><p>经过本人整理出以下需要用到的一些包<br>commons-fileupload-1.3.3.jar<br>commons-io-2.5.jar<br>commons-lang3-3.6.jar<br>commons-logging-1.1.3.jar<br>freemarker-2.3.26-incubating.jar<br>javassist-3.20.0-GA.jar<br>log4j-api-2.10.0.jar<br>log4j-core-2.11.0.jar<br>ognl-3.1.15.jar<br>struts2-core-2.5.16.jar<br>你可以通过 <a href="http://www.xiezhenyu98.com/zhiyuan/jar/struts.zip" target="_blank" rel="noopener">点击这里</a>下载</p><h2 id="2、配置web-xml"><a href="#2、配置web-xml" class="headerlink" title="2、配置web.xml"></a>2、配置web.xml</h2><p>在web.xml中配置struts(添加filter)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、创建Action"><a href="#3、创建Action" class="headerlink" title="3、创建Action"></a>3、创建Action</h2><p>创建一个Action并继承ActionSupport，从写里面的execute方法或者写一个带有String返回值并抛出一个异常的函数（异常可以抛出也可以不抛出）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SturtsAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"sss"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、配置struts-xml"><a href="#4、配置struts-xml" class="headerlink" title="4、配置struts.xml"></a>4、配置struts.xml</h2><p>struts.xml必须创建在src根目录下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">  "-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"</span></span><br><span class="line"><span class="meta">  "http://struts.apache.org/dtds/struts-2.5.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- name:可以随便写</span></span><br><span class="line"><span class="comment">     namespace:浏览器地址是根据namespace/action名称去访问的action其中namespace可以是虚路径</span></span><br><span class="line"><span class="comment">     extends:struts-default 为继承struts的默认结果集，就是继承struts-default.xml，它里面定义了许多跳转类型、拦截器等一些常用的东西</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"Struts"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name:浏览器访问的路径</span></span><br><span class="line"><span class="comment">       class:这个类的路径</span></span><br><span class="line"><span class="comment">       method:方法名</span></span><br><span class="line"><span class="comment">       这三个连起来可以理解为：浏览器访问的路径是访问的哪个类中的哪个方法</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"StrutsAction"</span> <span class="attr">class</span>=<span class="string">"com.xiezhenyu.web.SturtsAction"</span> <span class="attr">method</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- name:与test方法中返回的字符串对应，后面的是跳转到哪一个页面 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"index"</span>&gt;</span>/index.html<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5、测试struts"><a href="#5、测试struts" class="headerlink" title="5、测试struts"></a>5、测试struts</h2><p>在eclipse跑起来之后输入地址，使用struts成功！！<br><img src="https://img-blog.csdnimg.cn/20191007140310102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><em>注意：其中struts.xml的配置文件只是其中一部分配置，目前并不能当成万金油使用，本篇只是介绍struts如何快速使用，就不一一介绍struts的详细配置文件，后续我会一一写出。</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我现在大三了，很多同学都想转行JAVA(还好我大一就确定目标学java了(●’◡’●))，今天有人问我struts怎么用，为了同学的方便，我写了这篇傻瓜式使用struts框架的博客，希望能让同学们快速使用struts框架。(本篇本着可复现的态度写的，测试可用)&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="SSH" scheme="https://Xiezhenyu98.github.io/categories/SSH/"/>
    
    
      <category term="struts" scheme="https://Xiezhenyu98.github.io/tags/struts/"/>
    
  </entry>
  
</feed>
