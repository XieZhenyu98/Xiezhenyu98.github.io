<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>谢以轩</title>
  
  <subtitle>季节的流年里，时光如水而过。春风送暖，染一季芳菲，催一树花开，最美不过人间四月天。鸟语花香的清晨，推开窗子，看桃花灼灼，花瓣纷扬，让心灵浸染春色，那淡淡的清新沉醉了我的一帘幽梦。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://Xiezhenyu98.github.io/"/>
  <updated>2020-04-05T11:10:31.845Z</updated>
  <id>https://Xiezhenyu98.github.io/</id>
  
  <author>
    <name>谢振瑜</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot学习笔记(三) -Spring Boot 项目结构</title>
    <link href="https://Xiezhenyu98.github.io/2020/04/05/Spring%20Boot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%89)%20-Spring%20Boot%20%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://Xiezhenyu98.github.io/2020/04/05/Spring Boot学习笔记(三) -Spring Boot 项目结构/</id>
    <published>2020-04-05T11:09:38.399Z</published>
    <updated>2020-04-05T11:10:31.845Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、POM文件"><a href="#1、POM文件" class="headerlink" title="1、POM文件"></a>1、POM文件</h3><h4 id="1-1、继承"><a href="#1-1、继承" class="headerlink" title="1.1、继承"></a>1.1、继承</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;Spring Boot 的父类依赖，只有继承它项目才是Spring Boot 项目。<br>&emsp;&emsp;spring-boot-starter-parent 是一个特殊的starter，它用来提供相关的Maven默认依赖。使用它之后，常用的包依赖可以省去version标签。</p><h4 id="1-2、依赖"><a href="#1-2、依赖" class="headerlink" title="1.2、依赖"></a>1.2、依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;启动器依赖</p><h4 id="1-3、插件"><a href="#1-3、插件" class="headerlink" title="1.3、插件"></a>1.3、插件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;spring-boot-maven-plugin插件是将spring boot 的应用程序打包成jar包的插件。将所有应用启动运行所需要的jar包都包含进来，逻辑上将具备了独立运行的条件。当运行“mvnpackage”进行打包后，使用“java -jar”命令就可以直接运行。</p><h3 id="2、启动类"><a href="#2、启动类" class="headerlink" title="2、启动类"></a>2、启动类</h3><p>&emsp;&emsp;Spring Boot 的启动类的作用是启动Spring Boot项目，是基于Main方法运行的。<br>&emsp;&emsp;注意：启动类在启动时会做注解扫描（@Controller、@Service、@Repository……），扫描位置为同包或者子包下的注释，所以启动类的位置应放于包的根下。</p><h4 id="2-1、启动类于启动器的区别"><a href="#2-1、启动类于启动器的区别" class="headerlink" title="2.1、启动类于启动器的区别"></a>2.1、启动类于启动器的区别</h4><ul><li>启动类表示项目的启动入口</li><li>启动器表示jar包的坐标<h4 id="2-2、创建启动类"><a href="#2-2、创建启动类" class="headerlink" title="2.2、创建启动类"></a>2.2、创建启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiezhenyu;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring Boot 的启动类</span></span><br><span class="line"><span class="comment"> * 启动类必须添加<span class="doctag">@SpringBootApplication</span>注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootDemo3Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootDemo3Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3、启动器"><a href="#3、启动器" class="headerlink" title="3、启动器"></a>3、启动器</h3><p>&emsp;&emsp;Spring Boot将所有的功能场景都抽取出来，做成一个个的starter（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来，要用扫描功能就导入扫描场景，在jar包管理上非常方便，最终实现一站式开发。</p><p>&emsp;&emsp;Spring Boot 提供了多达44个启动器。</p><p>&emsp;&emsp;spring-boot-starter<br>&emsp;&emsp;这是Spring Boot的核心启动器，包含了自动配置、日志和YAML。</p><p>&emsp;&emsp;spring-boot-starter-actuator<br>&emsp;&emsp;帮助监控和管理应用。</p><p>&emsp;&emsp;spring-boot-starter-web<br>&emsp;&emsp;支持全栈式Web开发，包括Tomcat和spring-webmvc。</p><p>&emsp;&emsp;spring-boot-starter-amqp<br>&emsp;&emsp;通过spring-rabbit来支持AMQP协议（Advanced Message Queuing Protocol）</p><p>&emsp;&emsp;spring-boot-starter-aop<br>&emsp;&emsp;支持面向切面编程即AOP，包含spring-aop和AspectJ。</p><p>&emsp;&emsp;spring-boot-starter-artemis<br>&emsp;&emsp;通过Apache Artemis 支持JMS的API（Java Message Service API）。</p><p>&emsp;&emsp;spring-boot-starter-batch<br>&emsp;&emsp;支持Spring Batch，包含HSQLDB数据库。</p><p>&emsp;&emsp;spring-boot-starter-cache<br>&emsp;&emsp;支持Spring的Cache抽象</p><p>&emsp;&emsp;spring-boot-starter-cloud-connectors<br>&emsp;&emsp;支持Spring Cloud Connectors，简化了在像Cloud Foundry 或 Heroku 这样的云平台上连接服务。</p><p>&emsp;&emsp;spring-boot-starter-data-elasticsearch<br>&emsp;&emsp;支持ElasticSearch搜索和分析引擎，包含spring-data-elasticsearch。</p><p>&emsp;&emsp;spring-boot-starter-data-gemfire<br>&emsp;&emsp;支持GemFire分布式数据存储，包含spring-data-gemfire。</p><p>&emsp;&emsp;spring-boot-starter-data-jpa<br>&emsp;&emsp;支持JPA（Java Persistence API），包括spring-data-jpa、spring-orm、Hibernate。</p><p>等等。。。。</p><h3 id="4、配置文件"><a href="#4、配置文件" class="headerlink" title="4、配置文件"></a>4、配置文件</h3><p>&emsp;&emsp;Spring Boot 提供一个名称为application的全局配置文件，支持两种properties格式于YAML格式。</p><h4 id="4-1、Peoperties格式"><a href="#4-1、Peoperties格式" class="headerlink" title="4.1、Peoperties格式"></a>4.1、Peoperties格式</h4><p>配置Tomcat监听端口</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8888</span></span><br></pre></td></tr></table></figure><h4 id="4-2、YAML格式"><a href="#4-2、YAML格式" class="headerlink" title="4.2、YAML格式"></a>4.2、YAML格式</h4><p>YAML格式配置文件的拓展名可以是yaml或者yml。</p><h5 id="4-2-1基本格式要求"><a href="#4-2-1基本格式要求" class="headerlink" title="4.2.1基本格式要求"></a>4.2.1基本格式要求</h5><ul><li>大小写敏感</li><li>使用缩进代表层级关系</li><li>相同的部分只能出现一次</li></ul><p>配置Tomcat监听端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">port: 8888</span><br><span class="line">host:</span><br></pre></td></tr></table></figure><h4 id="4-3、配置文件存放位置"><a href="#4-3、配置文件存放位置" class="headerlink" title="4.3、配置文件存放位置"></a>4.3、配置文件存放位置</h4><ul><li>当前项目根目录中</li><li>当前项目根目录下的一个/config子目录</li><li>项目的resource即classpath根路径中</li><li>项目的resource即classpath根路径下的/config目录中<h4 id="4-4、配置文件加载顺序"><a href="#4-4、配置文件加载顺序" class="headerlink" title="4.4、配置文件加载顺序"></a>4.4、配置文件加载顺序</h4><h5 id="4-4-1、不同格式的加载顺序"><a href="#4-4-1、不同格式的加载顺序" class="headerlink" title="4.4.1、不同格式的加载顺序"></a>4.4.1、不同格式的加载顺序</h5>&emsp;&emsp;如果同一个目录下，有application.yml也有application.properties,默认先读取application.properties。<br>&emsp;&emsp;如果同一个配置属性，在多个配置文件都配置了，默认使用第一个读取到的，后面读取的不覆盖前面读取到的。<h5 id="4-4-2、-不同位置的加载顺序"><a href="#4-4-2、-不同位置的加载顺序" class="headerlink" title="4.4.2、 不同位置的加载顺序"></a>4.4.2、 不同位置的加载顺序</h5><h6 id="4-4-2-1、当前项目根目录下的一个-config子目录中（最高）"><a href="#4-4-2-1、当前项目根目录下的一个-config子目录中（最高）" class="headerlink" title="4.4.2.1、当前项目根目录下的一个/config子目录中（最高）"></a>4.4.2.1、当前项目根目录下的一个/config子目录中（最高）</h6>config/application.properties<br>config/application.yml<h6 id="4-4-2-2、当前项目根目录中（其次）"><a href="#4-4-2-2、当前项目根目录中（其次）" class="headerlink" title="4.4.2.2、当前项目根目录中（其次）"></a>4.4.2.2、当前项目根目录中（其次）</h6>application.properties<br>application.yml<h6 id="4-4-2-3、项目的resources即classpath根路径下的-config目录中（一般）‘"><a href="#4-4-2-3、项目的resources即classpath根路径下的-config目录中（一般）‘" class="headerlink" title="4.4.2.3、项目的resources即classpath根路径下的/config目录中（一般）‘"></a>4.4.2.3、项目的resources即classpath根路径下的/config目录中（一般）‘</h6>resources/config/application.properties<br>resources/config/application.yml<h6 id="4-4-2-4、项目的resources即classpath根路径中（最后）"><a href="#4-4-2-4、项目的resources即classpath根路径中（最后）" class="headerlink" title="4.4.2.4、项目的resources即classpath根路径中（最后）"></a>4.4.2.4、项目的resources即classpath根路径中（最后）</h6>resources/application.properties<br>resources/application.yml<h4 id="4-5、配置文件中的占位符"><a href="#4-5、配置文件中的占位符" class="headerlink" title="4.5、配置文件中的占位符"></a>4.5、配置文件中的占位符</h4><h5 id="4-5-1、占位符语法"><a href="#4-5-1、占位符语法" class="headerlink" title="4.5.1、占位符语法"></a>4.5.1、占位符语法</h5>语法：${ }<h5 id="4-5-2、占位符作用"><a href="#4-5-2、占位符作用" class="headerlink" title="4.5.2、占位符作用"></a>4.5.2、占位符作用</h5></li><li>“${ }”中可以获取框架中提供的方法中的值如：random.int等。</li><li>占位符可以获取配置文件中的键的值赋给另一个键作为值。<h5 id="4-5-3、生成随机数"><a href="#4-5-3、生成随机数" class="headerlink" title="4.5.3、生成随机数"></a>4.5.3、生成随机数</h5>${random.value} - 类似uuid的随机数，没有”-“连接<br>${random.int} - 随机取整型范围内的一个值<br>${random.long} - 随机取长整型范围内的一个值<br>${random.long(100,200)} - 随机生成长整型100-200范围内的一个值<br>${random.uuid} - 生成一个uuid，有短杠连接<br>${random.int(10)} - 随机生成一个10以内的数<br>${random.int(100,200)} - 随机生成一个100-200范围以内的数</li></ul><h4 id="4-6、bootstrap配置文件"><a href="#4-6、bootstrap配置文件" class="headerlink" title="4.6、bootstrap配置文件"></a>4.6、bootstrap配置文件</h4><h5 id="4-6-1、bootstrap配置文件介绍"><a href="#4-6-1、bootstrap配置文件介绍" class="headerlink" title="4.6.1、bootstrap配置文件介绍"></a>4.6.1、bootstrap配置文件介绍</h5><p>&emsp;&emsp;Spring Boot 中有两种上下文对象，一种是bootstrap，另一种是application，bootstrap是应用程序的夫上下文，也就是说bootstrap加载优先于application。bootstrap主要用于从额外的资源来加载配置信息，还可以在本地外部配置文件中解密属性。这两个上下文共用一个环境，它是任何Spring应用程序的外部属性的来源。bootstrap里面的属性会优先加载，它们默认也不能被本地相同配置覆盖。</p><h5 id="4-6-2、bootstrap配置文件特征"><a href="#4-6-2、bootstrap配置文件特征" class="headerlink" title="4.6.2、bootstrap配置文件特征"></a>4.6.2、bootstrap配置文件特征</h5><ul><li>bootstrap由父ApplicationContext加载，比application优先加载。</li><li>bootstrap里面的属性不能被覆盖。<h5 id="4-6-3、bootstrap与application的应用场景"><a href="#4-6-3、bootstrap与application的应用场景" class="headerlink" title="4.6.3、bootstrap与application的应用场景"></a>4.6.3、bootstrap与application的应用场景</h5>application 配置文件主要用于Spring Boot 项目的自动化配置。<br>bootstrap 配置文件由一下几个应用场景。</li><li>使用Spring Cloud Config 配置中心时，这时需要在bootstrap配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息。</li><li>一些固定的不能被覆盖的属性。</li><li>一些加密/解密的场景。</li></ul><h3 id="5、Spring-Boot-的核心注解"><a href="#5、Spring-Boot-的核心注解" class="headerlink" title="5、Spring Boot 的核心注解"></a>5、Spring Boot 的核心注解</h3><h4 id="5-1、-SpringBootApplication"><a href="#5-1、-SpringBootApplication" class="headerlink" title="5.1、@SpringBootApplication"></a>5.1、@SpringBootApplication</h4><p>是SpringBoot的启动类。<br>此注解等同于@Configuration+@EnableAutoConfiguration+@ComponentScan的组合。</p><h4 id="5-2、-SpringBootConfiguration"><a href="#5-2、-SpringBootConfiguration" class="headerlink" title="5.2、@SpringBootConfiguration"></a>5.2、@SpringBootConfiguration</h4><p>&emsp;&emsp;@SpringBootConfiguration注解是@Configuration注解的派生注解，跟@Configuration注解的功能一致，标注这个类是一个配置类，只不过@SpringBootConfiguration是springboot的注解，而@Configuration是spring的注解。</p><h4 id="5-3、-Configuration"><a href="#5-3、-Configuration" class="headerlink" title="5.3、@Configuration"></a>5.3、@Configuration</h4><p>通过对bean对象的操作代替spring中xml文件</p><h4 id="5-4、-EnableAutoConfiguration"><a href="#5-4、-EnableAutoConfiguration" class="headerlink" title="5.4、@EnableAutoConfiguration"></a>5.4、@EnableAutoConfiguration</h4><p>&emsp;&emsp;Spring Boot自动配置（auto-configuration）：尝试根据你添加的jar依赖自动配置你的Spring应用。是@AutoConfigurationPackage和@Import(AutoConfigurationImportSelector.class)注解的组合。</p><h4 id="5-5、AutoConfigurationPackage"><a href="#5-5、AutoConfigurationPackage" class="headerlink" title="5.5、AutoConfigurationPackage"></a>5.5、AutoConfigurationPackage</h4><p>&emsp;&emsp;@AutoConfigurationPackage注解，自动注入主类下所在包下所有的加了注解的类（@Controller、@Service等），以及配置类（@Configuration）</p><h4 id="5-6、-Import-AutoConfigurationImportSelect-class"><a href="#5-6、-Import-AutoConfigurationImportSelect-class" class="headerlink" title="5.6、@Import({AutoConfigurationImportSelect.class})"></a>5.6、@Import({AutoConfigurationImportSelect.class})</h4><p>直接导入普通类<br>导入实现ImportSelect接口的类<br>导入事项ImportBeanDefinitionRegistrar接口的类</p><h4 id="5-7、-ComponentScan"><a href="#5-7、-ComponentScan" class="headerlink" title="5.7、@ComponentScan"></a>5.7、@ComponentScan</h4><p>主键扫描，可自动发现和装配一些Bean。</p><h4 id="5-8、-ConfigurationPropertiesScan"><a href="#5-8、-ConfigurationPropertiesScan" class="headerlink" title="5.8、@ConfigurationPropertiesScan"></a>5.8、@ConfigurationPropertiesScan</h4><p>@ConfigurationPropertiesScan扫描配置属性。@EnableConfigurationProperties注解的作用是使用@ConfigurationProperties注解的类失效。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、POM文件&quot;&gt;&lt;a href=&quot;#1、POM文件&quot; class=&quot;headerlink&quot; title=&quot;1、POM文件&quot;&gt;&lt;/a&gt;1、POM文件&lt;/h3&gt;&lt;h4 id=&quot;1-1、继承&quot;&gt;&lt;a href=&quot;#1-1、继承&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://Xiezhenyu98.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring" scheme="https://Xiezhenyu98.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot学习笔记(二) -创建基于Spring Boot的项目</title>
    <link href="https://Xiezhenyu98.github.io/2020/04/05/Spring%20Boot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)%20-%E5%88%9B%E5%BB%BA%E5%9F%BA%E4%BA%8ESpring%20Boot%E7%9A%84%E9%A1%B9%E7%9B%AE/"/>
    <id>https://Xiezhenyu98.github.io/2020/04/05/Spring Boot学习笔记(二) -创建基于Spring Boot的项目/</id>
    <published>2020-04-05T08:29:27.455Z</published>
    <updated>2020-04-05T08:31:26.569Z</updated>
    
    <content type="html"><![CDATA[<h3 id="通过官网创建项目"><a href="#通过官网创建项目" class="headerlink" title="通过官网创建项目"></a>通过官网创建项目</h3><p><img src="https://img-blog.csdnimg.cn/20200405141546567.png" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200405141952799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">将项目下载<br><img src="https://img-blog.csdnimg.cn/20200405142236933.png" alt="在这里插入图片描述"><br>将项目导入idea<br><img src="https://img-blog.csdnimg.cn/20200405144810332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200405144925804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020040514502799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200405152913801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="通过IDEA的脚手架工具创建项目"><a href="#通过IDEA的脚手架工具创建项目" class="headerlink" title="通过IDEA的脚手架工具创建项目"></a>通过IDEA的脚手架工具创建项目</h3><p><img src="https://img-blog.csdnimg.cn/20200405161044421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200405161246382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200405161346459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="通过IDEA的Maven创建项目"><a href="#通过IDEA的Maven创建项目" class="headerlink" title="通过IDEA的Maven创建项目"></a>通过IDEA的Maven创建项目</h3><p><img src="https://img-blog.csdnimg.cn/20200405161608993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200405161647691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">修改pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiezhenyu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springbootdemo3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 继承父包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring-boot的web启动的jar包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--maven的插件 springboot打包插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;通过官网创建项目&quot;&gt;&lt;a href=&quot;#通过官网创建项目&quot; class=&quot;headerlink&quot; title=&quot;通过官网创建项目&quot;&gt;&lt;/a&gt;通过官网创建项目&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200405
      
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://Xiezhenyu98.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring" scheme="https://Xiezhenyu98.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot学习笔记(一) -Spring Boot介绍</title>
    <link href="https://Xiezhenyu98.github.io/2020/04/05/Spring%20Boot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)%20-Spring%20Boot%E4%BB%8B%E7%BB%8D/"/>
    <id>https://Xiezhenyu98.github.io/2020/04/05/Spring Boot学习笔记(一) -Spring Boot介绍/</id>
    <published>2020-04-05T06:07:30.330Z</published>
    <updated>2020-04-05T06:07:20.036Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;Spring Boot是一个框架，一种全新的编程规范，他的产生简化了框架的使用，所谓简化是指简化了Spring众多框架中所需要的大量且繁琐的配置文件，所以Spring Boot是一个服务于框架的框架，服务范围是简化配置文件。所以从本质上来说，Spring Boot其实就是Spring框架的另一种表现形式。</p><h3 id="Spring-Boot-特征"><a href="#Spring-Boot-特征" class="headerlink" title="Spring Boot 特征"></a>Spring Boot 特征</h3><ul><li>使用Spring Boot 可以创建独立的Spring应用程序；</li><li>在Spring Boot 中直接嵌入了Tomcat、Jetty、Undertow等Web容器，所以在使用Spring Boot 做web开发时不需要部署WAR文件；</li><li>通过提供自己的启动器（Starter）依赖，简化项目构建配置；</li><li>尽量的自动配置Spring和第三方库；</li><li>提供了生产就绪特征，如：度量指标，运行状态检查和外部化配置；</li><li>绝对没有代码生成，也不需要配置XML配置文件。</li></ul><h3 id="版本介绍"><a href="#版本介绍" class="headerlink" title="版本介绍"></a>版本介绍</h3><p><img src="https://img-blog.csdnimg.cn/20200405140217297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>SNAPSHOT：快照版，即开发版；<br>CURRENT：最新版，但是不一定是稳定版；<br>GA：正式发布版。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;Spring Boot是一个框架，一种全新的编程规范，他的产生简化了框架的使用，所谓简化是指简化了Spring众多框架中所需要的大量且繁琐的配置文件，所以Spring Boot是一个服务于框架的框架，服务范围是简化配置文件。所以从本质上来说，Spri
      
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://Xiezhenyu98.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring" scheme="https://Xiezhenyu98.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记(四)-vue-resource以及品牌列表案例</title>
    <link href="https://Xiezhenyu98.github.io/2020/03/03/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%9B%9B)-vue-resource%E4%BB%A5%E5%8F%8A%E5%93%81%E7%89%8C%E5%88%97%E8%A1%A8%E6%A1%88%E4%BE%8B/"/>
    <id>https://Xiezhenyu98.github.io/2020/03/03/Vue学习笔记(四)-vue-resource以及品牌列表案例/</id>
    <published>2020-03-03T10:59:19.039Z</published>
    <updated>2020-03-03T11:00:52.489Z</updated>
    
    <content type="html"><![CDATA[<p>vue-resource是一个通过XMLHttpRequrest或JSONP技术实现异步加载服务端数据的Vue插件。提供了一般的 HTTP请求接口和RESTful架构请求接口，并且提供了全局方法和VUe组件实例方法。在Vue.js 2.0+ 版本推荐使用 axios 来完成 ajax 请求。<br><em>参考文献 <a href="https://www.runoob.com/vue2/vuejs-ajax.html" target="_blank" rel="noopener">https://www.runoob.com/vue2/vuejs-ajax.html</a></em></p><h4 id="Get请求"><a href="#Get请求" class="headerlink" title="Get请求"></a>Get请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">'#box'</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            msg:<span class="string">'Hello World!'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            <span class="keyword">get</span>:function()&#123;</span><br><span class="line">                <span class="comment">//发送get请求</span></span><br><span class="line">                <span class="keyword">this</span>.$http.get(<span class="string">'http://www.liulongbin.top:3005/api/getprodlist'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">document</span>.write(res.body);    </span><br><span class="line">                &#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'请求失败处理'</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要传递数据，可以使用 this.$http.get(‘get.php’,{params : jsonData}) 格式，第二个参数 jsonData 就是传到后端的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$http.get(<span class="string">'http://www.liulongbin.top:3005/api/getprodlist'</span>,&#123;<span class="attr">params</span> : &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(res.body);    </span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.status);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h4><p>post 发送数据到后端，需要第三个参数 {emulateJSON:true}。<br>emulateJSON 的作用： 如果Web服务器无法处理编码为 application/json 的请求，你可以启用 emulateJSON 选项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">'#box'</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            msg:<span class="string">'Hello World!'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            post:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="comment">//发送 post 请求</span></span><br><span class="line">                <span class="keyword">this</span>.$http.post(<span class="string">'http://www.liulongbin.top:3005/api/getprodlist'</span>,&#123;<span class="attr">name</span>:<span class="string">"谢振瑜"</span>,<span class="attr">url</span>:<span class="string">"xiezhenyu98.github.io"</span>&#125;,&#123;<span class="attr">emulateJSON</span>:<span class="literal">true</span>&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">document</span>.write(res.body);    </span><br><span class="line">                &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(res.status);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="语法-amp-API"><a href="#语法-amp-API" class="headerlink" title="语法 &amp; API"></a>语法 &amp; API</h4><p>使用全局对象方式 Vue.http 或者在一个 Vue 实例的内部使用 this.$http来发起 HTTP 请求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于全局Vue对象使用http</span></span><br><span class="line">Vue.http.get(<span class="string">'/someUrl'</span>, [options]).then(successCallback, errorCallback);</span><br><span class="line">Vue.http.post(<span class="string">'/someUrl'</span>, [body], [options]).then(successCallback, errorCallback);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在一个Vue实例内使用$http</span></span><br><span class="line"><span class="keyword">this</span>.$http.get(<span class="string">'/someUrl'</span>, [options]).then(successCallback, errorCallback);</span><br><span class="line"><span class="keyword">this</span>.$http.post(<span class="string">'/someUrl'</span>, [body], [options]).then(successCallback, errorCallback);</span><br></pre></td></tr></table></figure><p>vue-resource 提供了 7 种请求 API(REST 风格)： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">get(url, [options])</span><br><span class="line">head(url, [options])</span><br><span class="line">delete(url, [options])</span><br><span class="line">jsonp(url, [options])</span><br><span class="line">post(url, [body], [options])</span><br><span class="line">put(url, [body], [options])</span><br><span class="line">patch(url, [body], [options])</span><br></pre></td></tr></table></figure><p>除了 jsonp 以外，另外 6 种的 API 名称是标准的 HTTP 方法。<br>options 参数说明:<br><img src="https://img-blog.csdnimg.cn/20200303185609955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>通过如下属性和方法处理一个请求获取到的响应对象：<br><img src="https://img-blog.csdnimg.cn/20200303185644421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="使用-vue-resource-的-jsonp-处理跨域请求"><a href="#使用-vue-resource-的-jsonp-处理跨域请求" class="headerlink" title="使用 vue-resource 的 jsonp 处理跨域请求"></a>使用 vue-resource 的 jsonp 处理跨域请求</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    请输入关键字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"keyword"</span> @<span class="attr">keyup</span>=<span class="string">"sendJsonP(keyword)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"r in result"</span>&gt;</span>&#123;&#123;r&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      keyword: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">      result: <span class="string">''</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      sendJsonP(keyword) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> url = <span class="string">'https://www.baidu.com/sugrec?pre=1&amp;p=3&amp;ie=utf-8&amp;json=1&amp;prod=pc&amp;from=pc_web'</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$http.jsonp(url, &#123;</span></span><br><span class="line">          params: &#123;</span><br><span class="line">            wd: keyword</span><br><span class="line">          &#125;,</span><br><span class="line"><span class="actionscript">          jsonp: <span class="string">'cb'</span><span class="comment">//jsonp默认是callback,百度缩写成了cb，所以需要指定下                     &#125;</span></span></span><br><span class="line"><span class="javascript">        &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span> (res.data.g) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.result = res.data.g.map(<span class="function"><span class="params">x</span> =&gt;</span> x[<span class="string">'q'</span>]);</span></span><br><span class="line"><span class="actionscript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.result = [];</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="品牌列表案例"><a href="#品牌列表案例" class="headerlink" title="品牌列表案例"></a>品牌列表案例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue-resource/1.5.1/vue-resource.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./lib/bootstrap.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-primary"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"panel-title"</span>&gt;</span>添加品牌<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body form-inline"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">                        Name:</span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"name"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"添加"</span> @<span class="attr">click</span>=<span class="string">"add"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered table-hover table-striped"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Ctime<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Operation<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.ctime &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> @<span class="attr">click.prevent</span>=<span class="string">"del(item.id)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 如果我们通过全局配置了，请求数据的接口 根域名，则，每次单独发起 http 请求的时候，请求的url路径，应该以相对路径开头，前面不能带 / ，否则不会启用根路径做拼接。</span></span></span><br><span class="line"><span class="actionscript">        Vue.http.options.root = <span class="string">'http://www.liulongbin.top:3005'</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 全局启用 emulateJSON 选项</span></span></span><br><span class="line"><span class="actionscript">        Vue.http.options.emulateJSON = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                name:<span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">                list:[ <span class="comment">//存放所有品牌列表的数组</span></span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">name</span>:<span class="string">'五菱宏'</span>, <span class="attr">ctime</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>:<span class="number">2</span>, <span class="attr">name</span>:<span class="string">'众泰'</span>, <span class="attr">ctime</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            created()&#123; <span class="comment">//当 vm 实例的 data 和 method 初始化完毕后，vm实例会自动执行created</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.getAllList();</span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line"><span class="actionscript">                add()&#123;<span class="comment">//添加品牌列表到后台服务器</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 分析：</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 1、经过查看 数据API接口，发现，要发送一个Post请求，this.$http.post</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 2、this.$http.post() 中接收三个参数</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//  2.1、第一个参数：要请求的url地址</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//  2.2、第二个参数：要提交给服务器的数据，要以对象形式提交给服务器 &#123; name:this.name &#125;</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//  2.3、第三个参数：是一个配置对象，要以哪种表单数据类型提交过去 &#123;emulateJson:true&#125; 以普通表单格式，将数据提交给服务器 application/x-www-form-urlencoded</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 3、在post方法中，使用 .then 来设置成功的回调函数，如果想要成功的结果，需要 result.body</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="comment">// this.$http.post('api/addproduct', &#123;name:this.name&#125;,&#123;emulateJSON:true&#125;).then(result =&gt; &#123;</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//     if(result.body.status === 0)&#123;</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//         //成功了</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//         alert(result.body.message);</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//         //添加完成后，只需要手动再调用一下getAllList() 就能刷新品牌列表</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//         this.getAllList();</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//     &#125;else&#123;</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//         alert("添加失败！");</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.$http.post(<span class="string">'api/addproduct'</span>, &#123;<span class="attr">name</span>:<span class="keyword">this</span>.name&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">if</span>(result.body.status === <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                            <span class="comment">//成功了</span></span></span><br><span class="line">                            alert(result.body.message);</span><br><span class="line"><span class="actionscript">                            <span class="comment">//添加完成后，只需要手动再调用一下getAllList() 就能刷新品牌列表</span></span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">this</span>.getAllList();</span></span><br><span class="line"><span class="actionscript">                        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                            alert(<span class="string">"添加失败！"</span>);</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                getAllList()&#123;<span class="comment">//获取所有品牌列表</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 分析：</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 1、由于已经导入了vue-resource这个包，所以，可以直接通过this.$http 来发起数据请求</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 2、根据接口文档，知道，获取列表的时候，应该发起一个get请求</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 3、this.$http.get('url').then(function(result)&#123;&#125;)</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 4、当通过 then 指定回调函数之后，在回调函数中，可以拿到数据服务器返回的 result</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 5、先判断 result.status 是否等于0，如果等于0，就成功了，可以把 result.message 赋值给this.list;如果不等于0，可以弹框提示，获取数据失败！</span></span></span><br><span class="line">                    </span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.$http.get(<span class="string">'api/getprodlist'</span>).then(<span class="function"><span class="params">result</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//注意：通过 $http 获取到的数据，都在 result.body 中放着</span></span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">var</span> result = result.body;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">if</span>(result.status === <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                            <span class="comment">// 成功了</span></span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">this</span>.list = result.message;</span></span><br><span class="line"><span class="actionscript">                        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                            <span class="comment">//失败了</span></span></span><br><span class="line"><span class="actionscript">                            alert(<span class="string">'获取数据失败'</span>);</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line"><span class="actionscript">                    <span class="comment">// http://www.liulongbin.top:3005/</span></span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                del(id)&#123;<span class="comment">//删除品牌列表</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.$http.get(<span class="string">'api/delproduct/'</span>+id).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">if</span>(result.body.status === <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                            <span class="comment">//删除成功</span></span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">this</span>.getAllList();</span></span><br><span class="line"><span class="actionscript">                            alert(<span class="string">"删除成功！"</span>);</span></span><br><span class="line"><span class="actionscript">                        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                            alert(<span class="string">"删除失败！"</span>);</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vue-resource是一个通过XMLHttpRequrest或JSONP技术实现异步加载服务端数据的Vue插件。提供了一般的 HTTP请求接口和RESTful架构请求接口，并且提供了全局方法和VUe组件实例方法。在Vue.js 2.0+ 版本推荐使用 axios 来完成
      
    
    </summary>
    
    
      <category term="前端" scheme="https://Xiezhenyu98.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="https://Xiezhenyu98.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记(三)-过滤器、按键修饰符、自定义指令、生命周期</title>
    <link href="https://Xiezhenyu98.github.io/2020/03/02/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%89)-%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%E3%80%81%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://Xiezhenyu98.github.io/2020/03/02/Vue学习笔记(三)-过滤器、按键修饰符、自定义指令、生命周期/</id>
    <published>2020-03-02T14:43:13.589Z</published>
    <updated>2020-03-02T14:43:10.676Z</updated>
    
    <content type="html"><![CDATA[<h4 id="品牌列表案例"><a href="#品牌列表案例" class="headerlink" title="品牌列表案例"></a>品牌列表案例</h4><p><img src="https://img-blog.csdnimg.cn/20200302152650873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./lib/bootstrap.min.css"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 需要用到Jquery吗？ --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-primary"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"panel-title"</span>&gt;</span>添加品牌<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body form-inline"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">                    Id:</span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">v-model</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">                    Name:</span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 在Vue中，使用事件绑定机制，为元素指定处理函数的时候，如果加了小括号，就可以给函数传参了 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"添加"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> @<span class="attr">click</span>=<span class="string">"add()"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">                    搜索名称关键字:</span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">v-model</span>=<span class="string">"keywords"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered table-hover table-striped"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Ctime<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Opration<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 之前，v-for中的数据，都是从data上的list中直接渲染过来的 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 现在，我们自定义了一个search方法，同时，把所有关键字，通过传参的形式，传递给了search方法 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 先search方法内部通过执行for循环，把所有符合搜索关键字的数据，保存到一个新数组中，返回 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"item in search(keywords)"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span> &#123;&#123; item.id &#125;&#125; <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-text</span>=<span class="string">"item.name"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span> &#123;&#123; item.ctime &#125;&#125; <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">"del(item.id)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                id:<span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">                name:<span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">                keywords:<span class="string">''</span>,</span></span><br><span class="line">                list: [</span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">name</span>:<span class="string">'奔驰'</span>, <span class="attr">ctime</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>:<span class="number">2</span>, <span class="attr">name</span>:<span class="string">'宝马'</span>, <span class="attr">ctime</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123; </span><br><span class="line">                add()&#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">//分析：</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//1、获取id和name,直接从 data 上面获取</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//2、组织出一个对象</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//3、把这个对象，调用数组的相关方法，添加到当前 data 上的 list 中</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//4、注意：在Vue中，已经实现了数据的双向绑定，每当完美修改了 打他、 中的数据，Vue会默认监听到数据的改动，自动把最新的数据，应用到页面上；</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//5、当我们意识到上面的第四步的时候，就证明大家已经入门Vue了，我们更多的是在进行 VM 中Model数据的操作，同时，在操作Model数据的时候，指定的业务逻辑操作；</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> car = &#123;<span class="attr">id</span>:<span class="keyword">this</span>.id, <span class="attr">name</span>:<span class="keyword">this</span>.name, <span class="attr">ctime</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.list.push(car);</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.id = <span class="keyword">this</span>.name = <span class="string">''</span>;</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                del(id)&#123;<span class="comment">//根据id删除数据</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//分析：</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//1、如何根据ID，找到要删除这一项的索引</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//2、如果找到索引了，直接调用数组的splice方法</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.list.some(<span class="function">(<span class="params">item,i</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">if</span>(item.id == id)&#123;</span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">this</span>.list.splice(i,<span class="number">1</span>);</span></span><br><span class="line"><span class="actionscript">                            <span class="comment">//在数组的some方法中，如果return true ，就会立即终止这个数组的后续循环</span></span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                search(keywords)&#123;<span class="comment">//根据关键字进行数据的搜索</span></span></span><br><span class="line">                    /*var newList =[];</span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.list.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">if</span>(item.name.indexOf(keywords) != <span class="number">-1</span>)&#123;</span></span><br><span class="line">                            newList.push(item);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> newList;*/</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="comment">//注意：forEach some filter findIndex 这些都属于数组的新方法 都会对数组中的每一项进行遍历 然后执行相关的操作</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="keyword">this</span>.list.filter(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// if(item.name.indexOf(keywords) != -1)</span></span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//注意：在ES6中，为字符串提供了一个新方法，叫做String.prototype.include('要包含的字符串')，如果包含，则返回true，否则返回false</span></span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">if</span>(item.name.includes(keywords))&#123;</span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">return</span> item;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>Vue.js运行自定义过滤器，可悲用作一些常见的文本格式化。过滤器可以在两个地方使用：mustache插值和 v-bind 表达式。过滤器应该被添加在JavaScript的尾部，由“管道”符指示：</p><ul><li><p>html元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 过滤器调用时候的格式 &#123;&#123; name | 过滤器名称 &#125;&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.ctime | dataFormat('yyyy-m-dd') &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>私有过滤器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 过滤器调用的时候，采用的是就近原则，如果私有过滤器和全局过滤器名称一致了，这时候优先调用私有过滤器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg | msgFormat &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//如何定义一个私有过滤器</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app2'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            msg:<span class="string">'谁是这个世界上最单纯的男人，单纯的我~~'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        filters:&#123; <span class="comment">// 定义私有过滤器  过滤器有两个条件 [ 过滤器名称 和 处理函数 ]</span></span></span><br><span class="line"><span class="actionscript">            msgFormat:<span class="function"><span class="keyword">function</span><span class="params">(msg,partten)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> msg.replace(<span class="regexp">/单纯/g</span>,<span class="string">'大方---'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>全局过滤器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg | msgFormat &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg | msgFormat2('疯狂+1') &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//定义一个Vue 全局的过滤器，名字叫 msgFormat</span></span></span><br><span class="line"><span class="actionscript">    Vue.filter(<span class="string">'msgFormat'</span>,<span class="function"><span class="keyword">function</span><span class="params">(msg)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 字符串的 replace 方法，第一个参数，除了可以写一个字符串之外，还可以定义一个正则</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> msg.replace(<span class="regexp">/单纯/g</span>,<span class="string">'邪恶'</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    Vue.filter(<span class="string">'msgFormat2'</span>,<span class="function"><span class="keyword">function</span><span class="params">(msg,arg)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 字符串的 replace 方法，第一个参数，除了可以写一个字符串之外，还可以定义一个正则</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> msg.replace(<span class="regexp">/单纯/g</span>,arg);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            msg:<span class="string">'谁是这个世界上最单纯的男人，单纯的我~~'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>注意：当有局部和全局两个名称相同的过滤器的时候，会采用就近原则调用，即：局部过滤器优先于全局过滤器被调用！</p><h4 id="按键修饰符以及自定义键盘修饰符"><a href="#按键修饰符以及自定义键盘修饰符" class="headerlink" title="按键修饰符以及自定义键盘修饰符"></a>按键修饰符以及自定义键盘修饰符</h4><p>在监听键盘事件时，我们如果需要检查详细的按键。Vue 允许为 v-on 在监听键盘事件时添加按键修饰符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当按键enter弹起时才调用submit函数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中.enter是 Vue 提供的常见按键码别名，除此之外还有：</p><ul><li>.enter</li><li>.tab</li><li>.delete (捕获“删除”和“退格”键)</li><li>.esc</li><li>.space</li><li>.up</li><li>.down</li><li>.left</li><li>.right</li></ul><p>除了 Vue 提供的常见按键别名，如果要使用其他的按键则可以 .按键码 （<a href="https://blog.csdn.net/weixin_34216036/article/details/93813615" target="_blank" rel="noopener">点击查看详细按键码</a>）的方式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用.按键码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.113</span>=<span class="string">"submit"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除了直接使用键盘码之外，还可以给键盘码起一个别名方便使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//其中f2是别名，113是键盘码</span></span></span><br><span class="line">Vue.config.keyCode.f2 = 113</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h4><ul><li><p>全局自定义指令<br>使用 Vue.directive() 定义全局指令；<br>其中：<br>参数1：指令的名称，注意，在定义的时候，指令的名称前面，不需要加 v- 前缀在调用的时候，必须在指令前 加上 v- 前缀；<br>参数2：是一个对象，这个对象身上，有一些指令相关的函数，这些函数可以特定的阶段，执行相关的操作；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">Vue.directive(<span class="string">'focus'</span>,&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//bind inserted update 是钩子函数</span></span></span><br><span class="line"><span class="actionscript">bind: <span class="function"><span class="keyword">function</span><span class="params">(el)</span></span>&#123;<span class="comment">//每当指令绑定到元素上的时候，会执行这个bind函数，只执行一次</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//注意：在每个元素中，第一个参数，永远是el，表示被绑定了指令的那个元素，这个el参数，是一个原生的js对象</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//在元素刚绑定了指令的时候，还没有插入到DOM中去，这个时候，调用foucs方法没有用</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//因为，一个元素，只有插入DOM之后，才能获取焦点</span></span></span><br><span class="line"><span class="actionscript">el.focus();<span class="comment">//这个方法不会起作用</span></span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="actionscript">inserted: <span class="function"><span class="keyword">function</span><span class="params">(el)</span></span>&#123;<span class="comment">//表示元素插入到DOM中的时候会执行inserted函数</span></span></span><br><span class="line">el.focus();</span><br><span class="line">&#125;,</span><br><span class="line"><span class="actionscript">update: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;<span class="comment">//当VNode更新的时候，会执行update，可能会触发多次</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>自定义私有指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="actionscript">dirctives:&#123;<span class="comment">//自定义私有指令</span></span></span><br><span class="line"><span class="actionscript"><span class="string">'fontweight'</span>:&#123;</span></span><br><span class="line"><span class="actionscript">bind: <span class="function"><span class="keyword">function</span><span class="params">(el,binding)</span></span>&#123;</span></span><br><span class="line">el.style.fontWeight = binding.value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>自定义指令函数的简写<br>在很多时候，你可能想在 bind 和 update 时触发相同行为，而不关心其它的钩子。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">Vue.directive(<span class="string">'color-swatch'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(el, binding)</span> </span>&#123;</span></span><br><span class="line">  el.style.backgroundColor = binding.value</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="钩子函数和钩子函数的属性"><a href="#钩子函数和钩子函数的属性" class="headerlink" title="钩子函数和钩子函数的属性"></a>钩子函数和钩子函数的属性</h4><p>一个指令定义对象可以提供如下几个钩子函数 (均为可选)：</p><ul><li>bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</li><li>inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</li><li>update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新。</li><li>componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用。</li><li>unbind：只调用一次，指令与元素解绑时调用。</li></ul><p>指令钩子函数会被传入以下参数：</p><ul><li><p>el：指令所绑定的元素，可以用来直接操作 DOM。</p></li><li><p>binding：一个对象，包含以下属性：</p><ul><li>name：指令名，不包括 v- 前缀。</li><li>value：指令的绑定值，例如：v-my-directive=”1 + 1” 中，绑定值为 2。</li><li>oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</li><li>expression：字符串形式的指令表达式。例如 v-my-directive=”1 + 1” 中，表达式为 “1 + 1”。</li><li>arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 “foo”。</li><li>modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。</li></ul></li><li><p>vnode：Vue 编译生成的虚拟节点。移步 VNode API 来了解更多详情。</p></li><li><p>oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</p></li></ul><h4 id="Vue实例的生命周期"><a href="#Vue实例的生命周期" class="headerlink" title="Vue实例的生命周期"></a>Vue实例的生命周期</h4><ul><li>什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！</li><li>生命周期钩子：就是生命周期事件的别名而已；</li><li>主要生命周期函数分类<ul><li>创建期间的生命周期函数：<ul><li>beforeCreate：实例刚再内存中被创建出来，此时，还没有初始化好 data 和 methods 属性；</li><li>created：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始编译模板；</li><li>beforMount：此时已经完成了模板的编译，但是还没有挂载到网页中；</li><li>mounted：此时，已经将编译好的模板，挂载到了网页的指定容器中显示；</li></ul></li><li>运行期间的生命周期函数：<ul><li>beforUpdate：状态更新之前执行此函数，此时 data 中的状态值还是最新的，但是界面上显示的数据还是旧的，因此此时还没有开始渲染DOM节点；</li><li>update：实例更新完毕之后调用此函数，此时 data 中的状态值和界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了；</li></ul></li><li>销毁期间的生命周期：<ul><li>beforDestroy：实例销毁之前调用。在这一步，实例仍然完全可用；</li><li>destroyed：Vue实例销毁后调用。调用后，Vue实例显示的所有东西都会解绑定，所有事件监听器会被移除，所有子实例也会被销毁。</li></ul></li></ul></li></ul><p>过程图：<br><img src="https://img-blog.csdnimg.cn/20200302222142926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;品牌列表案例&quot;&gt;&lt;a href=&quot;#品牌列表案例&quot; class=&quot;headerlink&quot; title=&quot;品牌列表案例&quot;&gt;&lt;/a&gt;品牌列表案例&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2020030215265087
      
    
    </summary>
    
    
      <category term="前端" scheme="https://Xiezhenyu98.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="https://Xiezhenyu98.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记(二)-Vue指令的学习</title>
    <link href="https://Xiezhenyu98.github.io/2020/03/01/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)-Vue%E6%8C%87%E4%BB%A4%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>https://Xiezhenyu98.github.io/2020/03/01/Vue学习笔记(二)-Vue指令的学习/</id>
    <published>2020-03-01T15:45:25.470Z</published>
    <updated>2020-03-01T15:45:21.912Z</updated>
    
    <content type="html"><![CDATA[<h4 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h4><p>正常情况我们在页面取值都是通过 来取值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            msg:<span class="string">'123'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面显示效果<br><img src="https://img-blog.csdnimg.cn/20200301153005685.png" alt="在这里插入图片描述"></p><h4 id="Vue指令之v-cloak"><a href="#Vue指令之v-cloak" class="headerlink" title="Vue指令之v-cloak"></a>Vue指令之v-cloak</h4><p>在使用插值表达式的时候，如果将项目发布到服务器上，出现网速慢的情况，浏览器不能及时接收到vue.js，这个时候会出现闪烁现象，即这个符号会出现在网页上，等到浏览器接收完数据后，才会将替换成真正的数据。如下图：<br><img src="https://img-blog.csdnimg.cn/20200301153430506.png" alt="在这里插入图片描述"><br>解决这个问题，可以使用v-cloak指令解决：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            msg:<span class="string">'123'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Vue指令之v-text和v-html"><a href="#Vue指令之v-text和v-html" class="headerlink" title="Vue指令之v-text和v-html"></a>Vue指令之v-text和v-html</h4><ul><li>v-text：默认v-text没有闪烁问题， 于插值表达式不同的是v-text会覆盖元素中原本的内容，而插值表达式只会替换自己的占位符，不会把整个元素的内容清空。</li><li>v-html：于v-text不同的是，v-html会识别输出html标签，而v-text会将内容完整的输出不识别标签。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123; msg2 &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">"msg2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"msg2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="handlebars"><span class="xml">            msg2:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是一个h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下图：<br><img src="https://img-blog.csdnimg.cn/20200301154115977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="Vue指令之v-bind"><a href="#Vue指令之v-bind" class="headerlink" title="Vue指令之v-bind"></a>Vue指令之v-bind</h4><ul><li>v-bind 是一个vue中提供的用于绑定属性的指令</li><li>v-bing: 指令可以被简写为 :要绑定的属性</li><li>v-bind 中，可以写合法的表达式<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮1"</span> <span class="attr">v-bind:title</span>=<span class="string">"mytitle + '123'"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮2"</span> <span class="attr">:title</span>=<span class="string">"mytitle + '123'"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            mytitle:<span class="string">'这是自己定义的一个title'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图下图：<br><img src="https://img-blog.csdnimg.cn/20200301155353167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="Vue指令之v-on和事件修饰符"><a href="#Vue指令之v-on和事件修饰符" class="headerlink" title="Vue指令之v-on和事件修饰符"></a>Vue指令之v-on和事件修饰符</h4><p>Vue中提供了v-on:事件绑定机制，缩写为@</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">v-on:click</span>=<span class="string">"show"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> @<span class="attr">click</span>=<span class="string">"show"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="actionscript">        methods:&#123; <span class="comment">//这个methods属性中定义了当前Vue实例中所有可用的方法</span></span></span><br><span class="line"><span class="actionscript">            show: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">'Hello'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下图：<br><img src="https://img-blog.csdnimg.cn/20200301160341751.png" alt="在这里插入图片描述"><br><strong>事件修饰符</strong></p><ul><li>.stop 阻止冒泡</li><li>.prevent 阻止默认事件</li><li>.capture 添加事件监听器的使用事件捕获模式</li><li>.self 只当前事件在该元素本身（比如不是子元素）触发时触发回调</li><li>.once 事件只触发一次</li></ul><p>.stop和.self的区别是：.self只会阻止自己身上的冒泡行为并不会真正的阻止冒泡行为的触发。<br>示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.inner</span>&#123;</span></span><br><span class="line">            height: 150px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用.stop阻止冒泡 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;div class="inner" @click="div1Handler"&gt;</span></span><br><span class="line"><span class="comment">            &lt;input type="button" value="戳他" @click.stop="btnHandler"&gt;</span></span><br><span class="line"><span class="comment">        &lt;/div&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 使用 .prevent 阻止默认行为 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;a href="http://www.baidu.com" @click.prevent="linkClick"&gt;有问题，先去百度&lt;/a&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 使用 .capture 实现捕获触发的机制 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;div class="inner" @click.capture="div1Handler"&gt;</span></span><br><span class="line"><span class="comment">            &lt;input type="button" value="戳他" @click="btnHandler"&gt;</span></span><br><span class="line"><span class="comment">        &lt;/div&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 使用 .self 实现只有点击当前元素时候，才会触发事件处理函数 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;div class="inner" @click.self="div1Handler"&gt;</span></span><br><span class="line"><span class="comment">            &lt;input type="button" value="戳他" @click="btnHandler"&gt;</span></span><br><span class="line"><span class="comment">        &lt;/div&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 使用 .once 只触发一次事件处理函数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> @<span class="attr">click.prevent.once</span>=<span class="string">"linkClick"</span>&gt;</span>有问题，先去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- .self 只会阻止自己身上冒泡行为的触发，并不会真正阻止冒泡行为 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123; </span><br><span class="line">                div1Handler()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'这是触发了 inner div 的点击事件'</span>)</span></span><br><span class="line">                &#125;,</span><br><span class="line">                btnHandler()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'这是出发了 button 的点击事件'</span>)</span></span><br><span class="line">                &#125;,</span><br><span class="line">                linkClick()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'这是触发了连接的点击事件'</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="跑马灯效果实现"><a href="#跑马灯效果实现" class="headerlink" title="跑马灯效果实现"></a>跑马灯效果实现</h4><p>分析：</p><ul><li>给开启跑马灯效果的按钮绑定一个时间 v-on或@</li><li>在按钮的时间处理函数中，写相关的业务逻辑代码：拿到msg字符串，然后调用字符串的substring来进行字符串的截取操作，把第一个字符串截取下来，放到最后一个位置即可；</li><li>为了实现点击一下按钮，自动截取的功能，需要把上一个步骤的代码，放到一个定时器中去；<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.导入Vue包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.创建一个要控制的区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"浪起来"</span> @<span class="attr">click</span>=<span class="string">"lang"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"低调"</span> @<span class="attr">click</span>=<span class="string">"stop"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//注意在vm实例中，如果想要获取data上的数据，或者想要调用methods中的方法，必须通过this.数据属性名或者this.方法名进行访问，这里的this就表示我们new出来的vm实例对象</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                msg:<span class="string">'猥琐发育，别浪~~~~！'</span>,</span></span><br><span class="line"><span class="actionscript">                intervalId:<span class="literal">null</span> <span class="comment">//在data上定义一个定时器id</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                lang()&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span>(<span class="keyword">this</span>.intervalId!=<span class="literal">null</span>)<span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.intervalId = setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//获取到头的第一个字符</span></span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">var</span> start = <span class="keyword">this</span>.msg.substring(<span class="number">0</span>,<span class="number">1</span>);</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//获取到后面的所有字符</span></span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">var</span> end = <span class="keyword">this</span>.msg.substring(<span class="number">1</span>);</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//重新拼接得到新的字符串并赋值给this.msg</span></span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.msg = end + start;</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//注意：vm实例，会监听自己身上data中所有数据的改变，只要数据一发生变化，就会自动把最新的数据，从data上同步到页面</span></span></span><br><span class="line">                    &#125;,400)</span><br><span class="line">                &#125;,</span><br><span class="line"><span class="vbscript">                <span class="keyword">stop</span>()&#123;</span></span><br><span class="line"><span class="actionscript">                    clearInterval(<span class="keyword">this</span>.intervalId);</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//每当清除了intervalId之后重新赋值null</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.intervalId=<span class="literal">null</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Vue指令之v-model和双向数据绑定"><a href="#Vue指令之v-model和双向数据绑定" class="headerlink" title="Vue指令之v-model和双向数据绑定"></a>Vue指令之v-model和双向数据绑定</h4><ul><li>v-bind 只能实现数据的单向数据绑定，从 M 自动绑定到 V，无法实现数据的双向绑定</li><li>使用 v-model 指令，可以实现表单元素和Model中数据的双向数据绑定</li><li>注意：v-model 只能运用在表单元素中使用<br>示例代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            msg:<span class="string">'大家都是好孩子，爱敲代码，爱学习，爱思考，简直是完美，没瑕疵！'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>效果：<br><img src="https://img-blog.csdnimg.cn/2020030117530333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="简易计算器案例"><a href="#简易计算器案例" class="headerlink" title="简易计算器案例"></a>简易计算器案例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"n1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"opt"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"+"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"-"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"*"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"/"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"n2"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"="</span> @<span class="attr">click</span>=<span class="string">"calc"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"result"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">            n1: 0,</span><br><span class="line">            n2: 0,</span><br><span class="line">            result: 0,</span><br><span class="line"><span class="actionscript">            opt: <span class="string">'+'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123; </span><br><span class="line"><span class="actionscript">            calc()&#123; <span class="comment">//计算器算数的方法</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">//逻辑：</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">switch</span>(<span class="keyword">this</span>.opt)&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">case</span> <span class="string">'+'</span>:</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">this</span>.result = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n1) + <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n2);</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">case</span> <span class="string">'-'</span>:</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">this</span>.result = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n1) - <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n2);</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">case</span> <span class="string">'*'</span>:</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">this</span>.result = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n1) * <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n2);</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">case</span> <span class="string">'/'</span>:</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">this</span>.result = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n1) / <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n2);</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">break</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="comment">// var cadeStr = 'parseInt(this.n1)' + this.opt + 'parseInt(this.n2)'</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// this.result = eval(cadeStr);</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在Vue中使用样式"><a href="#在Vue中使用样式" class="headerlink" title="在Vue中使用样式"></a>在Vue中使用样式</h4><p><strong>使用class样式</strong></p><ul><li><p>数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['red','thin']"</span>&gt;</span>这是一个H1标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>数组中使用三元表达式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['red','thin'],isactive?'active':''"</span>&gt;</span>这是一个H1标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>数组中嵌套对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['red','thin'],&#123;'active':isactive&#125;"</span>&gt;</span>这是一个H1标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>直接使用对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"&#123;red:true,italic:true,active:true,thin:true&#125;"</span>&gt;</span>这是一个H1标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>样例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">   <span class="selector-class">.red</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.thin</span>&#123;</span></span><br><span class="line">        font-weight: 200;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.italic</span>&#123;</span></span><br><span class="line">        font-style: italic;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">letter-spacing</span>: 0<span class="selector-class">.5em</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;h1 class="red thin"&gt;这是一个很大很大的一个H1，大到你无法想象！！！&lt;/h1&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第一种使用方式，直接传递一个数组，注意：这里的class需要用 v-bind做数据绑定 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;h1 :class="['thin','italic']"&gt;这是一个很大很大的一个H1，大到你无法想象！！！&lt;/h1&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在数组中使用三元表达式 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;h1 :class="['thin','italic',flag?'active':'']"&gt;这是一个很大很大的一个H1，大到你无法想象！！！&lt;/h1&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在数组中使用对象来代替三元表达式，来提高代码的可读性 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;h1 :class="['thin','italic',&#123;'active':flag&#125;]"&gt;这是一个很大很大的一个H1，大到你无法想象！！！&lt;/h1&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在为 class 使用 v-bind 绑定对象的时候，对象的属性是类名，由于对象的属性可带引号,也可以不带引号；属性的值是一个标识符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"calssObj"</span>&gt;</span>这是一个很大很大的一个H1，大到你无法想象！！！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            flag:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">            calssObj:&#123;<span class="string">'red'</span>:<span class="literal">true</span>,<span class="string">'thin'</span>:<span class="literal">true</span>,active:<span class="literal">true</span>,italic:<span class="literal">true</span>&#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用内联样式</strong></p><ul><li><p>直接在元素上通过 :style 的样式，书写样式对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">"&#123;color:'red','font-size':'40px'&#125;"</span>&gt;</span>这是一个H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>将样式对象，定义到 data 中，并直接引用到 :style 中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//在data上的定义样式</span><br><span class="line">data:&#123;</span><br><span class="line">h1StyleObj:&#123;color:'red','font-size':'40px','font-weight':'200'&#125;</span><br><span class="line">&#125;</span><br><span class="line">//在元素中，通过属性绑定的样式，将样式对象应用到元素中</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">"h1StyleObj"</span>&gt;</span>这是一个H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 :style中通过数组，引用多个 data 上的样式对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//在data上定义样式</span><br><span class="line">data&#123;</span><br><span class="line">h1StyleObj:&#123;color:'red',''font-size':'40px','font-weight':'200'&#125;,</span><br><span class="line">h1StyleObj2:&#123;font-style:'italic'&#125;</span><br><span class="line">&#125;</span><br><span class="line">//在元素中，通过属性绑定的形式，将样式对象应用到元素中</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">"[h1StyleObj,h1StyleObj2]"</span>&gt;</span>这是一个H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Vue指令之v-for和key属性"><a href="#Vue指令之v-for和key属性" class="headerlink" title="Vue指令之v-for和key属性"></a>Vue指令之v-for和key属性</h4><ul><li><p>迭代数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,i) in list"</span>&gt;</span>索引：&#123;&#123; i &#125;&#125; --- 姓名：&#123;&#123; item.name &#125;&#125; ---年龄：&#123;&#123; item.age &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>迭代对象中的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 遍历对象身上的属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(val,key,i) in userInfo"</span>&gt;</span>&#123;&#123; val &#125;&#125; --- &#123;&#123; key &#125;&#125; --- &#123;&#123; i &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>迭代数字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"i in 10"</span>&gt;</span>这是第&#123;&#123; i &#125;&#125;个p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>** 2.2.0+的版本里，当在组件中使用v-for时，key现在是必须的。**<br>当vue.js用v-for正在更新以渲染过的元素列表时，它默认用“就她复用”策略。如果数据项的顺序被改变，Vue将不是移动DOM元素匹配数据项的顺序，而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染的每个元素。<br>为了给Vue一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每一项提供一个唯一key属性。</p><h4 id="Vue指令之v-if和v-show"><a href="#Vue指令之v-if和v-show" class="headerlink" title="Vue指令之v-if和v-show"></a>Vue指令之v-if和v-show</h4><p>一般来说，v-if有更高的切换消耗而v-show有更高的渲染消耗，因此，如果需要频繁切换v-show较好，如果运行时条件不大可能改变v-if较好。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"toggle"</span> @<span class="attr">click</span>=<span class="string">"flag=!flag"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-if 的特点：每次都会重新删除或创建元素 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-show 的特点：每次不会重新进行DOM的删除和创建操作，只是切换了元素的 display:none 样式 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- v-if 有较高的切换性能消耗 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-show 有较高的初始渲染消耗 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 如果元素涉及到频繁的切换，最好不要使用 v-if ，推荐使用v-show --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果元素可能永远不会被显示出来被用户看到，则推荐使用v-if --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span>这是用v-if控制的元素<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-show</span>=<span class="string">"flag"</span>&gt;</span>这是用v-show控制的元素<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            flag:<span class="literal">true</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;插值表达式&quot;&gt;&lt;a href=&quot;#插值表达式&quot; class=&quot;headerlink&quot; title=&quot;插值表达式&quot;&gt;&lt;/a&gt;插值表达式&lt;/h4&gt;&lt;p&gt;正常情况我们在页面取值都是通过 来取值&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;ta
      
    
    </summary>
    
    
      <category term="前端" scheme="https://Xiezhenyu98.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="https://Xiezhenyu98.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记-什么是Vue.js</title>
    <link href="https://Xiezhenyu98.github.io/2020/03/01/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BB%80%E4%B9%88%E6%98%AFVue.js/"/>
    <id>https://Xiezhenyu98.github.io/2020/03/01/Vue学习笔记-什么是Vue.js/</id>
    <published>2020-03-01T06:47:21.390Z</published>
    <updated>2020-03-01T06:47:10.680Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是Vue-js"><a href="#什么是Vue-js" class="headerlink" title="什么是Vue.js?"></a>什么是Vue.js?</h4><ul><li>Vue(读音/vju:/,类似于view)，是一个轻量级的MVVM前端框架；</li><li>中文官网：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></li><li>作者：尤雨溪（Evan You）</li><li>Vue.js是目前最火的一个前端框架，React是最流行的一个前端框架（React除了开发网站，还可以开发手机app，Vue语法也可以进行手机app开发的，需要借助于Weex）</li><li>Vue.js是前端的<strong>主流框架之一</strong>，和Angular.js、React.js一起，并成前端三大主流框架！</li><li>Vue.js是一套构建用户界面的框架，<strong>只关注视图层</strong>，它不仅易于上手，还便于于第三方库或既有项目整合。（Vue有配套的第三方类库，可以整合起来做大项目的开发）</li><li>前端的主要工作？主要负责MVC中的V这一层；主要工作就是和界面打交道，来制作前端页面效果；<h4 id="Vue的优势"><a href="#Vue的优势" class="headerlink" title="Vue的优势"></a>Vue的优势</h4><ul><li>亲便、高效：20kB min+gzip 运行大小；</li><li>灵活：在一个库和完整框架之间自由选择；</li><li>易学：完善的中文社区、简单易懂的API，具备基本前端知识（HTML、CSS、JavaScript）即可开始学习；</li><li>数据双向绑定：简化DOM操作；</li><li>数据驱动：保证数据和视图的一致性；</li><li>组件化：将重复的结构、样式、逻辑封装成组件，方便复用，从而课组成大型应用；</li><li>第三方支持；支持很多优秀的三方库；</li><li><em>注意： Vue不支持IE8一下版本；*</em><h4 id="为什么要学习流行框架"><a href="#为什么要学习流行框架" class="headerlink" title="为什么要学习流行框架"></a>为什么要学习流行框架</h4></li></ul></li><li>企业为了提高开发效率：在企业中，时间就是效率，效率就是金钱，在企业中使用框架，能够提高开发效率；</li><li>提高开发效率的历程：原生JS-&gt;Jquery之类的类库-&gt;前端模板引擎-&gt;Angular.js/Vue.js（能够帮助我们减少不必要的DOM操作，提高渲染效率；双向数据绑定概念【通过框架提供的指令，我们前端程序员只需要关心数据的业务逻辑，不再关心DOM是如何渲染的了】）</li><li>在Vue中，一个核心的概念，就是让用户不再操作DOM，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑；</li></ul><h4 id="框架和库的区别"><a href="#框架和库的区别" class="headerlink" title="框架和库的区别"></a>框架和库的区别</h4><ul><li>框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新构建整个项目。</li><li>库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其他库实现需求。</li></ul><h4 id="使用Vue-js"><a href="#使用Vue-js" class="headerlink" title="使用Vue.js"></a>使用Vue.js</h4><ul><li>获取Vue.js库<br>· <a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/installation.html</a><br>· 手动下载；23183829<br>· 直接使用npm命令；<br>· 直接引用；<h4 id="Vue的基本代码"><a href="#Vue的基本代码" class="headerlink" title="Vue的基本代码"></a>Vue的基本代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.导入Vue的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将来new的Vue实例，会控制这个元素中的所有内容 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Vue实例控制的这个元素区域，就是我们的V --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//2.创建一个Vue的实例</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//当我们导入包之后，在浏览器中，就多了一个Vue构造函数</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//注意：我们new出来的这个VM对象，就是我们MVVM中的VM调度者</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app'</span>,<span class="comment">//表示当前我们new的这个实例，要控制页面上的哪个区域</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//这里的data就是MVVM里面的M，专门用来保存每个页面的数据的</span></span></span><br><span class="line"><span class="actionscript">            data: &#123; <span class="comment">//data属性中，存放的是el中要用到的数据</span></span></span><br><span class="line"><span class="actionscript">                msg: <span class="string">'欢迎学习Vue'</span><span class="comment">//通过Vue提供的指令，很方便的就能把数据渲染到页面上，程序员不再动手操作DOM元素了【前端的Vue之类的框架，不提倡我们去手动操作DOM元素了】</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是Vue-js&quot;&gt;&lt;a href=&quot;#什么是Vue-js&quot; class=&quot;headerlink&quot; title=&quot;什么是Vue.js?&quot;&gt;&lt;/a&gt;什么是Vue.js?&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Vue(读音/vju:/,类似于view)，是一个轻量级的MVVM前
      
    
    </summary>
    
    
      <category term="前端" scheme="https://Xiezhenyu98.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="https://Xiezhenyu98.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法-时间复杂度</title>
    <link href="https://Xiezhenyu98.github.io/2019/12/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <id>https://Xiezhenyu98.github.io/2019/12/06/数据结构和算法-时间复杂度/</id>
    <published>2019-12-06T08:03:58.271Z</published>
    <updated>2019-12-06T08:04:53.213Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;在计算机科学中，时间复杂性，又称时间复杂度，算法的时间复杂度是一个函数，它定性描述该算法的运行时间。这是一个代表算法输入值的字符串的长度的函数。时间复杂度常用大O符号表述，不包括这个函数的低阶项和首项系数。使用这种方式时，时间复杂度可被称为是渐近的，亦即考察输入值大小趋近无穷时的情况。</p><h3 id="算法的时间复杂度"><a href="#算法的时间复杂度" class="headerlink" title="算法的时间复杂度"></a>算法的时间复杂度</h3><p>度量一个程序（算法）执行时间的两种方式<br>[1]事后统计的方法<br>&emsp;&emsp;这种方法可行，但是有两个问题：一是要想对设计的算法的运行性能进行测评，需要实际运行该程序；二是所得时间的统计量依赖于计算机的硬件、软件环境因素，这种方式，要在同一台计算机的相同状态下运行，才能比较那个算法速度更快。<br>[2]事前估计的方法<br>通过分析某个算法的时间复杂度来判断算法更优。</p><h3 id="时间频度"><a href="#时间频度" class="headerlink" title="时间频度"></a>时间频度</h3><p>&emsp;&emsp;一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，他花费时间就多。一个算法中的语句执行次数称为语句频度或时间频度。记为T(n)。<br><img src="https://img-blog.csdnimg.cn/20191206141504513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="时间频度的一些规则"><a href="#时间频度的一些规则" class="headerlink" title="时间频度的一些规则"></a>时间频度的一些规则</h3><p>[1]可以忽略常数项，例如2n+10和2n随着n变大，执行曲线无限接近，可以忽略常数。<br>[2]可以忽略低次项，例如2n^2^+3n+10和2n^2^随着n变大，执行曲线无限接近，可以忽略3n+10。<br>[3]可以忽略系数，例如5n^2^+7n和3n^2^+2n，执行曲线随着n变大重合，说明这种情况下，5和3可以忽略。</p><h3 id="时间复杂度计算"><a href="#时间复杂度计算" class="headerlink" title="时间复杂度计算"></a>时间复杂度计算</h3><p>[1]一般情况下，算法中的基本操作语句的重复执行次数是问题规模n的某个函数，用T(n)表示，若有某个赋值函数f(n)，是的当n趋近于无穷大时，T(n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=O(f(n))，称O(f(n))为算法的渐进时间复杂度，简称时间复杂度。<br>[2]T(n)不同，但时间复杂度可能相同。如：T(n)=n^2^+7n+6与T(n)=3n^2^+2n+2它们的T(n)不同，但时间复杂度相同，都为O(n^2^)。<br>[3]计算时间复杂度的方法：<br>用常数1代替运行时间中的所有加法常数。T(n)=3n^2^+7n+6 =&gt; T(n)=3n^2^+7n+1<br>修改后的运行次数函数中，只保留最高阶项。T(n)=3n^2^+7n+1 =&gt; T(n)=3n^2^<br>去除最高阶项的系数。T(n)=3n^2^ =&gt; T(n)=n^2^ =&gt; O(n^2^)</p><h3 id="常见的时间复杂度"><a href="#常见的时间复杂度" class="headerlink" title="常见的时间复杂度"></a>常见的时间复杂度</h3><p>[1]常数阶 O(1)<br>[2]对数阶 O(log<del>2</del>n)<br>[3]线性阶 O(n)<br>[4]线性对数阶 O(nlog<del>2</del>n)<br>[5]平方阶 O(n^2^)<br>[6]立方阶 O(n^3^)<br>[7]k次方阶 O(n^k^)<br>[8]指数阶 O(2^n^)<br><img src="https://img-blog.csdnimg.cn/20191206151339974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>说明：<br>&emsp;&emsp;常见的算法时间复杂度由小到大依次为:O(1)&lt;O(log<del>2</del>n)&lt;O(n)&lt;O(nlog<del>2</del>n)&lt;O(n^2^)&lt;O(n^3^)&lt;O(n^k^)&lt;O(2^n^)，随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低。<br>&emsp;&emsp;从图中可见，我们应该尽可能避免指数阶的算法。</p><h3 id="常见时间复杂度举例说明"><a href="#常见时间复杂度举例说明" class="headerlink" title="常见时间复杂度举例说明"></a>常见时间复杂度举例说明</h3><ul><li>常数阶O(1)<br>无论执行了多少行代码，只要是没有循环等复杂结构，这个代码的时间复杂度都是O(1)。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">2</span>;</span><br><span class="line">++i;</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">int</span> m = i+j;</span><br></pre></td></tr></table></figure></li></ul><p>上述代码在执行的时候，她消耗的时候并不随着某个变量的增长而增长，那么无论这类代码有多长，即使有几万几十万行，都可以用O(1)来表示它的时间复杂度。</p><ul><li>对数阶O(log<del>2</del>n)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">i = i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>说明：在while循环里面，每次都将i乘以2，乘完之后，i距离n就越来越近了。假设循环x之后，i就大于n了，此时这个循环就退出了，也就是说2的x次方等于2，那么x = log<del>2</del>n也就是说当循环log<del>2</del>n次后，这个代码就结束了。因此这个代码的时间复杂度为：O(log<del>2</del>n)。O(log<del>2</del>n)的这个2实际上是根据代码变化的，i = i * 3，则是O(log<del>3</del>n)。</p><ul><li>线性阶O(n)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">j = i;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>说明：这段代码，for循环里面的代码会执行n遍，因此它消耗的时间是随着n的变化而变化的，因此这类代码都可以用O(n)来表示它的时间复杂度。</p><ul><li>线性对数阶O(nlog<del>2</del>n)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(m&lt;n)&#123;</span><br><span class="line">m = m*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>说明：线性对数阶O(nlog<del>2</del>n)其实非常容易理解，将时间复杂度为O(log<del>2</del>n)的代码循环N遍的话，那么它的时间复杂度就是n*O(log<del>2</del>n)，也就是O(nlog<del>2</del>n)。</p><ul><li>平方阶O(n^2^)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">1</span>;x&lt;=n;x++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">j = <span class="number">1</span>;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>说明：平方阶O(n^2^)就更容易理解了，如果把O(n)的代码再嵌套循环一遍，它的时间复杂度就是O(n^2^)，这段代码其实就是嵌套了2层n循环，它的时间复杂度就是O(n<em>n)，即O(n^2^)如果将其中一层循环的n改成m，那么它的时间复杂度就变成了O(m</em>n)。</p><ul><li>立方阶 O(n^3^)、k次方阶 O(n^k^)<br>这个可以参考上面的平方阶O(n^2^)去理解，O(n^3^)相当于三层n循环，其它类似。</li></ul><h3 id="平均时间复杂度和最坏时间复杂度"><a href="#平均时间复杂度和最坏时间复杂度" class="headerlink" title="平均时间复杂度和最坏时间复杂度"></a>平均时间复杂度和最坏时间复杂度</h3><p>[1]平均时间复杂度是指所有可能的输入实例均以等概率出现的情况下，该算法的运行时间。<br>[2]最坏情况下的时间复杂度称最坏时间复杂度。一般讨论的时间复杂度均是最坏情况下的时间复杂度。这样做的原因是：最坏情况下的时间复杂度是算法再任何输入实例上运行时间的界限，这就保证了算法的运行时间不会比最坏情况更长。<br>[3]平均时间复杂度和最坏时间复杂度是否一致，和算法有关（如下图）。<br><img src="https://img-blog.csdnimg.cn/20191206155131615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="算法的空间时间复杂度"><a href="#算法的空间时间复杂度" class="headerlink" title="算法的空间时间复杂度"></a>算法的空间时间复杂度</h3><p>[1]类似于时间复杂度的讨论，一个算法的空间复杂度（Space Complexity）定义为该算法所耗费的存储空间，它也是我问题规模n的函数。<br>[2]空间复杂度（Space Complexity）是对一个算法在运行过程中临时占用存储空间大小的量度。有的算法需要占用的临时工作单元数于解决问题的规模n有关，它随着n的增大而增大，当n较大时，将占用较多的存储单元，例如快速排序和归并排序算法就属于这种情况。<br>[3]在做算法分析时，主要讨论的是时间复杂度。从用户使用体验上看，更看重的是程序执行的速度。一些缓存产品（redis，memcache）和算法（基数排序）本质就是用空间换时间。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;在计算机科学中，时间复杂性，又称时间复杂度，算法的时间复杂度是一个函数，它定性描述该算法的运行时间。这是一个代表算法输入值的字符串的长度的函数。时间复杂度常用大O符号表述，不包括这个函数的低阶项和首项系数。使用这种方式时，时间复杂度可被称为是渐近的，
      
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://Xiezhenyu98.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://Xiezhenyu98.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://Xiezhenyu98.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法-递归</title>
    <link href="https://Xiezhenyu98.github.io/2019/11/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E9%80%92%E5%BD%92/"/>
    <id>https://Xiezhenyu98.github.io/2019/11/29/数据结构和算法-递归/</id>
    <published>2019-11-29T07:49:27.294Z</published>
    <updated>2019-11-29T07:50:56.162Z</updated>
    
    <content type="html"><![CDATA[<p>递归的概念：<br>&emsp;&emsp;简单的说，递归就是方法自己调用自己，每次调用时传入不同的变量，递归有助于编程者解决复杂的问题，同时可以让代码变得简洁。</p><h3 id="递归的调用机制"><a href="#递归的调用机制" class="headerlink" title="递归的调用机制"></a>递归的调用机制</h3><p>递归调用的规则<br>[1]当程序执行到一个方法时，就会开辟一个独立的空间（栈）。<br>[2]每个空间的数据(局部变量)，是独立的。<br>用一个案例，理解递归机制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecursionTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">test(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;<span class="number">2</span>)&#123;</span><br><span class="line">test(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"n="</span>+n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个程序的过程分析<br><img src="https://img-blog.csdnimg.cn/20191127202240456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其在控制台的输出为则为<br>n=2<br>n=3</p><h3 id="递归能解决什么样的问题"><a href="#递归能解决什么样的问题" class="headerlink" title="递归能解决什么样的问题"></a>递归能解决什么样的问题</h3><p>[1]各种数学问题：8皇后问题，汉诺塔，阶乘问题，迷宫问题，球和篮子的问题。<br>[2]各种算法中也会使用到递归，比如快速排序，归并排序，二分查找，分治算法等。<br>[3]将用栈解决的问题–&gt;递归代码比较简洁。</p><h3 id="递归需要遵守的重要规则"><a href="#递归需要遵守的重要规则" class="headerlink" title="递归需要遵守的重要规则"></a>递归需要遵守的重要规则</h3><p>[1]执行一个方法时，就创建一个新的受保护的独立空间（栈空间）。<br>[2]方法的局部变量是独立的，不会相互影响。<br>[3]但是如果方法中使用的是引用类型的变量(比如说是数组)，就会共享该引用类型的数据。<br>[4]递归必须向退出的条件逼近，否则就是无限递归，会出现StackOverflowError(栈溢出)异常。<br>[5]当一个方法执行完毕，或者遇到return，就会返回，遵守谁调用，就将结果返回给谁，同时当方法执行完毕或者返回时，该方法也就执行完毕。</p><h3 id="递归-迷宫问题"><a href="#递归-迷宫问题" class="headerlink" title="递归-迷宫问题"></a>递归-迷宫问题</h3><p>说明：<br>[1]小球得到的路径，和程序员设置的找路策略有关即：找路的上下左右顺序相关。<br>[2]再得到小球路径时，可以先使用(下右上左)，再改成(上右下左)，看看路径是不是有变<br>[3]测试回溯现象。<br>[4]思考：如何得到最短路径？(把所有的策略走的路径算出来，比较最短路径)<br><img src="https://img-blog.csdnimg.cn/20191129135020214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>代码实现上面的走迷宫问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiGong</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//先创建一个二位数组，模拟迷宫</span></span><br><span class="line"><span class="comment">//地图</span></span><br><span class="line"><span class="keyword">int</span>[][] map = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>][<span class="number">7</span>];</span><br><span class="line"><span class="comment">//使用1表示墙</span></span><br><span class="line"><span class="comment">//上下全部置为1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">7</span>;i++)&#123;</span><br><span class="line">map[<span class="number">0</span>][i]=<span class="number">1</span>;map[<span class="number">7</span>][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左右全部置为1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">map[i][<span class="number">0</span>]=<span class="number">1</span>;map[i][<span class="number">6</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置挡板</span></span><br><span class="line">map[<span class="number">3</span>][<span class="number">1</span>]=<span class="number">1</span>;map[<span class="number">3</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//输出地图</span></span><br><span class="line">System.out.println(<span class="string">"地图情况"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">7</span>;j++)&#123;</span><br><span class="line">System.out.print(map[i][j]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用递归回溯给小球找路</span></span><br><span class="line">setWay(map, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">//输出新的地图，小球走过，并标识过的地图</span></span><br><span class="line">System.out.println(<span class="string">"小球走过并标识的地图"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">7</span>;j++)&#123;</span><br><span class="line">System.out.print(map[i][j]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用递归回溯来给小球找路</span></span><br><span class="line"><span class="comment">//说明</span></span><br><span class="line"><span class="comment">//1、map表示地图</span></span><br><span class="line"><span class="comment">//2、i，j表示从地图哪个为止开始出发（1，1）</span></span><br><span class="line"><span class="comment">//3、如果小球能到达map[6][5]位置，则说明通路找到</span></span><br><span class="line"><span class="comment">//4、约定：当map[i][j]为0表示该点没有走过，当为1表示墙，2表示通路可以走，3表示该为止已经走过，但是走不通</span></span><br><span class="line"><span class="comment">//5、在走迷宫时，必须先确定一个策略（方法）：下-&gt;右-&gt;上-&gt;左，如果该点走不通，再回溯</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map 表示地图</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i 从那个位置开始找</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> j 从那个位置开始找</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果找到通路，则返回true，否则返回false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">setWay</span><span class="params">(<span class="keyword">int</span>[][] map,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(map[<span class="number">6</span>][<span class="number">5</span>] == <span class="number">2</span>)&#123;<span class="comment">//通路已经找到</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(map[i][j] == <span class="number">0</span>)&#123;<span class="comment">//如果当前这个点没有走过</span></span><br><span class="line"><span class="comment">//按照策略 下-&gt;右-&gt;上-&gt;左 走</span></span><br><span class="line">map[i][j] = <span class="number">2</span>;<span class="comment">//假定该点是能走通的</span></span><br><span class="line"><span class="keyword">if</span>(setWay(map, i+<span class="number">1</span>, j))&#123;<span class="comment">//向下走</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(setWay(map, i, j+<span class="number">1</span>))&#123;<span class="comment">//向右走</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(setWay(map, i-<span class="number">1</span>, j))&#123;<span class="comment">//向上走</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(setWay(map, i, j-<span class="number">1</span>))&#123;<span class="comment">//向左走</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">map[i][j] = <span class="number">3</span>;<span class="comment">//该点走过了，根本走不通</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//如果map[i][j]!=0，可能是1 ，2，3</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归-八皇后问题（回溯算法）"><a href="#递归-八皇后问题（回溯算法）" class="headerlink" title="递归-八皇后问题（回溯算法）"></a>递归-八皇后问题（回溯算法）</h3><p><img src="https://img-blog.csdnimg.cn/201911291513085.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>八皇后问题：<br>&emsp;&emsp;八皇后问题，是一个古老而著名的问题，是回溯算法的典型案例。该问题是国际西洋棋棋手马克斯·贝瑟尔于1848年提出：在8*8格的国际象棋上摆放八个皇后，使其不能互相攻击，即：任意两个皇后都不能处于同一行，同一列或同一斜线上，问有多少种摆法。<br>八皇后问题算法思路分析：<br>[1]第一个皇后先放在第一行第一列<br>[2]第二个皇后放在第二行第一列、然后判断是否ok，如果不ok，继续放在第二列，第三列，依次把所有列都放完，找到一个合适的。<br>[3]继续第三个皇后，还是第一列，第二列…直到第八个皇后也能放在一个不冲突的位置，算是找到了一个正确解释。<br>[4]当得到一个正确解时，在栈回退到上一个栈时，就会开始回溯，即将第一个皇后，放到第一列的所有正确解，全部得到。<br>[5]然后回头继续第一个皇后放在第二列，后面继续循环执行1，2，3的步骤。<br>说明：理论上应该创建一个二维数组来表示棋盘，但实际上可以通过算法，用一个一维数组即可解决问题。arr[8]={0,4,7,5,2,6,1,3}//对应arr下标表示第几行，即第几个皇后，arr[i]=val 表示第i+1个皇后，方法第i+1行的val+1列。<br>八皇后的代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Queue8</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义一个max表示共有多少个皇后</span></span><br><span class="line"><span class="keyword">int</span> max = <span class="number">8</span>;</span><br><span class="line"><span class="comment">//定义一个数组array，保存皇后放置位置的结果，比如array = &#123;0,4,7,5,2,6,1,3&#125;</span></span><br><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[max];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Queue8 queue8 = <span class="keyword">new</span> Queue8();</span><br><span class="line">queue8.check(<span class="number">0</span>);</span><br><span class="line">System.out.println(<span class="string">"一共有"</span>+count+<span class="string">"种解法。"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编写一个方法，放置第n个皇后</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n == max)&#123;<span class="comment">//n=8,其实八个皇后就已然放好了</span></span><br><span class="line">print();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//依次放入皇后，并判断是否冲突</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;max;i++)&#123;</span><br><span class="line"><span class="comment">//先把当前这个皇后n，放到该行的第1列</span></span><br><span class="line">array[n] = i;</span><br><span class="line"><span class="comment">//判断当放置第n个皇后的第i列时，是否冲突</span></span><br><span class="line"><span class="keyword">if</span>(judge(n))&#123;<span class="comment">//不冲突</span></span><br><span class="line"><span class="comment">//接着放第n+1个皇后，即开始递归</span></span><br><span class="line">check(n+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果冲突，没有关系，就继续执行array[n] = i;即将第n个皇后放置在本行的后移的一个位置</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查看当我们放置第n个皇后时，就去检查该皇后是否和前面已经摆放的皇后冲突</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="comment">//说明：</span></span><br><span class="line"><span class="comment">//1、array[i]==array[n] 表示判断第n个皇后是否和前面的n-1个皇后在同一列</span></span><br><span class="line"><span class="comment">//2、Math.abs(n-i)==Math.abs(array[n]-array[i]) 表示判断第n个皇后和第i个皇后是否在同一斜线</span></span><br><span class="line"><span class="comment">//3、判断是否在同一行，没有必要判断，因为n每次在递增</span></span><br><span class="line"><span class="keyword">if</span>(array[i]==array[n] || Math.abs(n-i)==Math.abs(array[n]-array[i]))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写一个方法，可以将皇后摆放的位置输出</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">00</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">System.out.print(array[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">0 4 7 5 2 6 1 3 </span><br><span class="line">0 5 7 2 6 3 1 4 </span><br><span class="line">0 6 3 5 7 1 4 2 </span><br><span class="line">0 6 4 7 1 3 5 2 </span><br><span class="line">1 3 5 7 2 0 6 4 </span><br><span class="line">1 4 6 0 2 7 5 3 </span><br><span class="line">1 4 6 3 0 7 5 2 </span><br><span class="line">1 5 0 6 3 7 2 4 </span><br><span class="line">1 5 7 2 0 3 6 4 </span><br><span class="line">1 6 2 5 7 4 0 3 </span><br><span class="line">1 6 4 7 0 3 5 2 </span><br><span class="line">1 7 5 0 2 4 6 3 </span><br><span class="line">2 0 6 4 7 1 3 5 </span><br><span class="line">2 4 1 7 0 6 3 5 </span><br><span class="line">2 4 1 7 5 3 6 0 </span><br><span class="line">2 4 6 0 3 1 7 5 </span><br><span class="line">2 4 7 3 0 6 1 5 </span><br><span class="line">2 5 1 4 7 0 6 3 </span><br><span class="line">2 5 1 6 0 3 7 4 </span><br><span class="line">2 5 1 6 4 0 7 3 </span><br><span class="line">2 5 3 0 7 4 6 1 </span><br><span class="line">2 5 3 1 7 4 6 0 </span><br><span class="line">2 5 7 0 3 6 4 1 </span><br><span class="line">2 5 7 0 4 6 1 3 </span><br><span class="line">2 5 7 1 3 0 6 4 </span><br><span class="line">2 6 1 7 4 0 3 5 </span><br><span class="line">2 6 1 7 5 3 0 4 </span><br><span class="line">2 7 3 6 0 5 1 4 </span><br><span class="line">3 0 4 7 1 6 2 5 </span><br><span class="line">3 0 4 7 5 2 6 1 </span><br><span class="line">3 1 4 7 5 0 2 6 </span><br><span class="line">3 1 6 2 5 7 0 4 </span><br><span class="line">3 1 6 2 5 7 4 0 </span><br><span class="line">3 1 6 4 0 7 5 2 </span><br><span class="line">3 1 7 4 6 0 2 5 </span><br><span class="line">3 1 7 5 0 2 4 6 </span><br><span class="line">3 5 0 4 1 7 2 6 </span><br><span class="line">3 5 7 1 6 0 2 4 </span><br><span class="line">3 5 7 2 0 6 4 1 </span><br><span class="line">3 6 0 7 4 1 5 2 </span><br><span class="line">3 6 2 7 1 4 0 5 </span><br><span class="line">3 6 4 1 5 0 2 7 </span><br><span class="line">3 6 4 2 0 5 7 1 </span><br><span class="line">3 7 0 2 5 1 6 4 </span><br><span class="line">3 7 0 4 6 1 5 2 </span><br><span class="line">3 7 4 2 0 6 1 5 </span><br><span class="line">4 0 3 5 7 1 6 2 </span><br><span class="line">4 0 7 3 1 6 2 5 </span><br><span class="line">4 0 7 5 2 6 1 3 </span><br><span class="line">4 1 3 5 7 2 0 6 </span><br><span class="line">4 1 3 6 2 7 5 0 </span><br><span class="line">4 1 5 0 6 3 7 2 </span><br><span class="line">4 1 7 0 3 6 2 5 </span><br><span class="line">4 2 0 5 7 1 3 6 </span><br><span class="line">4 2 0 6 1 7 5 3 </span><br><span class="line">4 2 7 3 6 0 5 1 </span><br><span class="line">4 6 0 2 7 5 3 1 </span><br><span class="line">4 6 0 3 1 7 5 2 </span><br><span class="line">4 6 1 3 7 0 2 5 </span><br><span class="line">4 6 1 5 2 0 3 7 </span><br><span class="line">4 6 1 5 2 0 7 3 </span><br><span class="line">4 6 3 0 2 7 5 1 </span><br><span class="line">4 7 3 0 2 5 1 6 </span><br><span class="line">4 7 3 0 6 1 5 2 </span><br><span class="line">5 0 4 1 7 2 6 3 </span><br><span class="line">5 1 6 0 2 4 7 3 </span><br><span class="line">5 1 6 0 3 7 4 2 </span><br><span class="line">5 2 0 6 4 7 1 3 </span><br><span class="line">5 2 0 7 3 1 6 4 </span><br><span class="line">5 2 0 7 4 1 3 6 </span><br><span class="line">5 2 4 6 0 3 1 7 </span><br><span class="line">5 2 4 7 0 3 1 6 </span><br><span class="line">5 2 6 1 3 7 0 4 </span><br><span class="line">5 2 6 1 7 4 0 3 </span><br><span class="line">5 2 6 3 0 7 1 4 </span><br><span class="line">5 3 0 4 7 1 6 2 </span><br><span class="line">5 3 1 7 4 6 0 2 </span><br><span class="line">5 3 6 0 2 4 1 7 </span><br><span class="line">5 3 6 0 7 1 4 2 </span><br><span class="line">5 7 1 3 0 6 4 2 </span><br><span class="line">6 0 2 7 5 3 1 4 </span><br><span class="line">6 1 3 0 7 4 2 5 </span><br><span class="line">6 1 5 2 0 3 7 4 </span><br><span class="line">6 2 0 5 7 4 1 3 </span><br><span class="line">6 2 7 1 4 0 5 3 </span><br><span class="line">6 3 1 4 7 0 2 5 </span><br><span class="line">6 3 1 7 5 0 2 4 </span><br><span class="line">6 4 2 0 5 7 1 3 </span><br><span class="line">7 1 3 0 6 4 2 5 </span><br><span class="line">7 1 4 2 0 6 3 5 </span><br><span class="line">7 2 0 5 1 4 6 3 </span><br><span class="line">7 3 0 2 5 1 6 4 </span><br><span class="line">一共有92种解法。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;递归的概念：&lt;br&gt;&amp;emsp;&amp;emsp;简单的说，递归就是方法自己调用自己，每次调用时传入不同的变量，递归有助于编程者解决复杂的问题，同时可以让代码变得简洁。&lt;/p&gt;
&lt;h3 id=&quot;递归的调用机制&quot;&gt;&lt;a href=&quot;#递归的调用机制&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://Xiezhenyu98.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://Xiezhenyu98.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://Xiezhenyu98.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法-栈（[逆]波兰表达式）</title>
    <link href="https://Xiezhenyu98.github.io/2019/11/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E6%A0%88%EF%BC%88%5B%E9%80%86%5D%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%89/"/>
    <id>https://Xiezhenyu98.github.io/2019/11/24/数据结构和算法-栈（[逆]波兰表达式）/</id>
    <published>2019-11-24T11:08:45.539Z</published>
    <updated>2019-11-24T11:09:46.363Z</updated>
    
    <content type="html"><![CDATA[<p>什么是栈？<br>[1]栈的英文名为Stack<br>[2]栈是一个先入后出（FILO-Firest In Last Out）的有序列表<br>[3]栈(stack)是限制线性表中元素的插入和删除只能在线性表的同一端进行的一种特殊线性表。允许插入和删除的一端，为变化的一端，称为栈顶，另一端为固定的一端，称为栈底。<br>[4]根据栈的定义可知，最先放入栈的元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除，最先放入的元素最后删除。</p><h3 id="出栈和入栈"><a href="#出栈和入栈" class="headerlink" title="出栈和入栈"></a>出栈和入栈</h3><p>入栈（push）：<br><img src="https://img-blog.csdnimg.cn/20191124133134264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>出栈（pop）：<br><img src="https://img-blog.csdnimg.cn/20191124134225820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="栈的应用场景"><a href="#栈的应用场景" class="headerlink" title="栈的应用场景"></a>栈的应用场景</h3><p>[1]子程序的调用：在跳往子程序前，会先将一下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以回到原来的程序中。<br>[2]处理递归调用：和子程序的调用类似，只是除了存储下一个指令的地址外，也将参数、区域变量等数据存入堆栈中。<br>[3]表达式的转换与求值（实际解决）。<br>[4]二叉树的遍历。<br>[5]图形的深度优先（depth-first）搜索算法。</p><h3 id="栈的快速入门"><a href="#栈的快速入门" class="headerlink" title="栈的快速入门"></a>栈的快速入门</h3><p>用数组模拟栈的使用，由于栈是一种有序列表，当然可以使用数组的结构来存储栈的数据内容。<br>思路分析：<br>[1]使用数组模拟栈<br>[2]定义一个top表示栈顶，初始值为-1<br>[3]入栈的操作，当有数据加入到栈时，top++；stack[top]=data；<br>[4]出栈的操作，int value=stack[top];top–,return value;<br>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个类表示栈结构</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayStack</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize;<span class="comment">//栈的大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] stack;<span class="comment">//数组，模拟栈，数据就放在该数组中</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> top = -<span class="number">1</span>;<span class="comment">//栈顶，初始化为-1</span></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">(<span class="keyword">int</span> maxSize)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">stack = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>.maxSize];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//栈满</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> top == maxSize-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//栈空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> top == -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="comment">//先判断栈是否满</span></span><br><span class="line"><span class="keyword">if</span>(isFull())&#123;</span><br><span class="line">System.out.println(<span class="string">"栈满"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">top++;</span><br><span class="line">stack[top] = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出栈,将栈顶的数组返回</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//先判断栈是否空</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line"><span class="comment">//抛出异常</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"栈空，没有数据~"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> value = stack[top];</span><br><span class="line">top--;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示栈的情况(遍历栈),遍历时，需要从栈顶开始显示数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">System.out.println(<span class="string">"栈空~"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = top;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">System.out.printf(<span class="string">"stack[%d]=%d\n"</span>,i,stack[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈实现综合计算器（中缀表达式）"><a href="#栈实现综合计算器（中缀表达式）" class="headerlink" title="栈实现综合计算器（中缀表达式）"></a>栈实现综合计算器（中缀表达式）</h3><ul><li>中缀表达式：<br>[1]中缀表达式就是常见的运算表达式：如(3+4)X5-6<br>[2]中缀表达式的求值是我们人最熟悉的，但是对于计算机来说却不好操作，因此在计算结果时，往往会将中缀表达式转换成其它表达式来操作</li><li>是用栈完成表达式的计算思路：<br>[1]通过一个index值（索引），来遍历我们的表达式<br>[2]创建两个栈，一个存放数值的栈，一个存放符号的栈<br>[3]如果发现是一个数字，就直接放入数栈<br>[4]如果发现的是一个符号，就分如下情况<br>（1）如果发现当前的符号栈为空，就直接入栈<br>（2）如果符号栈有操作符，就进行比较，如果当前的操作符的有限级小于或者等于栈中的操作符，就需要从数栈栈pop出两个数，在从符号栈中pop出一个符号，进行运算，将得到的结果，入数栈，然后将当前的操作符入符号栈<br>（3）如果当前的操作符的优先级大于栈中的操作符，就直接入符号栈<br>[5]当表达式扫描完毕，就顺序的从数栈和符号栈中pop出相应的数和符号并运行。<br>[6]最后在数栈中只有一个数字，就是表达式的结果。</li><li>代码：<br>栈结构：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayStack2</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize;<span class="comment">//栈的大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] stack;<span class="comment">//数组，模拟栈，数据就放在该数组中</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> top = -<span class="number">1</span>;<span class="comment">//栈顶，初始化为-1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayStack2</span><span class="params">(<span class="keyword">int</span> maxSize)</span></span>&#123;<span class="comment">//构造器</span></span><br><span class="line"><span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">stack = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>.maxSize];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查看栈顶的值，不是真正的出栈</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> stack[top];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;<span class="comment">//栈满</span></span><br><span class="line"><span class="keyword">return</span> top == maxSize-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;<span class="comment">//栈空</span></span><br><span class="line"><span class="keyword">return</span> top == -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;<span class="comment">//入栈</span></span><br><span class="line"><span class="comment">//先判断栈是否满</span></span><br><span class="line"><span class="keyword">if</span>(isFull())&#123;</span><br><span class="line">System.out.println(<span class="string">"栈满"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">top++;</span><br><span class="line">stack[top] = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;<span class="comment">//出栈,将栈顶的数组返回</span></span><br><span class="line"><span class="comment">//先判断栈是否空</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line"><span class="comment">//抛出异常</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"栈空，没有数据~"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> value = stack[top];</span><br><span class="line">top--;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>&#123;<span class="comment">//显示栈的情况(遍历栈),遍历时，需要从栈顶开始显示数据</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">System.out.println(<span class="string">"栈空~"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = top;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">System.out.printf(<span class="string">"stack[%d]=%d\n"</span>,i,stack[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回运算符的优先级，优先级使用数字表示，数字越大优先级越高</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">priority</span><span class="params">(<span class="keyword">int</span> oper)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(oper == <span class="string">'*'</span> || oper == <span class="string">'/'</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(oper == <span class="string">'+'</span> || oper == <span class="string">'-'</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//表达式只有+-*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是不是一个运算符</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOper</span><span class="params">(<span class="keyword">char</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> val == <span class="string">'+'</span> || val == <span class="string">'-'</span> || val == <span class="string">'*'</span> || val == <span class="string">'/'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2,<span class="keyword">int</span> oper)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;<span class="comment">//res用于存放计算结果</span></span><br><span class="line"><span class="keyword">switch</span> (oper) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">res = num1 + num2;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">res = num2 - num1;<span class="comment">//注意顺序</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">res = num1 * num2;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">res = num2 / num1;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//表达式</span></span><br><span class="line">String expression = <span class="string">"3+2*6-2"</span>;</span><br><span class="line"><span class="comment">//创建两个栈，一个是数栈，一个是符号栈</span></span><br><span class="line">ArrayStack2 numStack = <span class="keyword">new</span> ArrayStack2(<span class="number">10</span>);</span><br><span class="line">ArrayStack2 operStack = <span class="keyword">new</span> ArrayStack2(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//定义相关变量</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;<span class="comment">//用于扫描</span></span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> num2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> oper = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">String keepNum=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">char</span> ch = <span class="string">' '</span>;<span class="comment">//将每次扫描得到的结果保存到ch中</span></span><br><span class="line"><span class="comment">//开始while循环扫描</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//依次得到expression的每一个字符</span></span><br><span class="line">ch = expression.substring(index, index+<span class="number">1</span>).charAt(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//判断ch是什么，然后做相应的处理</span></span><br><span class="line"><span class="keyword">if</span>(operStack.isOper(ch))&#123;<span class="comment">//如果是运算符</span></span><br><span class="line"><span class="comment">//判断当前的符号栈是否为空</span></span><br><span class="line"><span class="keyword">if</span>(!operStack.isEmpty())&#123;</span><br><span class="line"><span class="comment">//如果符号栈有操作符，就进行比较，如果当前的操作符的有限级小于或者等于栈中的操作符</span></span><br><span class="line"><span class="comment">//就需要从数栈栈pop出两个数，在从符号栈中pop出一个符号，进行运算</span></span><br><span class="line"><span class="comment">//将得到的结果，入数栈，然后将当前的操作符入符号栈</span></span><br><span class="line"><span class="keyword">if</span>(operStack.priority(ch) &lt;= operStack.priority(operStack.peek()))&#123;</span><br><span class="line">num1 = numStack.pop();</span><br><span class="line">num2 = numStack.pop();</span><br><span class="line">oper = operStack.pop();</span><br><span class="line">res = numStack.cal(num1, num2, oper);</span><br><span class="line"><span class="comment">//把运算的结果入数栈</span></span><br><span class="line">numStack.push(res);</span><br><span class="line"><span class="comment">//然后把当前的操作符入符号栈</span></span><br><span class="line">operStack.push(ch);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//如果当前的操作符的优先级大于栈中的操作符，就直接入符号栈</span></span><br><span class="line">operStack.push(ch);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//如果为空，直接入栈</span></span><br><span class="line">operStack.push(ch);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//如果是数，则直接入数栈</span></span><br><span class="line"><span class="comment">//当处理多为数时，不能发现一个数就直接就入栈，因为可能是多位数】</span></span><br><span class="line"><span class="comment">//在处理数时，需要向expression的表达式的index后再看一位，如果是数就进行扫描，如果是符号就入栈</span></span><br><span class="line"><span class="comment">//因此需要定义一个变量 字符串，用于拼接</span></span><br><span class="line">keepNum += ch;</span><br><span class="line"><span class="comment">//如果ch已经是expression的最后一位，就直接入栈</span></span><br><span class="line"><span class="keyword">if</span>(index == expression.length() - <span class="number">1</span>)&#123;</span><br><span class="line">numStack.push(Integer.parseInt(keepNum));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//判断字符串是不是数字，如果是数字就继续扫描，如果是运算符就入栈</span></span><br><span class="line"><span class="keyword">if</span>(operStack.isOper(expression.substring(index+<span class="number">1</span>,index+<span class="number">2</span>).charAt(<span class="number">0</span>)))&#123;</span><br><span class="line"><span class="comment">//如果后以为是运算符，则入栈</span></span><br><span class="line">numStack.push(Integer.parseInt(keepNum));</span><br><span class="line"><span class="comment">//这里keepNum要置空</span></span><br><span class="line">keepNum=<span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//让index + 1，并判断是否扫描到expression</span></span><br><span class="line">index++;</span><br><span class="line"><span class="keyword">if</span>(index &gt;= expression.length())&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当表达式扫描完毕，就顺序的从数栈和符号栈中pop出相应的数和符号并运行。</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//如果符号栈为空，则计算到最后的结果，数栈只有一个数字，这个就是结果</span></span><br><span class="line"><span class="keyword">if</span>(operStack.isEmpty())<span class="keyword">break</span>;</span><br><span class="line">num1 = numStack.pop();</span><br><span class="line">num2 = numStack.pop();</span><br><span class="line">oper = operStack.pop();</span><br><span class="line">res = numStack.cal(num1, num2, oper);</span><br><span class="line">numStack.push(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将数栈最后的结果pop出来</span></span><br><span class="line">System.out.printf(<span class="string">"表达式%s = %d"</span>,expression,numStack.pop());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表达式3+2*6-2 = 13</span><br></pre></td></tr></table></figure><h3 id="前缀表达式（波兰表达式）"><a href="#前缀表达式（波兰表达式）" class="headerlink" title="前缀表达式（波兰表达式）"></a>前缀表达式（波兰表达式）</h3><ul><li>前缀表达式的计算机求值：<br>&emsp;&emsp;从右向左扫描表达式，遇到数字时，将数字压入栈中，遇到运算符时，弹出栈顶的两个数，用运算符对他们做相应的计算（栈顶元素和次顶元素），并将结果入栈；重复上述过程知道表达式最左端，最后运算得出的值即为表达式的结果。</li><li>例如：(3+4)X5-6对应的前缀表达式就是- X + 3 4 5 6 ,针对前缀表达式求值步骤如下：<br>[1]从右至左扫描，将6、5、4压入堆栈。<br>[2]遇到+运算符，因此弹出3和4（3为栈顶元素，4为次顶元素），计算3+4的值，得7，再将7入栈。<br>[3]接下来是X运算符，因此弹出7和5，计算出7X5=35，将35入栈。<br>[4]最后是-运算符，计算出35-6的值，即29.由此得出最终结果。<h3 id="后缀表达式（逆波兰表达式）"><a href="#后缀表达式（逆波兰表达式）" class="headerlink" title="后缀表达式（逆波兰表达式）"></a>后缀表达式（逆波兰表达式）</h3></li><li>后缀表达式<br>[1]后缀表达式又称逆波兰表达式，与前缀表达式相似，只是运算符位于操作数之后<br>[2]举例说明：(3+4)X5-6对应的后缀表达式就是3 4 + 5 X 6 -<br>[3]再比如<br>a+b 对应的后缀表达式为  a b +<br>a+(b-c) 对应的后缀表达式为  a b c - +<br>a+(b-c)<em>d 对应的后缀表达式为 a b c - d * +<br>a+d</em>(b-c) 对应的后缀表达式为 a d b c - * +<br>a=1+3 对应的后缀表达式为 a 1 3 + =</li><li>后缀表达式的计算机求值<br>从左向右扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（次顶元素和栈顶元素），并将结果入栈；重复上述过程知道表达式最右端，最后运算符得出的值即为表达式的结果。</li><li>例如：(3+4)X5-6对应的后缀表达式就是3 4 + 5 X 6 -，针对后缀表达式求值步骤如下：<br>[1]从左向右扫描，将3和4压入堆栈；<br>[2]遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈；<br>[3]将5入栈；<br>[4]接下来是X运算符，因此弹出5和7，计算7X5=35，将35入栈;<br>[5]将6入栈；<br>[6]最后是-运算符，计算出35-6的值，即29，由此得出最终结果。<h3 id="逆波兰计算器代码实现"><a href="#逆波兰计算器代码实现" class="headerlink" title="逆波兰计算器代码实现"></a>逆波兰计算器代码实现</h3></li><li>逆波兰计算器，完成任务如下：<br>[1]输入一个逆波兰表达式(后缀表达式)，使用栈（Stack），计算其结果<br>[2]支持小括号和多位数整数</li><li>思路：<br>(3+4)X5-6对应的后缀表达式就是3 4 + 5 X 6 -，针对后缀表达式求值步骤如下：<br>[1]从左向右扫描，将3和4压入堆栈；<br>[2]遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈；<br>[3]将5入栈；<br>[4]接下来是X运算符，因此弹出5和7，计算7X5=35，将35入栈;<br>[5]将6入栈；<br>[6]最后是-运算符，计算出35-6的值，即29，由此得出最终结果。</li><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PolandNotation</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义一个逆波兰表达式</span></span><br><span class="line"><span class="comment">//(3+4)x5-6 =&gt; 3 4 + 5 x 6 -</span></span><br><span class="line"><span class="comment">//为了方便，逆波兰表达式中的数字和符号使用空格隔开</span></span><br><span class="line">String suffixExpression = <span class="string">"3 4 + 5 * 6 -"</span>;</span><br><span class="line"><span class="comment">//思路</span></span><br><span class="line"><span class="comment">//1、向将"3 4 + 5 x 6 -" =&gt; 放入ArrayList中</span></span><br><span class="line"><span class="comment">//2、将ArrayList传递给一个方法，遍历ArrayList 配合栈完成计算</span></span><br><span class="line">List&lt;String&gt; list = getListString(suffixExpression);</span><br><span class="line">System.out.println(<span class="string">"rpnList="</span>+list);</span><br><span class="line"><span class="keyword">int</span> res = calculate(list);</span><br><span class="line">System.out.println(<span class="string">"计算的结果为="</span>+res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将一个逆波兰表达式，依次将数据和运算符放入到ArrayList中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getListString</span><span class="params">(String suffixExpression)</span></span>&#123;</span><br><span class="line"><span class="comment">//将suffixExpression分割</span></span><br><span class="line">String[] split = suffixExpression.split(<span class="string">" "</span>);</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="keyword">for</span>(String ele : split)&#123;</span><br><span class="line">list.add(ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 完成对逆波兰表达式的运算</span></span><br><span class="line"><span class="comment"> * (3+4)X5-6对应的后缀表达式就是3 4 + 5 X 6 -，针对后缀表达式求值步骤如下：</span></span><br><span class="line"><span class="comment"> * [1]从左向右扫描，将3和4压入堆栈；</span></span><br><span class="line"><span class="comment"> * [2]遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈；</span></span><br><span class="line"><span class="comment"> * [3]将5入栈；</span></span><br><span class="line"><span class="comment"> * [4]接下来是X运算符，因此弹出5和7，计算7X5=35，将35入栈;</span></span><br><span class="line"><span class="comment"> * [5]将6入栈；</span></span><br><span class="line"><span class="comment"> * [6]最后是-运算符，计算出35-6的值，即29，由此得出最终结果。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(List&lt;String&gt; ls)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建一个栈,只需要一个栈即可</span></span><br><span class="line">Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;String&gt;();</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">for</span>(String item : ls)&#123;</span><br><span class="line"><span class="comment">//这里使用一个正则表达式取出数</span></span><br><span class="line"><span class="keyword">if</span>(item.matches(<span class="string">"\\d+"</span>))&#123;<span class="comment">//匹配的是多位数</span></span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line">stack.push(item);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//pop出两个数，并运算，再入栈</span></span><br><span class="line"><span class="keyword">int</span> num2 = Integer.parseInt(stack.pop());</span><br><span class="line"><span class="keyword">int</span> num1 = Integer.parseInt(stack.pop());</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(item.equals(<span class="string">"+"</span>))&#123;</span><br><span class="line">res = num1 + num2;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">"-"</span>))&#123;</span><br><span class="line">res = num1 - num2;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">"*"</span>))&#123;</span><br><span class="line">res = num1 * num2;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">"/"</span>))&#123;</span><br><span class="line">res = num1 / num2;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"运算符有误"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把res入栈</span></span><br><span class="line">stack.push(res+<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后留在stack中的数据就是运算结果</span></span><br><span class="line"><span class="keyword">return</span> Integer.parseInt(stack.pop());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpnList=[3, 4, +, 5, *, 6, -]</span><br><span class="line">计算的结果为=29</span><br></pre></td></tr></table></figure><h3 id="中缀表达式转换为后缀表达式"><a href="#中缀表达式转换为后缀表达式" class="headerlink" title="中缀表达式转换为后缀表达式"></a>中缀表达式转换为后缀表达式</h3><p>&emsp;&emsp;从上面的案例可以看出，后缀表达式适合计算机进行运算，但是人却不太容易写出来，尤其是表达式很长的情况下，因此在开发中，我们需要将中缀表达式转成后缀表达式。</p><ul><li>具体步骤如下：<br>[1]初始化两个栈：运算符栈s1和储存中间结果的栈s2；<br>[2]从左向右扫描中缀表达式；<br>[3]遇到操作数时，将其压s2；<br>[4]遇到运算符时，比较其与s1栈顶运算符的优先级：<br>（1）如果s1为空，或栈顶运算符为左括号”（“，则直接将此运算符入栈；<br>（2）否则，若优先级比栈顶运算符的高，也将元算符压入s1；<br>（3）否则，将s1栈顶的运算符弹出并压入到s2中，再次转到(4-1)与s1中新的栈顶运算符相比较。<br>[5]遇到括号时：<br>（1）如果是左括号“（”，则直接压入s1；<br>（2）如果是右括号“）”，则异常弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃。<br>[6]重复步骤2-5，直到表达式的最右边；<br>[7]将s1中剩余的运算符依次弹出并压入s2；<br>[8]依次弹出s2中的元素并输出，结果的逆序即为中缀表达式对应的后缀表达式。</li><li>例如：1+((2+3)X4)-5 其转换过程如下表：<br><img src="https://img-blog.csdnimg.cn/2019112416542788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>代码实现：<br>编写一个类Operation 实现可以返回一个运算符对应的优先级数字<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写一个类Operration 可以返回一个运算符对应的优先级</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Operation</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ADD = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> SUB = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MUL = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> DIV = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//写一个方法，返回一个优先级数字</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">(String operation)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (operation) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">result = ADD;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">result = SUB;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">result = MUL;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">result = DIV;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>书写可以将一个中缀表达式字符串转换成字符然后返回List<string>的方法</string></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将中缀表达式转换成对应的List</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">toInfixExpressionList</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line"><span class="comment">//定义一个list，存放中缀表达式对应的内容</span></span><br><span class="line">List&lt;String&gt; ls = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;<span class="comment">//相当于一个指针，用于遍历中缀表达式字符串</span></span><br><span class="line">String str;<span class="comment">//做多为数的拼接</span></span><br><span class="line"><span class="keyword">char</span> c;<span class="comment">//每对应一个字符，就放入c中</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="comment">//如果c是一个非数字，就需要加入到ls</span></span><br><span class="line"><span class="keyword">if</span>((c=s.charAt(i))&lt;<span class="number">48</span>||(c=s.charAt(i))&gt;<span class="number">57</span>)&#123;</span><br><span class="line">ls.add(<span class="string">""</span>+c);</span><br><span class="line">i++;<span class="comment">//i需要后移</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//如果c是一个数字，需要考虑多为数的问题</span></span><br><span class="line">str = <span class="string">""</span>;<span class="comment">//先将str置成空</span></span><br><span class="line"><span class="keyword">while</span>(i &lt; s.length() &amp;&amp; (c=s.charAt(i))&gt;=<span class="number">48</span> &amp;&amp; (c=s.charAt(i))&lt;=<span class="number">57</span>)&#123;</span><br><span class="line">str +=c;<span class="comment">//拼接</span></span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">ls.add(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">while</span>(i&lt;s.length());</span><br><span class="line"><span class="keyword">return</span> ls;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>书写一个可以将中缀表达式对应的List<string>转换成后缀表达式对应的List<string>的方法</string></string></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将中缀表达式转换成对应的后缀表达式</span></span><br><span class="line"><span class="comment">//即ArrayList[1,+,(,(,2,+,3,),*,4,),-,5] =&gt; ArrayList[1,2,3,+,4,*,+,5,-]</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">parseSuffixExpressionList</span><span class="params">(List&lt;String&gt; ls)</span></span>&#123;</span><br><span class="line"><span class="comment">//定义两个栈</span></span><br><span class="line">Stack&lt;String&gt; s1 = <span class="keyword">new</span> Stack&lt;String&gt;();<span class="comment">// 符号栈</span></span><br><span class="line"><span class="comment">//因为s2这个栈，在转换过程中，没有pop操错，后面还要逆序输出，因此可以直接使用List替代</span></span><br><span class="line">List&lt;String&gt; s2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">//存储中间结果的List s2</span></span><br><span class="line"><span class="comment">//遍历ls</span></span><br><span class="line"><span class="keyword">for</span>(String item : ls)&#123;</span><br><span class="line"><span class="comment">//如果是一个数，加入s2</span></span><br><span class="line"><span class="keyword">if</span>(item.matches(<span class="string">"\\d+"</span>))&#123;</span><br><span class="line">s2.add(item);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">"("</span>))&#123;</span><br><span class="line">s1.push(item);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">")"</span>))&#123;</span><br><span class="line"><span class="comment">//如果是右括号“）”，则异常弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃。</span></span><br><span class="line"><span class="keyword">while</span>(!s1.peek().equals(<span class="string">"("</span>))&#123;</span><br><span class="line">s2.add(s1.pop());</span><br><span class="line">&#125;</span><br><span class="line">s1.pop();<span class="comment">//将这个小括号(弹出s1栈，消除小括号</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//当item的优先级小于等于s1栈顶运算符的优先级，将s1栈顶的运算符弹出并加入到s2中，再次转到(4.1)与s1中新的栈顶运算符相比较</span></span><br><span class="line"><span class="keyword">while</span>(s1.size() != <span class="number">0</span> &amp;&amp; Operation.getValue(s1.peek()) &gt;= Operation.getValue(item))&#123;</span><br><span class="line">s2.add(s1.pop());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//还需要将item压入栈中</span></span><br><span class="line">s1.push(item);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将s1中剩余的运算符依次弹出并加入s2</span></span><br><span class="line"><span class="keyword">while</span>(s1.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">s2.add(s1.pop());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s2; <span class="comment">//注意因为是存放到List，因此按顺序输出就是对应的逆波兰表达式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//完成将一个中缀表达式转换成后缀表达式的功能</span></span><br><span class="line"><span class="comment">//说明</span></span><br><span class="line"><span class="comment">//1、1+((3+3)*4)-5 转成 1 2 3 + 4 * + 5 -</span></span><br><span class="line"><span class="comment">//2、因为直接对一个字符串进行操作，不方便，因此先将“1+((3+3)*4)-5”转成中缀表达式对应的List</span></span><br><span class="line"><span class="comment">//   即“1+((3+3)*4)-5” =&gt; ArrayList[1,+,(,(,2,+,3,),*,4,),-,5]</span></span><br><span class="line"><span class="comment">//3、得到的中缀表达式对应的List转成一个后缀表达式的List</span></span><br><span class="line"><span class="comment">//  即ArrayList[1,+,(,(,2,+,3,),*,4,),-,5] =&gt; ArrayList[1,2,3,+,4,*,+,5,-]</span></span><br><span class="line">String expreession = <span class="string">"1+((2+3)*4)-5"</span>;</span><br><span class="line">List&lt;String&gt; infixExpressionList = toInfixExpressionList(expreession);</span><br><span class="line">System.out.println(<span class="string">"中缀表达式对应的List："</span>+infixExpressionList);</span><br><span class="line">List&lt;String&gt; parseSuffixExpressionList = parseSuffixExpressionList(infixExpressionList);</span><br><span class="line">System.out.println(<span class="string">"后缀表达式对应的List："</span>+parseSuffixExpressionList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">中缀表达式对应的List：[1, +, (, (, 2, +, 3, ), *, 4, ), -, 5]</span><br><span class="line">后缀表达式对应的List：[1, 2, 3, +, 4, *, +, 5, -]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;什么是栈？&lt;br&gt;[1]栈的英文名为Stack&lt;br&gt;[2]栈是一个先入后出（FILO-Firest In Last Out）的有序列表&lt;br&gt;[3]栈(stack)是限制线性表中元素的插入和删除只能在线性表的同一端进行的一种特殊线性表。允许插入和删除的一端，为变化的一端，
      
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://Xiezhenyu98.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://Xiezhenyu98.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://Xiezhenyu98.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法-单向环形链表(约瑟夫环问题)</title>
    <link href="https://Xiezhenyu98.github.io/2019/11/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E5%8D%95%E5%90%91%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8(%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E9%97%AE%E9%A2%98)/"/>
    <id>https://Xiezhenyu98.github.io/2019/11/23/数据结构和算法-单向环形链表(约瑟夫环问题)/</id>
    <published>2019-11-23T12:56:37.078Z</published>
    <updated>2019-11-23T12:57:42.146Z</updated>
    
    <content type="html"><![CDATA[<p>Josephu（约瑟夫、约瑟夫环）问题：<br>设编号为1，2，…，n的n个人围坐一圈，约定的编号为k（1&lt;=k&lt;=n）的人从1开始报数，数到的那个人又出列，依此类推，知道所有人出列为止，由此产生一个出队编号的序列。<br>用一个不带头节点的循环链表来处理Josepho问题：<br>先构成一个有n个节点的单循环链表，然后由k节点起从1开始计数，计到m时，对应节点从链表中删除，直到最后一个节点从链表中删除算法结束。</p><h3 id="单向环形链表的介绍"><a href="#单向环形链表的介绍" class="headerlink" title="单向环形链表的介绍"></a>单向环形链表的介绍</h3><p>链表形成一个环状<br><img src="https://img-blog.csdnimg.cn/20191123193952945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="约瑟夫问题的图释"><a href="#约瑟夫问题的图释" class="headerlink" title="约瑟夫问题的图释"></a>约瑟夫问题的图释</h3><p>Josephu（约瑟夫、约瑟夫环）问题：<br>设编号为1，2，…，n的n个人围坐一圈，约定的编号为k（1&lt;=k&lt;=n）的人从1开始报数，数到的那个人又出列，依此类推，知道所有人出列为止，由此产生一个出队编号的序列。<br><img src="https://img-blog.csdnimg.cn/20191123194651111.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>以上图的出队顺序为：<br>2-&gt;4-&gt;1-&gt;5-&gt;3</p><h3 id="约瑟夫问题的代码实现"><a href="#约瑟夫问题的代码实现" class="headerlink" title="约瑟夫问题的代码实现"></a>约瑟夫问题的代码实现</h3><p>思路：<br>构建一个环形链表<br>[1]创建第一个节点，让一个指针(变量)first指向该节点，并形成一个环形<br>[2]后面当我们每创建一个节点，就把该节点，加入到已有的环形链表中即可<br>遍历环形链表<br>[1]先让一个辅助指针(变量)curBoy，指向first节点<br>[2]然后通过一个while循环遍历该环形链表即可<br>[3]当curBoy.next == first 遍历结束<br>代码：<br>书写节点类Boy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个Boy类，表示一个节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> no;<span class="comment">//编号</span></span><br><span class="line"><span class="keyword">private</span> Boy next;<span class="comment">//指向下一个节点，默认为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Boy</span><span class="params">(<span class="keyword">int</span> no)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no=no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNo</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Boy <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Boy next)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个环形单向链表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个环形的单向链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleSingkeLinkedList</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建一个first节点，当前没有编号</span></span><br><span class="line"><span class="keyword">private</span> Boy first = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//添加小孩节点，构成一个环形的链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBoy</span><span class="params">(<span class="keyword">int</span> nums)</span></span>&#123;</span><br><span class="line"><span class="comment">//nums 做一个数据校验</span></span><br><span class="line"><span class="keyword">if</span>(nums&lt;<span class="number">1</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"nums的值不正确"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Boy curBoy = <span class="keyword">null</span>;<span class="comment">//辅助指针，帮助构建环形链表</span></span><br><span class="line"><span class="comment">//使用for循环创建环形链表</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= nums; i++) &#123;</span><br><span class="line"><span class="comment">//根据编号创建小孩节点</span></span><br><span class="line">Boy boy = <span class="keyword">new</span> Boy(i);</span><br><span class="line"><span class="comment">//如果是第一个小孩</span></span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>) &#123;</span><br><span class="line">first = boy;</span><br><span class="line">first.setNext(first);<span class="comment">//构成环</span></span><br><span class="line">curBoy = first;<span class="comment">//让curBoy指向第一个小孩</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">curBoy.setNext(boy);</span><br><span class="line">boy.setNext(first);</span><br><span class="line">curBoy = boy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历当前环形链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showBoy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断链表是否为空</span></span><br><span class="line"><span class="keyword">if</span>(first==<span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"链表为空！"</span>);<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为first不能动，因此仍然使用辅助指针完成遍历</span></span><br><span class="line">Boy curBoy = first;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">System.out.printf(<span class="string">"小孩的编号%d\n"</span>,curBoy.getNo());</span><br><span class="line"><span class="keyword">if</span>(curBoy.getNext()==first)<span class="keyword">break</span>;<span class="comment">//说明已经遍历完毕</span></span><br><span class="line">curBoy = curBoy.getNext();<span class="comment">//curBoy后移</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据用户的输入，生成一个小孩出圈的顺序<br>[1]需要创建一个辅助指针（变量）helper，事先应该指向环形链表的最后这个节点。<br>[2]小孩报数前，先让first和helper移动k-1次<br>[2]当小孩报数时，让first和helper同时移动m-1次<br>[3]这时就可以将first指向的小孩节点出圈<br>first=first.next<br>helper.next=first<br>[4]原来first指向的这个节点就没有任何引用了<br><img src="https://img-blog.csdnimg.cn/20191123203638470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>向环形单向链表类CircleSingkeLinkedList中添加出圈这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据用户的输入，计算小孩出圈的顺序</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> startNo 表示从第几个小孩开始数数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> countNum 表示数几下</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 表示最初有多少小孩在圈中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countBoy</span><span class="params">(<span class="keyword">int</span> startNo,<span class="keyword">int</span> countNum,<span class="keyword">int</span> nums)</span> </span>&#123;</span><br><span class="line"><span class="comment">//先对数据进行校验</span></span><br><span class="line"><span class="keyword">if</span>(first==<span class="keyword">null</span>||startNo&lt;<span class="number">1</span>||startNo&gt;nums)&#123;</span><br><span class="line">System.out.println(<span class="string">"参数输入有误！"</span>);<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个辅助指针，帮助完成小孩出圈</span></span><br><span class="line">Boy helper = first;</span><br><span class="line"><span class="comment">//需要创建一个辅助指针（变量）helper，事先应该指向环形链表的最后这个节点。</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(helper.getNext() == first) &#123; <span class="comment">//说明helper指向最后小孩节点</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">helper = helper.getNext();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//小孩报数前，先让first和helper移动k-1次</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;startNo - <span class="number">1</span>;j++)&#123;</span><br><span class="line">first = first.getNext();</span><br><span class="line">helper = helper.getNext();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当小孩报数时，让first和helper同时移动m-1次,然后出圈</span></span><br><span class="line"><span class="comment">//循环操作，知道圈中只有一个节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(helper == first)<span class="keyword">break</span>;<span class="comment">//说明圈中只有一个节点</span></span><br><span class="line"><span class="comment">//让first和helper同时移动countNum-1次,然后出圈</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;countNum-<span class="number">1</span>;j++) &#123;</span><br><span class="line">first = first.getNext();</span><br><span class="line">helper = helper.getNext();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这是first指向的这个小孩就是要出圈的小孩节点</span></span><br><span class="line">System.out.printf(<span class="string">"小孩%d出圈\n"</span>,first.getNo());</span><br><span class="line"><span class="comment">//这时将first指向的小孩节点出圈</span></span><br><span class="line">first = first.getNext();</span><br><span class="line">helper.setNext(first);</span><br><span class="line">&#125;</span><br><span class="line">System.out.printf(<span class="string">"最后留在圈中的小孩编号%d\n"</span>,first.getNo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">CircleSingkeLinkedList c = <span class="keyword">new</span> CircleSingkeLinkedList();</span><br><span class="line">c.addBoy(<span class="number">5</span>);</span><br><span class="line">c.countBoy(<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">小孩2出圈</span><br><span class="line">小孩4出圈</span><br><span class="line">小孩1出圈</span><br><span class="line">小孩5出圈</span><br><span class="line">最后留在圈中的小孩编号3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Josephu（约瑟夫、约瑟夫环）问题：&lt;br&gt;设编号为1，2，…，n的n个人围坐一圈，约定的编号为k（1&amp;lt;=k&amp;lt;=n）的人从1开始报数，数到的那个人又出列，依此类推，知道所有人出列为止，由此产生一个出队编号的序列。&lt;br&gt;用一个不带头节点的循环链表来处理Jos
      
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://Xiezhenyu98.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://Xiezhenyu98.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://Xiezhenyu98.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法-双向链表</title>
    <link href="https://Xiezhenyu98.github.io/2019/11/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    <id>https://Xiezhenyu98.github.io/2019/11/23/数据结构和算法-双向链表/</id>
    <published>2019-11-23T09:51:56.565Z</published>
    <updated>2019-11-23T09:52:42.026Z</updated>
    
    <content type="html"><![CDATA[<p>在学习单向链表的时候，使用带head头的双向链表实现-水浒英雄排行榜管理单项向链表的缺点分析：<br>[1]单向链表，查找的方向只能是一个方向，而双向链表可以向前或者向后查找。<br>[2]单向链表不能自我删除，需要靠辅助节点，而双向链表，则可以自我删除，所以前面单链表删除节点时，总是找到temp，temp是代删除节点的前一个节点。<br><img src="https://img-blog.csdnimg.cn/20191123164024531.png" alt="在这里插入图片描述"><br>分析 双向链表的遍历，添加，修改，删除的操作思路==》代码实现<br>[1]遍历方式和单链表一样，只是可以向前，也可以向后<br>[2]添加（默认添加到双向链表的最后这个节点）<br>（1）先找到双向链表的最后这个节点<br>（2）temp.next=newHeroNode（使最后这个节点直接指向新的节点）<br>（3）newHeroNode.pre=temp（使新添加进来的节点的pre指向上一个节点）<br>[3]修改思路和原理和单向链表一样<br>[4]删除<br>（1）因为是双向链表，因此，可以自我删除某个节点，而不需要想单链表一样找到前一个节点才能删除<br>（2）直接找到要删除的节点，比如temp<br>（3）temp.pre.next=temp.next（要删除节点的上一个节点指向的下一个节点为要删除节点的下一个节点）<br>（4）temp.next.pre=temp.pre（要删除节点的下一个节点指向的上一个节点为要删除节点的上一个节点）</p><h3 id="双向链表的代码实现"><a href="#双向链表的代码实现" class="headerlink" title="双向链表的代码实现"></a>双向链表的代码实现</h3><p>创建节点类HeroNode</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个节点类HeroNode，每个HeroNode对象就是一个节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroNode</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> no;</span><br><span class="line"><span class="keyword">public</span> String nickname;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> HeroNode next;<span class="comment">// 指向下一个节点</span></span><br><span class="line"><span class="keyword">public</span> HeroNode pre;<span class="comment">// 指向上一个节点</span></span><br><span class="line"><span class="comment">// 构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HeroNode</span><span class="params">(<span class="keyword">int</span> no, String name, String nickname)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.nickname = nickname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"HeroNode [no="</span> + no + <span class="string">", nickname="</span> + nickname + <span class="string">", name="</span></span><br><span class="line">+ name + <span class="string">", next="</span> + next + <span class="string">", pre="</span> + pre + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个双向链表的类DoubleLinkedList</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个双向链表的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubleLinkedList</span> </span>&#123;</span><br><span class="line"><span class="comment">//先初始化一个头节点，头节点不要动，不存放具体的数据</span></span><br><span class="line"><span class="keyword">private</span> HeroNode head = <span class="keyword">new</span> HeroNode(<span class="number">0</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line"><span class="comment">//放回头节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HeroNode <span class="title">getHead</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双向链表的遍历"><a href="#双向链表的遍历" class="headerlink" title="双向链表的遍历"></a>双向链表的遍历</h3><p>双向链表的遍历，和单向链表一样。(在双向链表的类DoubleLinkedList中添加方法list()来显示双向链表)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//判断链表是否为空</span></span><br><span class="line"><span class="keyword">if</span>(head.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"链表为空"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为头节点不能动，因此我们需要一个辅助变量来遍历</span></span><br><span class="line">HeroNode temp = head.next;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//判断是否到最后</span></span><br><span class="line"><span class="keyword">if</span>(temp == <span class="keyword">null</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//输出节点信息</span></span><br><span class="line">System.out.println(temp);</span><br><span class="line"><span class="comment">//将next后移,不后移将会是一个死循环</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双向链表添加节点"><a href="#双向链表添加节点" class="headerlink" title="双向链表添加节点"></a>双向链表添加节点</h3><p>思路：<br>（1）先找到双向链表的最后这个节点<br>（2）temp.next=newHeroNode（使最后这个节点直接指向新的节点）<br>（3）newHeroNode.pre=temp（使新添加进来的节点的pre指向上一个节点）<br>代码实现（在双向链表的类DoubleLinkedList中添加方法add()来向双向链表添加节点）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HeroNode heroNode)</span></span>&#123;</span><br><span class="line"><span class="comment">//应为head节点不能动，因此需要一个辅助变量 temp</span></span><br><span class="line">HeroNode temp = head;</span><br><span class="line"><span class="comment">//遍历链表，找到最后</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//找到最后一个</span></span><br><span class="line"><span class="keyword">if</span>(temp.next==<span class="keyword">null</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//没有找到最后</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当退出while循环时，temp就指向了链表的最后</span></span><br><span class="line"><span class="comment">//形成一个双向链表</span></span><br><span class="line">temp.next = heroNode;</span><br><span class="line">heroNode.pre = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双向链表的修改"><a href="#双向链表的修改" class="headerlink" title="双向链表的修改"></a>双向链表的修改</h3><p>双向链表的节点内容修改，可单向链表的节点内容修改一样，在双向链表的类DoubleLinkedList中添加方法update()来修改双向链表节点内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改双向链表一个节点的内容</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(HeroNode newHeroNode)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"链表为空"</span>);<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找到需要修改的节点，根据no编号</span></span><br><span class="line"><span class="comment">//定义一个辅助变量</span></span><br><span class="line">HeroNode temp = head.next;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//表示是否找到该节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(temp == <span class="keyword">null</span>)<span class="keyword">break</span>;<span class="comment">//已经遍历完这个链表了</span></span><br><span class="line"><span class="keyword">if</span>(temp.no == newHeroNode.no)&#123;<span class="comment">//找到了</span></span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后移，相当于遍历</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据flag判断是否找到要修改的节点</span></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">temp.name = newHeroNode.name;</span><br><span class="line">temp.nickname = newHeroNode.nickname;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.printf(<span class="string">"没有找到编号%d的节点，不能修改"</span>,newHeroNode.no);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双向链表的节点删除"><a href="#双向链表的节点删除" class="headerlink" title="双向链表的节点删除"></a>双向链表的节点删除</h3><p>思路：<br>（1）因为是双向链表，因此，可以自我删除某个节点，而不需要想单链表一样找到前一个节点才能删除<br>（2）直接找到要删除的节点，比如temp<br>（3）temp.pre.next=temp.next（要删除节点的上一个节点指向的下一个节点为要删除节点的下一个节点）<br>（4）temp.next.pre=temp.pre（要删除节点的下一个节点指向的上一个节点为要删除节点的上一个节点）<br>代码实现（在双向链表的类DoubleLinkedList中添加方法del()来表示删除双向链表中的某个节点）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除节点</span></span><br><span class="line"><span class="comment">//对于双向链表，可以直接找到要删除这个节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> no)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前链表是否为空</span></span><br><span class="line"><span class="keyword">if</span>(head.next==<span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"链表为空~！无法删除"</span>);<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HeroNode temp = head.next;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>; <span class="comment">//标志是否找到待删除节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(temp == <span class="keyword">null</span>)<span class="keyword">break</span>;<span class="comment">//已经到链表最后</span></span><br><span class="line"><span class="keyword">if</span>(temp.no == no)&#123;<span class="comment">//找到了待删除节点的前一个节点</span></span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后移，遍历</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;<span class="comment">//可以删除</span></span><br><span class="line">temp.pre.next = temp.next;</span><br><span class="line"><span class="keyword">if</span>(temp.next!=<span class="keyword">null</span>)</span><br><span class="line">temp.next.pre = temp.pre;<span class="comment">//如果是最后一个节点就不需要执行下面这句话，否则会出现空指针异常</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.printf(<span class="string">"要删除的节点%d,不存在"</span>,no);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在学习单向链表的时候，使用带head头的双向链表实现-水浒英雄排行榜管理单项向链表的缺点分析：&lt;br&gt;[1]单向链表，查找的方向只能是一个方向，而双向链表可以向前或者向后查找。&lt;br&gt;[2]单向链表不能自我删除，需要靠辅助节点，而双向链表，则可以自我删除，所以前面单链表删除
      
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://Xiezhenyu98.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://Xiezhenyu98.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://Xiezhenyu98.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法-单链表</title>
    <link href="https://Xiezhenyu98.github.io/2019/11/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    <id>https://Xiezhenyu98.github.io/2019/11/10/数据结构和算法-单链表/</id>
    <published>2019-11-10T12:13:34.814Z</published>
    <updated>2019-11-23T09:52:44.634Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;单链表是一种链式存取的数据结构，用一组地址任意的存储单元存放线性表中的数据元素。链表中的数据是以结点来表示的，每个结点的构成：元素(数据元素的映象) + 指针(指示后继元素存储位置)，元素就是存储数据的存储单元，指针就是连接每个结点的地址数据。</p><h3 id="单链表介绍"><a href="#单链表介绍" class="headerlink" title="单链表介绍"></a>单链表介绍</h3><p>单链表是有序的列表，但它在内存中的存储如下：<br><img src="https://img-blog.csdnimg.cn/20191109155441168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)(1)连接是以节点的方式来存储。<br>(2)每个节点包含data域，next域：指向写一个节点。<br>(3)如上图：链表的各个节点不一定是连续存储。<br>(4)链表分带头节点的链表和没有头节点的链表，根据实际需求来确定。</p><h3 id="单链表节点的添加"><a href="#单链表节点的添加" class="headerlink" title="单链表节点的添加"></a>单链表节点的添加</h3><p>使用带head头的单向链表实现-水浒英雄排行榜管理<br>(1)完成对英雄任务的增删改查操作<br>(2)第一种方法在添加英雄时，直接添加到链表的尾部（不考虑排序等问题）<br>(3)第二种方法在添加英雄时，根据排名将名将英雄插入到指定位置（如果有这个排名，则添加失败，并给出提示）</p><ul><li>第一种方法的实现 { 直接添加到链表的尾部（不考虑排序等问题）}<br><img src="https://img-blog.csdnimg.cn/2019111018563915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>定义HeroNode，每个HeroNode对象就是一个节点<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroNode</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> no;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> String nickname;</span><br><span class="line"><span class="keyword">public</span> HeroNode next;<span class="comment">//指向下一个节点</span></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HeroNode</span><span class="params">(<span class="keyword">int</span> no,String name, String nickname)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.nickname = nickname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"HeroNode [no="</span> + no + <span class="string">", name="</span> + name + <span class="string">", nickname="</span> + nickname + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>定义一个SingleLinkedList 管理节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedList</span></span>&#123;</span><br><span class="line"><span class="comment">//先初始化一个头节点，头节点不要动,不存放具体的数据</span></span><br><span class="line"><span class="keyword">private</span> HeroNode head = <span class="keyword">new</span> HeroNode(<span class="number">0</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加节点到单向链表</span></span><br><span class="line"><span class="comment"> * 当不考虑编号顺序时</span></span><br><span class="line"><span class="comment"> * 1、找到当前链表的最后节点</span></span><br><span class="line"><span class="comment"> * 2、将最后这个节点的next 指向新的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HeroNode heroNode)</span></span>&#123;</span><br><span class="line"><span class="comment">//应为head节点不能动，因此需要一个辅助变量 temp</span></span><br><span class="line">HeroNode temp = head;</span><br><span class="line"><span class="comment">//遍历链表，找到最后</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//找到最后一个</span></span><br><span class="line"><span class="keyword">if</span>(temp.next==<span class="keyword">null</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//没有找到最后</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当退出while循环时，temp就指向了链表的最后</span></span><br><span class="line">temp.next = heroNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示链表（遍历）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//判断链表是否为空</span></span><br><span class="line"><span class="keyword">if</span>(head.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"链表为空"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为头节点不能动，因此我们需要一个辅助变量来遍历</span></span><br><span class="line">HeroNode temp = head.next;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//判断是否到最后</span></span><br><span class="line"><span class="keyword">if</span>(temp == <span class="keyword">null</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//输出节点信息</span></span><br><span class="line">System.out.println(temp);</span><br><span class="line"><span class="comment">//将next后移,不后移将会是一个死循环</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建节点</span></span><br><span class="line">HeroNode hero1 = <span class="keyword">new</span> HeroNode(<span class="number">1</span>,<span class="string">"宋江"</span>,<span class="string">"及时雨"</span>);</span><br><span class="line">HeroNode hero2 = <span class="keyword">new</span> HeroNode(<span class="number">2</span>,<span class="string">"卢俊义"</span>,<span class="string">"及时雨"</span>);</span><br><span class="line">HeroNode hero3 = <span class="keyword">new</span> HeroNode(<span class="number">3</span>,<span class="string">"无用"</span>,<span class="string">"智多星"</span>);</span><br><span class="line">HeroNode hero4 = <span class="keyword">new</span> HeroNode(<span class="number">4</span>,<span class="string">"林冲"</span>,<span class="string">"豹子头"</span>);</span><br><span class="line"><span class="comment">//创建一个链表</span></span><br><span class="line">SingleLinkedList singleLinkedList = <span class="keyword">new</span> SingleLinkedList();</span><br><span class="line"><span class="comment">//加入</span></span><br><span class="line">singleLinkedList.add(hero1);</span><br><span class="line">singleLinkedList.add(hero2);</span><br><span class="line">singleLinkedList.add(hero3);</span><br><span class="line">singleLinkedList.add(hero4);</span><br><span class="line"><span class="comment">//显示</span></span><br><span class="line">singleLinkedList.list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HeroNode [no=1, name=宋江, nickname=及时雨]</span><br><span class="line">HeroNode [no=2, name=卢俊义, nickname=及时雨]</span><br><span class="line">HeroNode [no=3, name=无用, nickname=智多星]</span><br><span class="line">HeroNode [no=4, name=林冲, nickname=豹子头]</span><br></pre></td></tr></table></figure><ul><li>第二种方法的实现 { 根据排名将名将英雄插入到指定位置（如果有这个排名，则添加失败，并给出提示）}<br><img src="https://img-blog.csdnimg.cn/20191110190916725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在上面已经定义的SingleLinkedList管理HeroNode的类中添加方法addByOrder<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addByOrder</span><span class="params">(HeroNode heroNode)</span></span>&#123;</span><br><span class="line"><span class="comment">//因为头节点不能动，因此我们仍然通过一个辅助指针（变量）来帮助找到添加位置</span></span><br><span class="line"><span class="comment">//因为单链表，因此找的temp是位于 添加位置的前一个节点，否则插入不了</span></span><br><span class="line">HeroNode temp = head;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//标识添加的编号是否存在，默认为false</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(temp.next == <span class="keyword">null</span>)<span class="keyword">break</span>;<span class="comment">//说明temp已经在链表最后</span></span><br><span class="line"><span class="keyword">if</span>(temp.next.no &gt; heroNode.no)<span class="keyword">break</span>;<span class="comment">//位置找到了，就在temp后面插入</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(temp.next.no == heroNode.no)&#123;<span class="comment">//说明希望添加的heroNode编号已经存在</span></span><br><span class="line">flag = <span class="keyword">true</span>;<span class="comment">//说明编号存在</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.next;<span class="comment">//后移，遍历当前链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断flag的值</span></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;<span class="comment">//不能添加，说明编号存在</span></span><br><span class="line">System.out.printf(<span class="string">"准备插入的英雄的编号%d已经存在,不能加入。\n"</span>,heroNode.no);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//插入到链表中</span></span><br><span class="line">heroNode.next = temp.next;</span><br><span class="line">temp.next = heroNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="单链表节点的修改"><a href="#单链表节点的修改" class="headerlink" title="单链表节点的修改"></a>单链表节点的修改</h3><p>修改原来节点的name和nickname，只需要在上面定义的SingleLinkedList管理HeroNode的类中添加方法update</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改节点的信息，根据no编号修改，即no不能改</span></span><br><span class="line"><span class="comment">//1、根据newHeroNode的no来修改</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(HeroNode newHeroNode)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"链表为空"</span>);<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找到需要修改的节点，根据no编号</span></span><br><span class="line"><span class="comment">//定义一个辅助变量</span></span><br><span class="line">HeroNode temp = head.next;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//表示是否找到该节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(temp == <span class="keyword">null</span>)<span class="keyword">break</span>;<span class="comment">//已经变量完这个链表了</span></span><br><span class="line"><span class="keyword">if</span>(temp.no == newHeroNode.no)&#123;<span class="comment">//找到了</span></span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后移，相当于遍历</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据flag判断是否找到要修改的节点</span></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">temp.name = newHeroNode.name;</span><br><span class="line">temp.nickname = newHeroNode.nickname;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.printf(<span class="string">"没有找到编号%d的节点，不能修改"</span>,newHeroNode.no);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单链表的节点删除"><a href="#单链表的节点删除" class="headerlink" title="单链表的节点删除"></a>单链表的节点删除</h3><p><img src="https://img-blog.csdnimg.cn/201911101951532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">从单链表中删除一个节点的思路<br>1、找到需要删除的节点的前一个节点temp<br>2、temp.next = temp.next.next<br>3、被删除的节点，将不会有其它应用指向，会被垃圾回收机制回收<br>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除节点</span></span><br><span class="line"><span class="comment">//1、head不能动，因此我们需要一个temp辅助节点找到待删除的节点的前一个节点</span></span><br><span class="line"><span class="comment">//2、说明我们在比较时，是temp.next.no 和需要删除的节点的no比较</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> no)</span></span>&#123;</span><br><span class="line">HeroNode temp = head;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>; <span class="comment">//标志是否找到待删除节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(temp.next == <span class="keyword">null</span>)<span class="keyword">break</span>;<span class="comment">//已经到链表最后</span></span><br><span class="line"><span class="keyword">if</span>(temp.next.no == no)&#123;<span class="comment">//找到了待删除节点的前一个节点</span></span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后移，遍历</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;<span class="comment">//可以删除</span></span><br><span class="line">temp.next = temp.next.next;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.printf(<span class="string">"要删除的节点%d,不存在"</span>,no);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;单链表是一种链式存取的数据结构，用一组地址任意的存储单元存放线性表中的数据元素。链表中的数据是以结点来表示的，每个结点的构成：元素(数据元素的映象) + 指针(指示后继元素存储位置)，元素就是存储数据的存储单元，指针就是连接每个结点的地址数据。&lt;/p
      
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://Xiezhenyu98.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://Xiezhenyu98.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://Xiezhenyu98.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法-队列</title>
    <link href="https://Xiezhenyu98.github.io/2019/11/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E9%98%9F%E5%88%97/"/>
    <id>https://Xiezhenyu98.github.io/2019/11/09/数据结构和算法-队列/</id>
    <published>2019-11-09T07:24:13.170Z</published>
    <updated>2019-11-09T07:25:16.455Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;队列是一种特殊的线性表，特殊之处在于它只允许在表的前端进行删除操作，而在表的后端进行插入操作(先入先出原则)，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。</p><h3 id="队列的使用场景"><a href="#队列的使用场景" class="headerlink" title="队列的使用场景"></a>队列的使用场景</h3><p>银行排队案例：<br><img src="https://img-blog.csdnimg.cn/20191106200745164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">&emsp;&emsp;在银行排队办理业务的时候，如果窗口有人正在办理业务，后面等待的人会按照先后顺序排成一个队列，这个队列的人，先到的先从等待队列中出去办理业务，而后到的人要从这个队列的末尾排队，等待先到的人从这个等待队列出去办理业务之后，后到的人才能从等待队列出去。</p><h3 id="用数组模拟队列思路分析"><a href="#用数组模拟队列思路分析" class="headerlink" title="用数组模拟队列思路分析"></a>用数组模拟队列思路分析</h3><p>&emsp;&emsp;队列本身是有序列表，若使用数组的结构来存储队列的数据，则队列数组的声明如下图所示，其中maxSize是该队列的最大容量。<br>&emsp;&emsp;因为队列的输出、输入是分别从前后端来处理，因此需要两个变量front及rear分别记录队列前后端的下标，front会随着数据输出而改变，而rear则是随着数据输入而改变，如图所示：<br><img src="https://img-blog.csdnimg.cn/20191109143346578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当我们将数据存入队列时称为“addQueue”，addQueue的处理需要有两个步骤：<br>(1)将尾指针往后移：rear+1，当front==rear 时，为空队列。<br>(2)若尾指针rear小于队列的最大下标maxSize-1，则将数据存入rear所指的数组元素中，否则无法存入数据。rear==maxSize-1 时，为队列满。</p><h3 id="数组模拟队列的代码实现"><a href="#数组模拟队列的代码实现" class="headerlink" title="数组模拟队列的代码实现"></a>数组模拟队列的代码实现</h3><p>模拟一个队列实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用数组模拟队列（编写一个ArrayQueue类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize;<span class="comment">//表示数组的最大容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> front;<span class="comment">//队列头</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> rear;<span class="comment">//队列尾</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] arr;<span class="comment">//该数组用于存放队列，模拟的队列</span></span><br><span class="line"><span class="comment">//创建队列构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">(<span class="keyword">int</span> arrMaxSize)</span></span>&#123;</span><br><span class="line">maxSize = arrMaxSize;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">front = -<span class="number">1</span>;<span class="comment">//指向队列头部，分析出front是指向队列头的前一个位置</span></span><br><span class="line">rear = -<span class="number">1</span>;<span class="comment">//指向队列尾部，指向队列尾的数据(就是队列最后一个数据)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断队列是否满</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> rear == maxSize - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> rear == front;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加数据到队列</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="comment">//判断队列是否满</span></span><br><span class="line"><span class="keyword">if</span>(isFull())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列满，不能加入数据！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">rear++;<span class="comment">//让rear后移</span></span><br><span class="line">arr[rear] = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数据出队列</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//判断队列是否空</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line"><span class="comment">//通过抛出异常处理</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列空，不能取数据"</span>);</span><br><span class="line">&#125;</span><br><span class="line">front++;</span><br><span class="line"><span class="keyword">return</span> arr[front];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示队列的所有数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">System.out.println(<span class="string">"队列为空，没有数据！"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;arr.length;i++)&#123;</span><br><span class="line">System.out.printf(<span class="string">"arr[%d]=%d\n"</span>,i,arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示队列的头数据，注意部署去除数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">headQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列空，没有头！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr[front+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayQueueDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建一个队列</span></span><br><span class="line">ArrayQueue arrayQueue = <span class="keyword">new</span> ArrayQueue(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">char</span> key = <span class="string">' '</span>;<span class="comment">//接收用户的输入</span></span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//输出一个菜单</span></span><br><span class="line"><span class="keyword">while</span>(loop)&#123;</span><br><span class="line">System.out.print(<span class="string">"s(show):显示队列;"</span>);</span><br><span class="line">System.out.print(<span class="string">"e(exit):退出程序;"</span>);</span><br><span class="line">System.out.print(<span class="string">"a(add):添加队列;"</span>);</span><br><span class="line">System.out.print(<span class="string">"g(get):从队列取出数据;"</span>);</span><br><span class="line">System.out.println(<span class="string">"h(head):查看队列头的数据。"</span>);</span><br><span class="line">key = scanner.next().charAt(<span class="number">0</span>);<span class="comment">//接收一个字符</span></span><br><span class="line"><span class="keyword">switch</span> (key) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">arrayQueue.showQueue();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line">scanner.close();</span><br><span class="line">loop = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"请输入一个数字："</span>);</span><br><span class="line"><span class="keyword">int</span> value = scanner.nextInt();</span><br><span class="line">arrayQueue.addQueue(value);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'g'</span>:</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">int</span> res = arrayQueue.getQueue();</span><br><span class="line">System.out.printf(<span class="string">"取出的数据是%d\n"</span>,res);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'h'</span>:</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">int</span> head = arrayQueue.headQueue();</span><br><span class="line">System.out.printf(<span class="string">"队列头为%d\n"</span>,head);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"程序退出"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://img-blog.csdnimg.cn/20191106212901601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>目前代码存在的一些问题<br>(1)目前数字使用一次就不能使用，没有达到复用的效果<br>(2)将这个数字使用算法，改成一个环形的数组</p><h3 id="数组模拟环形队列"><a href="#数组模拟环形队列" class="headerlink" title="数组模拟环形队列"></a>数组模拟环形队列</h3><ul><li><p>思路：<br>1、front变量的含义做一个调整：front指向队列的第一个元素，也就是说arr[front]就是队列的第一个元素，front的初始值 = 0<br>2、rear变量的含义也做一个调整：rear指向队列的最后一个元素的后一个位置，因为希望空出一个空间作为一个约定。rear的初始值 = 0<br>3、当队列满时，条件是：( rear + 1 ) % maxSize = front<br>4、当队列为空，条件是：rear == front<br>5、当这样之后，队列中有效的数据的个数为( rear + maxSize - front ) % maxSize</p></li><li><p>代码实现<br>模拟一个环形队列实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用数组模拟环形队列（编写一个CircleQueue类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleArray</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize;<span class="comment">//表示数组的最大容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> front;<span class="comment">//front变量的含义做一个调整：front指向队列的第一个元素，也就是说arr[front]就是队列的第一个元素，front的初始值 = 0</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> rear;<span class="comment">//rear变量的含义也做一个调整：rear指向队列的最后一个元素的后一个位置，因为希望空出一个空间作为一个约定。rear的初始值 = 0</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] arr;<span class="comment">//该数组用于存放队列，模拟的队列</span></span><br><span class="line"><span class="comment">//创建队列构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CircleArray</span><span class="params">(<span class="keyword">int</span> arrMaxSize)</span></span>&#123;</span><br><span class="line">maxSize = arrMaxSize;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断队列是否满</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (rear+<span class="number">1</span>)%maxSize==front;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> rear == front;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加数据到环形队列</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="comment">//判断队列是否满</span></span><br><span class="line"><span class="keyword">if</span>(isFull())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列满，不能加入数据！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">arr[rear] = n;</span><br><span class="line">rear = (rear+<span class="number">1</span>)%maxSize;<span class="comment">//将rear后移，这里必须考虑取模</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数据出队列</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//判断队列是否空</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line"><span class="comment">//通过抛出异常处理</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列空，不能取数据"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//front是指向队列的第一个元素</span></span><br><span class="line"><span class="comment">//1、先把front对应的值保存到一个临时的变量</span></span><br><span class="line"><span class="comment">//2、将front后移</span></span><br><span class="line"><span class="comment">//3、将临时保存的变量返回</span></span><br><span class="line"><span class="keyword">int</span> value = arr[front];</span><br><span class="line">front = (front+<span class="number">1</span>)%maxSize;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示队列的所有数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">System.out.println(<span class="string">"队列为空，没有数据！"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从fron开始遍历，遍历多少个元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = front; i&lt;front+size();i++)&#123;</span><br><span class="line">System.out.printf(<span class="string">"arr[%d]=%d\n"</span>,i%maxSize,arr[i%maxSize]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求出当前队列的有效数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (rear+maxSize-front)%maxSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示队列的头数据，注意不是去除数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">headQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列空，没有头！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr[front];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">System.out.println(<span class="string">"测试环形队列"</span>);</span><br><span class="line"><span class="comment">//创建一个队列</span></span><br><span class="line">CircleArray circleQueue = <span class="keyword">new</span> CircleArray(<span class="number">4</span>);<span class="comment">//起队列的有效数据最大为3</span></span><br><span class="line"><span class="keyword">char</span> key = <span class="string">' '</span>;<span class="comment">//接收用户的输入</span></span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//输出一个菜单</span></span><br><span class="line"><span class="keyword">while</span>(loop)&#123;</span><br><span class="line">System.out.print(<span class="string">"s(show):显示队列;"</span>);</span><br><span class="line">System.out.print(<span class="string">"e(exit):退出程序;"</span>);</span><br><span class="line">System.out.print(<span class="string">"a(add):添加队列;"</span>);</span><br><span class="line">System.out.print(<span class="string">"g(get):从队列取出数据;"</span>);</span><br><span class="line">System.out.println(<span class="string">"h(head):查看队列头的数据。"</span>);</span><br><span class="line">key = scanner.next().charAt(<span class="number">0</span>);<span class="comment">//接收一个字符</span></span><br><span class="line"><span class="keyword">switch</span> (key) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">circleQueue.showQueue();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line">scanner.close();</span><br><span class="line">loop = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"请输入一个数字："</span>);</span><br><span class="line"><span class="keyword">int</span> value = scanner.nextInt();</span><br><span class="line">circleQueue.addQueue(value);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'g'</span>:</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">int</span> res = circleQueue.getQueue();</span><br><span class="line">System.out.printf(<span class="string">"取出的数据是%d\n"</span>,res);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'h'</span>:</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">int</span> head = circleQueue.headQueue();</span><br><span class="line">System.out.printf(<span class="string">"队列头为%d\n"</span>,head);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"程序退出"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://img-blog.csdnimg.cn/20191109151539101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;队列是一种特殊的线性表，特殊之处在于它只允许在表的前端进行删除操作，而在表的后端进行插入操作(先入先出原则)，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。&lt;/p&gt;
&lt;h3 id=&quot;队列的使用场景&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://Xiezhenyu98.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://Xiezhenyu98.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://Xiezhenyu98.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法-稀疏数组</title>
    <link href="https://Xiezhenyu98.github.io/2019/11/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/"/>
    <id>https://Xiezhenyu98.github.io/2019/11/05/数据结构和算法-稀疏数组/</id>
    <published>2019-11-05T13:54:41.952Z</published>
    <updated>2019-11-06T11:18:14.909Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实际需求"><a href="#实际需求" class="headerlink" title="实际需求"></a>实际需求</h3><ul><li>编写的五子棋程序中，有存盘退出和继续上盘的功能<br><img src="https://img-blog.csdnimg.cn/20191105194932380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用二维数组记录棋盘(用1记录玩家1，用2记录玩家2)<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;1&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;2&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0</li><li>分析存在的问题<br>&emsp;&emsp;因为二维数组的很多值都是默认的值0，因此记录了很多没有意义的数据，这个时候就可以使用稀疏数组解决这个问题。<h3 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h3></li><li>基本介绍<br>当一个数组中大部分元素为0，或者为同一个值的数组时，可以使用稀疏数组来保存改数组。<br>稀疏数组的处理方法是：<br>（1）记录数组一共有几行几列，有多少个不同的值<br>（2）把具有不同值的元素行列及值记录在一个小规模得数组中，从而缩小程序得规模</li><li>举例说明<br>实际二维数组<br><img src="https://img-blog.csdnimg.cn/2019110520131992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>转换为稀疏二维数组<br><img src="https://img-blog.csdnimg.cn/20191105201917285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>&emsp;&emsp;从上面两个数组可以看出，原始的二维数组一共记录了42个数据，而转换为稀疏二维数组之后只需要记录27个数据。</li><li>应用实例<br>（1）使用稀疏数组，来保存类似前面的二维数组（棋盘、地图等等）<br>（2）把稀疏数组存盘，并且可以从新恢复原来的二维数组<br>（3）思路分析<br><img src="https://img-blog.csdnimg.cn/20191105211232384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>将原始二维数组转换为稀疏数组的思路<br>①遍历原始的二维数组，得到有效数据的个数sum<br>②根据sum就可以创建稀疏二维数组sparseArr int[sum+1][3]<br>③将原始二维数组的有效数据存入到稀疏数组<br>将稀疏数组转换为原始二维数组的思路<br>①先读取稀疏数组的第一行，根据第一行的数据创建原始的二维数组<br>②在读取稀疏数组后几行的数据，并赋值给原始二维数组即可</li></ul><h3 id="稀疏数组的代码实现"><a href="#稀疏数组的代码实现" class="headerlink" title="稀疏数组的代码实现"></a>稀疏数组的代码实现</h3><p> 此部分是将上面的思路分析转换成代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseArray</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将原始二维数组转换为稀疏数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//创建一个原始的二维数组10 * 10</span></span><br><span class="line"><span class="comment">//0：表示每一棋子，1表示黑棋，2表示白棋</span></span><br><span class="line"><span class="keyword">int</span> chessArr1[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">chessArr1[<span class="number">3</span>][<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">chessArr1[<span class="number">4</span>][<span class="number">4</span>]=<span class="number">2</span>;</span><br><span class="line"><span class="comment">//输出原始的二维数组</span></span><br><span class="line">System.out.println(<span class="string">"原始二维数组："</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>[] row: chessArr1)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> data : row)&#123;</span><br><span class="line">System.out.printf(<span class="string">"%d\t"</span>,data);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将二维数组转换为稀疏数组</span></span><br><span class="line"><span class="comment">//1.先遍历二维数组，得到非0数据的个数</span></span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(chessArr1[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.创建对应的稀疏数组</span></span><br><span class="line"><span class="keyword">int</span> sparseArr[][] = <span class="keyword">new</span> <span class="keyword">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line"><span class="comment">//给稀疏数组赋值</span></span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">10</span>;</span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//遍历原始二维数组，将非0的值存放到sparseArr中</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//count用于记录是第几个非0数据</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(chessArr1[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">count++;</span><br><span class="line">sparseArr[count][<span class="number">0</span>] = i;</span><br><span class="line">sparseArr[count][<span class="number">1</span>] = j;</span><br><span class="line">sparseArr[count][<span class="number">2</span>] = chessArr1[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出稀疏数组的形式</span></span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">"得到的稀疏数组为："</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;sparseArr.length;i++)&#123;</span><br><span class="line">System.out.printf(<span class="string">"%d\t%d\t%d\t"</span>,sparseArr[i][<span class="number">0</span>],sparseArr[i][<span class="number">1</span>],sparseArr[i][<span class="number">2</span>]);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将稀疏数组转换为原始二维数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//1.读取稀疏数组第一行，根据第一行数据创建原始二维数组</span></span><br><span class="line"><span class="keyword">int</span> chessArr2[][] = <span class="keyword">new</span> <span class="keyword">int</span>[sparseArr[<span class="number">0</span>][<span class="number">0</span>]][sparseArr[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"><span class="comment">//2.根据稀疏数组第二行以及之后行的数据赋值给原始二维数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;sparseArr.length;i++)&#123;</span><br><span class="line">chessArr2[sparseArr[i][<span class="number">0</span>]][sparseArr[i][<span class="number">1</span>]] = sparseArr[i][<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出还原的二维数组</span></span><br><span class="line">System.out.println(<span class="string">"恢复之后的二维数组："</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>[] row: chessArr2)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> data : row)&#123;</span><br><span class="line">System.out.printf(<span class="string">"%d\t"</span>,data);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://img-blog.csdnimg.cn/20191105215240430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;实际需求&quot;&gt;&lt;a href=&quot;#实际需求&quot; class=&quot;headerlink&quot; title=&quot;实际需求&quot;&gt;&lt;/a&gt;实际需求&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;编写的五子棋程序中，有存盘退出和继续上盘的功能&lt;br&gt;&lt;img src=&quot;https://img-blog.cs
      
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://Xiezhenyu98.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://Xiezhenyu98.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://Xiezhenyu98.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Maven的核心概念</title>
    <link href="https://Xiezhenyu98.github.io/2019/10/27/Maven%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
    <id>https://Xiezhenyu98.github.io/2019/10/27/Maven的核心概念/</id>
    <published>2019-10-27T13:06:14.588Z</published>
    <updated>2019-11-06T11:25:41.042Z</updated>
    
    <content type="html"><![CDATA[<p>Maven的目录结构，POM，坐标，仓库，依赖，生命周期，继承，聚合分别是什么呢？</p><h3 id="Maven的目录结构"><a href="#Maven的目录结构" class="headerlink" title="Maven的目录结构"></a>Maven的目录结构</h3><p>这一部分的内容在我的上一篇《快速上手Maven》已经讲过，在这就不在过多赘述。<br><img src="https://img-blog.csdnimg.cn/20191026212828155.png" alt="在这里插入图片描述"><br>HelloMaven：根目录（工程名）<br>src：源码<br>pom.xml：Maven工程的核心配置文件<br>main：存放主程序<br>test：存放测试程序<br>java：存放java源文件<br>resources：存放框架或者其它工具的配置文件</p><h3 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h3><p>[1]含义：Project Object Model 项目对象模型，类似与DOM Document Object Model 文档对象模型<br>[2]pom.xml对于Maven工程是核心的配置文件，与构建过程相关的一切设置都在这个文件中进行配置。重要程度相当于web.xml对于动态Web工程。</p><h3 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h3><ul><li><p>在Maven中坐标是使用三个向量在仓库中唯一定位一个Maven工程<br>[1]groupId：公司或者组织的唯一标志，一般用公司或组织域名倒序+项目名</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiezhenyu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  [2]artifactId：模块名，项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HelloMaven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  [3]version：版本号</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Maven坐标与仓库中路径的对应关系<br>如com.xiezhenyu.maven，maven会将该项目打成的jar包放本地仓库路径：/com/xiezhenyu/maven-1.0.jar。我们自己的 Maven 工程必须执行安装操作才会进入仓库，安装的命令是：mvn install。</p><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3></li><li><p>仓库的分类<br>[1]本地仓库：为当前本机电脑上所有的Maven工程服务<br>[2]远程仓库：远程仓库分为私服、中央仓库、中央镜像仓库。私服：架设在当前局域网环境下，为当前局域网范围内的所有Maven工程服务；中央仓库：架设在Internet上，为全世界所有的Maven工程服务；中央仓库镜像：架设在各个大洲上，为中央仓库分担流量。减轻中央仓库的压力，同时更快的响应用户请求。<br>其中仓库的关系可以参照下图：<br><img src="https://img-blog.csdnimg.cn/20191027164811799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>仓库中的文件(仓库中保存的内容)<br>[1]Maven自身所需要的插件<br>[2]第三方框架或工具的jar包<br>[3]我们自己开发的Maven工程</p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3></li><li><p>概念<br>&emsp;&emsp;当 A jar 包用到了 B jar 包中的某些类时，A 就对 B 产生了依赖，这是概念上的描述。Maven解析依赖信息时会到仓库中查找被依赖的jar包。 如果要使用我们自己开发的jar包，要使用mvn install命令安装后就可以进入仓库。</p></li><li><p>依赖的范围</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  在上面<scope>test</scope>就是描述依赖的范围，其值可以有<br>  <img src="https://img-blog.csdnimg.cn/20191027171334782.png" alt="在这里插入图片描述"><br>  其文字描述为：</p><p>  compile范围依赖<br>※对主程序是否有效：有效<br>※对测试程序是否有效：有效<br>※是否参与打包：参与<br>※是否参与部署：参与<br>※典型例子：spring-core</p><p>  test范围依赖<br>  ※对主程序是否有效：无效<br>  ※对测试程序是否有效：有效<br>  ※是否参与打包：不参与<br>  ※是否参与部署：不参与<br>  ※典型例子：Junit</p><p>  从开发和运行这两个阶段理解compile 和 provided 的区别<br>  compile围依赖<br>  <img src="https://img-blog.csdnimg.cn/20191027184251792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  provided 范围依赖<br>  <img src="https://img-blog.csdnimg.cn/20191027184320330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>依赖的传递性<br>&emsp;&emsp;比如A.jar依赖B.jar，B.jar依赖C.jar，A.jar能否使用C.jar呢？这时就需要看B.jar依赖C.jar的范围是不是compile范围的依赖。这就说明，C.jar只是给B.jar单独使用的。</p></li><li><p>依赖的排除<br>&emsp;&emsp;如果我们当前工程中引入了一个依赖是A.jar，而A.jar又依赖了B.jar，那么Maven会自动将A依赖的B引入当前工程，但是个别情况下B.jar有可能是一个不稳定版本，或对当前工程有不良影响。这时我们可以在引入A.jar的时候将B.jar排除。<br>①情景<br><img src="https://img-blog.csdnimg.cn/20191027193223498.png" alt="在这里插入图片描述">②配置方式</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiezhenyu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HelloMaven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置需要排除的依赖信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  ③排除后的结果<br>  <img src="https://img-blog.csdnimg.cn/20191027193618237.png" alt="在这里插入图片描述"></p></li><li><p>依赖的原则，解决jar包冲突<br>①路径最短者优先<br>会根据jar包的路径最短的原则依赖jar包<br><img src="https://img-blog.csdnimg.cn/20191027193954616.png" alt="在这里插入图片描述"><br>②路径相同时先声明者优先，先生命指的是dependency标签声明的顺序。<br><img src="https://img-blog.csdnimg.cn/20191027194115470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>统一管理所依赖的版本<br>&emsp;&emsp;对同一个框架的一组jar包最好使用相同的版本。为了方便升级架构，可以将jar包的版本信息统一提取出来。<br>①统一声明版本号(其中 jackson.version 部分是自定义标签。)</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jackson.version</span>&gt;</span>2.9.6<span class="tag">&lt;/<span class="name">jackson.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  ②引用前面声明的版本号 (在这里就会统一引用声明好的版本号)</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  ③其实properties标签配合自定义标签声明数据的配置并不是只能用于声明依赖的版本号。凡是需要统一声明后再引用的场合都可以使用。</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3></li><li><p>各个构建环节执行的顺序：不能打乱顺序，必须按照既定的正确顺序来执行。</p></li><li><p>Maven的核心程序中定义了抽象的生命周期，生命周期中各个阶段的具体任务是由插件来完成的。</p></li><li><p>Maven核心程序为了更好的实现自动化构建，按照这一特点执行生命周期中各个阶段：不论现在要执行生命周期中的哪一阶段，都是从这个生命周期最初的位置开始执行。</p></li><li><p>Maven有三套相互独立的生命周期，分别是：<br>①Clean Lifecycle 在进行真正的构建之前进行一些清理工作。<br>②Default Lifecycle 构建的核心部分，编译、测试、打包、安装、部署等等。<br>③Site Lifecycle 生成项目报告，站点，发布站点。<br>&emsp;&emsp;他们相互独立。也可以直接运行 mvn clean install site 运行所有这三套生命周期。每套生命周期都由一组阶段(Phase)组成，我们平时在命令行输入的命令总会对应于一个特定的阶段。比如，运行 mvn clean，这个 clean 是 Clean 生命周期的一个阶段。有 Clean 生命周期，也有 clean 阶段。</p></li><li><p>Clean声明周期<br>①pre-clean 执行一些需要在clean之前完成的工作<br>②clean 移除所有上一次构建生成的文件<br>③post-clean 执行一些需要在clean 之后立刻完成的工作</p></li><li><p>Default声明周期<br>Default 生命周期是 Maven 生命周期中最重要的一个，绝大部分工作都发生在这个生命周期中。这里标红一些比较重要和常用的阶段：<br>validate（校验）     校验项目是否正确并且所有必要的信息可以完成项目的构建过程。<br>initialize（初始化）     初始化构建状态，比如设置属性值。<br>generate-sources（生成源代码）     生成包含在编译阶段中的任何源代码。<br>process-sources（处理源代码）     处理源代码，比如说，过滤任意值。<br>generate-resources（生成资源文件）     生成将会包含在项目包中的资源文件。<br>process-resources （处理资源文件）    复制和处理资源到目标目录，为打包阶段最好准备。<br>compile（编译）    编译项目的源代码。<br>process-classes（处理类文件）     处理编译生成的文件，比如说对Java class文件做字节码改善优化。<br>generate-test-sources（生成测试源代码）     生成包含在编译阶段中的任何测试源代码。<br>process-test-sources（处理测试源代码）     处理测试源代码，比如说，过滤任意值。<br>generate-test-resources（生成测试资源文件）     为测试创建资源文件。<br>process-test-resources（处理测试资源文件）     复制和处理测试资源到目标目录。<br>test-compile（编译测试源码）     编译测试源代码到测试目标目录.<br>process-test-classes（处理测试类文件）     处理测试源码编译生成的文件。<br>test（测试）    使用合适的单元测试框架运行测试（Juint是其中之一）。<br>prepare-package（准备打包）     在实际打包之前，执行任何的必要的操作为打包做准备。<br>package（打包）    将编译后的代码打包成可分发格式的文件，比如JAR、WAR或者EAR文件。<br>pre-integration-test（集成测试前）     在执行集成测试前进行必要的动作。比如说，搭建需要的环境。<br>integration-test（集成测试）     处理和部署项目到可以运行集成测试环境中。<br>post-integration-test（集成测试后）     在执行集成测试完成后进行必要的动作。比如说，清理集成测试环境。<br>verify （验证）     运行任意的检查来验证项目包有效且达到质量标准。<br>install（安装）    安装项目包到本地仓库，这样项目包可以用作其他本地项目的依赖。<br>deploy（部署）    将最终的项目包复制到远程仓库中与其他开发者和项目共享。</p></li><li><p>Site生命周期<br>①pre-site 执行一些需要在生成站点文档之前完成的工作<br>②site 生成项目的站点文档<br>③post-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备<br>④site-deploy 将生成的站点文档部署到特定的服务器上</p></li><li><p>插件和目标<br>①生命周期的各个阶段仅仅定义了要执行的任务是生命<br>②各个阶段和插件的目标是对应的<br>③相似的目标由特定的插件来完成<br>例如：compile 就是插件 maven-compiler-plugin 的一个目标；pre-clean 是插件 maven-clean-plugin 的一个目标。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3></li><li><p>现状<br>Hello依赖的Junit：4.0<br>HelloFriend依赖的Junit：4.0<br>MakeFriends依赖的Junit：4.9<br>由于test范围的依赖不能传递，所以必然会分散在各个模块工程中，很容易造成版本不一致。</p></li><li><p>需求：统一管理各个模块工程中对Junit依赖的版本。</p></li><li><p>解决思路：将Junit依赖统一提取到“父”工程中，在子工程中声明Junit依赖是不指定版本，以父工程中统一设定的为准。同时也便于修改。 </p></li><li><p>操作步骤：<br>①创建一个Maven工程作为父工程。注意：打包方式为pom </p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiezhenyu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  ②在子工程中声明对父工程的引用 </p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在子过程中声明父工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiezhenyu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 以当前工程的pom.xml文件为基准的父工程pom.xml文件的相对路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>&gt;</span><span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  ③将子工程的坐标中与父工程坐标中重复的内容删除<br>  ④在父工程中统一管理Junit的依赖</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置依赖的管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  ⑤在子工程中删除Junit依赖的版本号部分<br>  注意：配置集成后，执行安装命令时要先安装父工程。</p><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>&emsp;&emsp;如果我们写了很多模块，在我们安装的时候就需要我们一个个安装，这样就整加了工作量，而聚合可以解决这个问题。</p></li><li><p>聚合作用：一键安装各个模块工程。</p></li><li><p>配置方式：在一个“总的聚合工程”中配置各个参与聚合的模块（比如说在父工程配置）</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置聚合 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置一起安装的各个工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>../Hello<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>../HelloFriend<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>../MakeFriends<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用方式：在聚合工程的pom.xml 上点右键-&gt;run as-&gt;maven install</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Maven的目录结构，POM，坐标，仓库，依赖，生命周期，继承，聚合分别是什么呢？&lt;/p&gt;
&lt;h3 id=&quot;Maven的目录结构&quot;&gt;&lt;a href=&quot;#Maven的目录结构&quot; class=&quot;headerlink&quot; title=&quot;Maven的目录结构&quot;&gt;&lt;/a&gt;Maven的目
      
    
    </summary>
    
    
      <category term="Maven" scheme="https://Xiezhenyu98.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="https://Xiezhenyu98.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>【快速上手】Maven的使用</title>
    <link href="https://Xiezhenyu98.github.io/2019/10/27/%5B%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%5DMaven%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://Xiezhenyu98.github.io/2019/10/27/[快速上手]Maven的使用/</id>
    <published>2019-10-27T05:02:36.618Z</published>
    <updated>2019-11-06T11:16:35.866Z</updated>
    
    <content type="html"><![CDATA[<h3 id="首先需要了解一下为什么要使用Maven"><a href="#首先需要了解一下为什么要使用Maven" class="headerlink" title="首先需要了解一下为什么要使用Maven"></a>首先需要了解一下为什么要使用Maven</h3><ul><li>一个项目就是一个工程<br>&emsp;&emsp;如果一个项目非常庞大，就不适合继续使用Package来划分模块。最好是每一个模块对应一个工程，利于分工协作。而利用Maven就可以将一个项目拆分为多个工程。</li><li>项目中需要jar包必须手动“复制”、“粘贴”到WEB-INF/lib目录下<br>&emsp;&emsp;带来的问题：同样的jar包文件重复出现在不同的项目工程中，一方面浪费存储空间，另外也让工程比较臃肿。借助Maven，可以将jar包仅仅保存在“仓库”中，有需要使用的工程“引用”这个文件接口，并不需要真的把jar包复制过来。</li><li>jar包需要别人替我们准备好，或者到官网下载<br>&emsp;&emsp;不同技术的官网提供的jar包下载方式是不同的，有些jar包我们进不去别人的官网，只能从第三方网站下载，而第三方的网站的jar包可能是不规范的。而借助于Maven我们可以以一种规范的方式下载jar包。因为所有知名的jar包都会以规范的方式下载jar包，内容可靠。</li><li>一个jar包依赖的其它jar包需要自己手动加入工程中<br>&emsp;&emsp;有些jar包会依赖很多个jar包，而被依赖的jar包也可能依赖其它jar包，这些依赖关系我们必须记下来，这样就会使程序员整加学习成本。不然我们把不完整的jar包导入到工程中，将会出现报错。而使用Maven将会自动把依赖的jar包导入进来。<h3 id="我们来了解一下什么是Maven"><a href="#我们来了解一下什么是Maven" class="headerlink" title="我们来了解一下什么是Maven"></a>我们来了解一下什么是Maven</h3>&emsp;&emsp;Maven是一款服务于java平台的自动化构建工具。构建就是以java源文件、框架配置文件、JSP、HTML、图片等资源为原材料，去生产一个可运行的项目的过程。这个过程主要分为编译、部署、搭建。<br>构建的各个环节：<br>[1]清理：将以前编译得到的旧的class字节码文件删除，为下一次编译做准备<br>[2]编译：将Java源程序编译为字节码文件。<br>[3]测试：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性。<br>[4]报告：将每一次测试后以标准的格式记录和展示测试结果。<br>[5]打包：将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java工程对应jar包，Web工程对象war包。<br>[6]安装：在Maven环境下特指将打包的结果——Jar包或War包安装到本地仓库中。<br>[7]部署：将打包的结果部署到远程仓库或将war包部署到服务器上运行。<h3 id="如何使用和创建一个Maven工程"><a href="#如何使用和创建一个Maven工程" class="headerlink" title="如何使用和创建一个Maven工程"></a>如何使用和创建一个Maven工程</h3><ul><li>安装jdk、配置java环境变量</li><li>下载并解压Maven核心程序压缩包 【<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">点击下载http://maven.apache.org/download.cgi</a>】<br><img src="https://img-blog.csdnimg.cn/2019102621024717.png" alt="在这里插入图片描述"></li></ul></li><li>配置Maven环境变量<br>MAVEN_HOME：解压Maven核心程序的路径\apache-maven-3.6.1-bin<br>path：%MAVEN_HOME%\bin</li><li>验证Maven是否配置成功（在控制台输入mvn -v）<br><img src="https://img-blog.csdnimg.cn/20191026210817933.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>创建Maven工程<br>&emsp;&emsp;在创建之前必须要知道Maven所约定的Maven目录结构，我们创建这个工程必须按照这个约定的结构去创建，因为我们写的代码最终是要交给Maven去处理的，比如说java源代码编译，只有按照这个Maven约定好的目录去创建，Maven才知道去哪找java源代码编译。<br>Maven的目录结构：<br><img src="https://img-blog.csdnimg.cn/20191026212828155.png" alt="在这里插入图片描述"><br>HelloMaven：根目录（工程名）<br>src：源码<br>pom.xml：Maven工程的核心配置文件<br>main：存放主程序<br>test：存放测试程序<br>java：存放java源文件<br>resources：存放框架或者其它工具的配置文件</li><li>编写Maven项目<br>[1]编写pom.xml文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span> = <span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span> = <span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span> = <span class="string">"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 模型版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiezhenyu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HelloMaven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 版本号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 依赖的jar包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>[2]编写主程序代码<br>&emsp;&emsp;在src/main/java/com/xiezhenyu/maven（一般以公司域名倒写的方式命名）目录下新建文件HelloMaven.java，其内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiezhenyu.maven;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMaven</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHelloMaven</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"HelloMaven!"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello "</span>+name+<span class="string">"!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[3]编写测试代码<br>&emsp;&emsp;在src/test/java/com/xiezhenyu/maven（一般以公司域名倒写的方式命名）目录下新建文件HelloMavenTest.java，其内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiezhenyu.maven;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> junit.framework.Assert.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMavenTest</span></span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelloMaven</span><span class="params">()</span></span>&#123;</span><br><span class="line">HelloMaven helloMaven = <span class="keyword">new</span> HelloMaven();</span><br><span class="line">String results = helloMaven.sayHelloMaven(<span class="string">"xiezhenyu"</span>);</span><br><span class="line">assertEquals(<span class="string">"Hello xiezhenyu!"</span>,results);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上一个简单的Maven项目就搭建起来了。</p><h3 id="如何测试运行一个Maven项目"><a href="#如何测试运行一个Maven项目" class="headerlink" title="如何测试运行一个Maven项目"></a>如何测试运行一个Maven项目</h3><p>在测试之前先要了解一下Maven的常用命令</p><ul><li><p>注意：执行与构建过程有关的Maven命令的时候，必须进入pom.xml所在的目录</p></li><li><p>常用命令<br>[1]mvn clean : 清理<br>[2]mvn compile : 编译主程序<br>[3]mvn test-compile : 编译测试程序<br>[4]mvn test : 执行测试<br>[5]mvn package : 打包<br>[6]mvn install ： 安装<br>[7]mvn site ：生成站点</p></li><li><p>在编译之前，我们如果是第一次使用maven我们本地仓库中没有项目所需的jar包，我们需要联网<br>[1]Maven 的核心程序中仅仅定义了抽象的生命周期，但是具体的工作必须有特定的插件来完成。而插件本身不包含在Maven核心程序中。<br>[2]当我们执行的Maven命令需要用到某些插件时，Maven核心程序会首先到本地仓库中查找。<br>[3]本地仓库的默认位置：[系统登陆用户的家目录] \ .m2\repository<br>[4]Maven核心程序如果在本地仓库中找不到需要的插件，那么它会自动连接外网，到中央仓库下载。<br>[5]如果此时无法连接外网，则构建失败。<br>[6]修改默认本地仓库的位置可以让Maven核心程序到我们事先准备好的目录下查找插件<br>&emsp;①找到Maven解压目录\conf\settings.xml<br>&emsp;②在setting.xml 文件中找到 localRepository 标签<br>&emsp;③将 &lt; localRepository&gt;/path/to/local/repo&lt; /localRepository&gt;从注释中取出<br>&emsp;④将标签体内容修改为自定义的Maven仓库目录</p></li><li><p>执行mvn compile命令（cmd必须进入pom.xml所在的目录）<br><img src="https://img-blog.csdnimg.cn/20191027120036856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">&emsp;&emsp;可以发现我们在目录中生成了target目录，里面有classes，里面生成的是主程序编译后的结果（其中生成的maven-status目录是maven的状态，保存一些创建和输出的信息等）<br><img src="https://img-blog.csdnimg.cn/20191027121937544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>执行mvn test-compile命令<br><img src="https://img-blog.csdnimg.cn/20191027122727199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">可以发现target目录新加了test-class目录，里面，里面生成的是测试程序编译后的结果</p></li><li><p>执行mvn test命令<br><img src="https://img-blog.csdnimg.cn/20191027123339827.png" alt="在这里插入图片描述"><br>可以发现target目录新加了surefire-reports目录，里面生成的是测试报告相关的文件，控制台输出如下<br><img src="https://img-blog.csdnimg.cn/20191027123942738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">可以发现，我们的测试运行已经成功了。</p></li><li><p>执行mvn package命令<br><img src="https://img-blog.csdnimg.cn/20191027124240357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">&emsp;&emsp;可以发现，在target目录新生成了一个目录和一个jar包，maven-archiver目录存放的是这个jar包的基本信息，jar包是主程序编译结果打成的一个jar包，将jar包解压，我们可以看一下jar包的内容<br><img src="https://img-blog.csdnimg.cn/20191027124720503.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191027124840262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">&emsp;&emsp;我们可以发现打包出来的并没有测试程序的内容，只有主程序的内容，里面也并没有这个工程所依赖的jar包，这样我们的工程就不会显得臃肿，如果我们将我们开发的这个模块导入到其它工程中就会方便很多。<br>我们再看一下执行mvn package命令控制台的输出<br><img src="https://img-blog.csdnimg.cn/20191027125100400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">可以发现我们在执行打包命令时它也执行了测试，这就涉及到Maven的生命周期了。（与本篇无关，详情查看下一篇Maven）</p></li></ul><hr><p>以上就是如何快速使用Maven的方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;首先需要了解一下为什么要使用Maven&quot;&gt;&lt;a href=&quot;#首先需要了解一下为什么要使用Maven&quot; class=&quot;headerlink&quot; title=&quot;首先需要了解一下为什么要使用Maven&quot;&gt;&lt;/a&gt;首先需要了解一下为什么要使用Maven&lt;/h3&gt;&lt;ul&gt;

      
    
    </summary>
    
    
      <category term="Maven" scheme="https://Xiezhenyu98.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="https://Xiezhenyu98.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>学习Python的第一步-卸载Python</title>
    <link href="https://Xiezhenyu98.github.io/2019/10/27/%E5%AD%A6%E4%B9%A0Python%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5-%E5%8D%B8%E8%BD%BDPython/"/>
    <id>https://Xiezhenyu98.github.io/2019/10/27/学习Python的第一步-卸载Python/</id>
    <published>2019-10-27T02:55:14.363Z</published>
    <updated>2019-10-27T02:55:01.362Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;相信很多人都已经听说过或者学过Python了，但是有的人没有坚持下去，过了几个月一年或者更久之后Python的版本发生了很大的变化，我们学习当然要学习最新的内容。而要学习最新的内容就必须把电脑里已经安装过的Python旧版本卸载掉（没有安装过的当我没说）</p><ul><li><p>检查是否安装Python<br>Win+R→输入cmd→打开→在cmd输入python→回车<br><img src="https://img-blog.csdnimg.cn/20191027103901720.png" alt>如果出现这个界面就证明你已经安装了Python，如果没有安装，是windows10系统的话会自动弹出python获取界面或者会出现</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">'python' 不是内部或外部命令，也不是可运行的程序</span><br><span class="line">或批处理文件。</span><br></pre></td></tr></table></figure></li><li><p>卸载Python<br>进入电脑的控制面版。<br><img src="https://img-blog.csdnimg.cn/20191027104723396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>找到Python 3.7.3(或者不是Python的其它不是最新的版本)和Python Launcher，并把这两个卸载掉。<br><img src="https://img-blog.csdnimg.cn/20191027104852703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>Python卸载成功</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;相信很多人都已经听说过或者学过Python了，但是有的人没有坚持下去，过了几个月一年或者更久之后Python的版本发生了很大的变化，我们学习当然要学习最新的内容。而要学习最新的内容就必须把电脑里已经安装过的Python旧版本卸载掉（没有安装过的当我没
      
    
    </summary>
    
    
      <category term="Python" scheme="https://Xiezhenyu98.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://Xiezhenyu98.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Spring的模块</title>
    <link href="https://Xiezhenyu98.github.io/2019/10/20/Spring%E7%9A%84%E6%A8%A1%E5%9D%97/"/>
    <id>https://Xiezhenyu98.github.io/2019/10/20/Spring的模块/</id>
    <published>2019-10-20T09:48:48.999Z</published>
    <updated>2019-10-20T09:51:39.635Z</updated>
    
    <content type="html"><![CDATA[<p>Spring下载：<a href="http://repo.spring.io/release/org/springframework/spring/" target="_blank" rel="noopener">http://repo.spring.io/release/org/springframework/spring/</a><br><img src="https://img-blog.csdnimg.cn/20191020164907243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">    </p><ul><li>Test：Spring的单元测试模块<br>spring-test-5.0.8.RELEASE.jar</li><li>Core Container：核心容器（IOC）；黑色代表这部分的功能由哪些jar包组成，要使用这个部分的完整功能们这些jar都需要导入：<br>spring-beans-5.0.8.RELEASE.jar<br>spring-core-5.0.8.RELEASE.jar<br>spring-context-5.0.8.RELEASE.jar<br>spring-expression-5.0.8.RELEASE.jar</li><li>AOP+Aspects：面向切面编程模块<br>spring-aop-5.0.8.RELEASE.jar<br>spring-aspects-5.0.8.RELEASE.jar</li><li>Data Access/Integration：数据访问（Spring访问数据库的模块）<br>spring-jdbc-5.0.8.RELEASE.jar<br>spring-orm-5.0.8.RELEASE.jar（Object Relation Mapping 对象关系映射）<br>spring-oxm-5.0.8.RELEASE.jar（x表示xml）<br>spring-jms-5.0.8.RELEASE.jar<br>spring-tx-5.0.8.RELEASE.jar</li><li>Web：Spring开发web应用的模块<br>spring-websocket-5.0.8.RELEASE.jar<br>spring-web-5.0.8.RELEASE.jar（和原生的web相关的(servlet)）<br>spring-webmvc-5.0.8.RELEASE.jar（开发web应用的组件集成）</li><li>Instrumentation：该模块提供了为JVM添加代理的功能，该模块包含spring-instrument，spring-instrument-tomcat组件，使用较少，不必过分关注。</li></ul><hr><p>用哪个模块导哪个包</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring下载：&lt;a href=&quot;http://repo.spring.io/release/org/springframework/spring/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://repo.spring.io/release
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://Xiezhenyu98.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://Xiezhenyu98.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis和Spring整合</title>
    <link href="https://Xiezhenyu98.github.io/2019/10/20/Mybatis%E5%92%8CSpring%E6%95%B4%E5%90%88/"/>
    <id>https://Xiezhenyu98.github.io/2019/10/20/Mybatis和Spring整合/</id>
    <published>2019-10-20T06:20:57.133Z</published>
    <updated>2019-10-20T06:23:45.977Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、Mybatis和Spring框架整合"><a href="#1、Mybatis和Spring框架整合" class="headerlink" title="1、Mybatis和Spring框架整合"></a>1、Mybatis和Spring框架整合</h3><h4 id="1-1、导入所需的包"><a href="#1-1、导入所需的包" class="headerlink" title="1.1、导入所需的包"></a>1.1、导入所需的包</h4><p>我所需要的包是<br><img src="https://img-blog.csdnimg.cn/20191019212631478.png" alt="在这里插入图片描述"></p><h4 id="1-2、创建Mybatis主配置文件sqlMapConfig-xml"><a href="#1-2、创建Mybatis主配置文件sqlMapConfig-xml" class="headerlink" title="1.2、创建Mybatis主配置文件sqlMapConfig.xml"></a>1.2、创建Mybatis主配置文件sqlMapConfig.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 类型别名,推荐使用package包的形式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 扫描该包主包及子包下的所有类都起别名,别名为类名,而且大小写不敏感,推荐使用小写 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.xiezhenyu.bean"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-3、创建Spring主配置文件applicationContext-xml"><a href="#1-3、创建Spring主配置文件applicationContext-xml" class="headerlink" title="1.3、创建Spring主配置文件applicationContext.xml"></a>1.3、创建Spring主配置文件applicationContext.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd "</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 读取db.properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"db.properties"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置c3p0连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置MyBatis sqlSessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactoryBean"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 告诉spring mybatis的核心配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:sqlMapConfig.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-4、创建log4j-properties和db-properties"><a href="#1-4、创建log4j-properties和db-properties" class="headerlink" title="1.4、创建log4j.properties和db.properties"></a>1.4、创建log4j.properties和db.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Global logging configuration</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG, stdout</span></span><br><span class="line"><span class="comment"># Console output...</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%5p [%t] - %m%n</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driverClass</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.jdbcUrl</span>=<span class="string">jdbc:mysql://localhost:3306/ssm_mybatis?serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="meta">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">p123456</span></span><br></pre></td></tr></table></figure><h4 id="1-5、测试"><a href="#1-5、测试" class="headerlink" title="1.5、测试"></a>1.5、测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">SqlSessionFactoryBean bean = ac.getBean(SqlSessionFactoryBean.class);</span><br><span class="line">System.out.println(bean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-6、结果"><a href="#1-6、结果" class="headerlink" title="1.6、结果"></a>1.6、结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.mybatis.spring.SqlSessionFactoryBean@708f5957</span><br></pre></td></tr></table></figure><p>输出以上结果代表已经成功！</p><h3 id="2、Dao式开发"><a href="#2、Dao式开发" class="headerlink" title="2、Dao式开发"></a>2、Dao式开发</h3><p>在传统dao层上使用MyBatis和spring整合开发</p><h4 id="2-1、创建实体类"><a href="#2-1、创建实体类" class="headerlink" title="2.1、创建实体类"></a>2.1、创建实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiezhenyu.bean;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer u_id;</span><br><span class="line"><span class="keyword">private</span> String u_username;</span><br><span class="line"><span class="keyword">private</span> String u_password;</span><br><span class="line"><span class="keyword">private</span> String u_sex;</span><br><span class="line"><span class="keyword">private</span> Date u_createTime;</span><br><span class="line"><span class="keyword">private</span> Integer u_cid;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getU_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_id</span><span class="params">(Integer u_id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.u_id = u_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getU_username</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u_username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_username</span><span class="params">(String u_username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.u_username = u_username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getU_password</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u_password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_password</span><span class="params">(String u_password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.u_password = u_password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getU_sex</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u_sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_sex</span><span class="params">(String u_sex)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.u_sex = u_sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getU_createTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u_createTime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_createTime</span><span class="params">(Date u_createTime)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.u_createTime = u_createTime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getU_cid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u_cid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_cid</span><span class="params">(Integer u_cid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.u_cid = u_cid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"User [u_id="</span> + u_id + <span class="string">", u_username="</span> + u_username + <span class="string">", u_password="</span> + u_password + <span class="string">", u_sex="</span> + u_sex</span><br><span class="line">+ <span class="string">", u_createTime="</span> + u_createTime + <span class="string">", u_cid="</span> + u_cid + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2、书写Dao和DaoImpl"><a href="#2-2、书写Dao和DaoImpl" class="headerlink" title="2.2、书写Dao和DaoImpl"></a>2.2、书写Dao和DaoImpl</h4><p>dao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiezhenyu.dao;</span><br><span class="line"><span class="keyword">import</span> com.xiezhenyu.bean.User;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="comment">//根据id查询用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;daoImpl继承SqlSessionDaoSupport，可以通过父类的getSqlSession()方法直接获得session，而父类中的sqlSessionFactory可以通过spring注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiezhenyu.dao;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;</span><br><span class="line"><span class="keyword">import</span> com.xiezhenyu.bean.User;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="comment">//通过父类的方法直接获得session</span></span><br><span class="line">SqlSession session = getSqlSession();</span><br><span class="line"><span class="keyword">return</span> session.selectOne(<span class="string">"UserMapper.selectUserById"</span>,id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3、配置spring配置文件applicationContext-xml"><a href="#2-3、配置spring配置文件applicationContext-xml" class="headerlink" title="2.3、配置spring配置文件applicationContext.xml"></a>2.3、配置spring配置文件applicationContext.xml</h4><p>将工厂注入dao的父类 sqlSessionFactory属性中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将工厂注入dao的父类 sqlSessionFactory属性中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDaoImpl"</span> <span class="attr">class</span>=<span class="string">"com.xiezhenyu.dao.UserDaoImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactoryBean"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-4、配置mybatis配置文件"><a href="#2-4、配置mybatis配置文件" class="headerlink" title="2.4、配置mybatis配置文件"></a>2.4、配置mybatis配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/xiezhenyu/mapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-5、测试"><a href="#2-5、测试" class="headerlink" title="2.5、测试"></a>2.5、测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DaoTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">UserDaoImpl userDao = ac.getBean(UserDaoImpl.class);</span><br><span class="line">User user = userDao.getUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-6、结果"><a href="#2-6、结果" class="headerlink" title="2.6、结果"></a>2.6、结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User [u_id=1, u_username=老王, u_password=123, u_sex=1, u_createTime=null, u_cid=1]</span><br></pre></td></tr></table></figure><h3 id="3、Mapper动态代理开发"><a href="#3、Mapper动态代理开发" class="headerlink" title="3、Mapper动态代理开发"></a>3、Mapper动态代理开发</h3><h4 id="3-1、创建实体类"><a href="#3-1、创建实体类" class="headerlink" title="3.1、创建实体类"></a>3.1、创建实体类</h4><p>该过程和上面dao层开发的实体类一致，就不给出代码。</p><h4 id="3-2、创建UserMapper接口，修改UserMapper-xml"><a href="#3-2、创建UserMapper接口，修改UserMapper-xml" class="headerlink" title="3.2、创建UserMapper接口，修改UserMapper.xml"></a>3.2、创建UserMapper接口，修改UserMapper.xml</h4><p>将UserMapper.xml的namespace修改为UserMapper接口的路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">selectUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.xiezhenyu.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查找用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">select * from user where u_id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-3、让sqlMapConfig-xml以包的形式扫描mapper-xml"><a href="#3-3、让sqlMapConfig-xml以包的形式扫描mapper-xml" class="headerlink" title="3.3、让sqlMapConfig.xml以包的形式扫描mapper.xml"></a>3.3、让sqlMapConfig.xml以包的形式扫描mapper.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.xiezhenyu.mapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-4、配置spring配置文件applicationContext-xml"><a href="#3-4、配置spring配置文件applicationContext-xml" class="headerlink" title="3.4、配置spring配置文件applicationContext.xml"></a>3.4、配置spring配置文件applicationContext.xml</h4><p>&emsp;&emsp;将MapperFactoryBean交给Spring管理。MapperFactoryBean中拥有属性mapperInterface可以配置mapper的接口，而MapperFactoryBean是继承SqlSessionDaoSupport，使用可以注入sqlSessionFactory。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mapper动态代理开发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"UserMapper"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactoryBean"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置接口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperInterface"</span> <span class="attr">value</span>=<span class="string">"com.xiezhenyu.mapper.UserMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-5、编写测试方法"><a href="#3-5、编写测试方法" class="headerlink" title="3.5、编写测试方法"></a>3.5、编写测试方法</h4><p>获取mapper的方法可以用传递applicationContext.xml中id的方法，也可以直接传递接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//获取主配置文件</span></span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="comment">//UserMapper mapper = (UserMapper)ac.getBean("UserMapper");</span></span><br><span class="line">UserMapper mapper = ac.getBean(UserMapper.class);</span><br><span class="line">User user = mapper.selectUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-6、结果"><a href="#3-6、结果" class="headerlink" title="3.6、结果"></a>3.6、结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User [u_id=1, u_username=老王, u_password=123, u_sex=1, u_createTime=null, u_cid=1]</span><br></pre></td></tr></table></figure><h3 id="4、Mapper动态扫描开发-推荐使用"><a href="#4、Mapper动态扫描开发-推荐使用" class="headerlink" title="4、Mapper动态扫描开发(推荐使用)"></a>4、Mapper动态扫描开发(推荐使用)</h3><p>&emsp;&emsp;在mapper动态扫描开发中只需要配置以下即可，他会自动扫描某个包下的全部mapper，它不用手动注入sqlSessionFactory。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mapper动态扫描开发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.xiezhenyu.mapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、Mybatis和Spring框架整合&quot;&gt;&lt;a href=&quot;#1、Mybatis和Spring框架整合&quot; class=&quot;headerlink&quot; title=&quot;1、Mybatis和Spring框架整合&quot;&gt;&lt;/a&gt;1、Mybatis和Spring框架整合&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
      <category term="SSM" scheme="https://Xiezhenyu98.github.io/categories/SSM/"/>
    
    
      <category term="MyBatis" scheme="https://Xiezhenyu98.github.io/tags/MyBatis/"/>
    
      <category term="Spring" scheme="https://Xiezhenyu98.github.io/tags/Spring/"/>
    
  </entry>
  
</feed>
