<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>谢以轩</title>
  
  <subtitle>季节的流年里，时光如水而过。春风送暖，染一季芳菲，催一树花开，最美不过人间四月天。鸟语花香的清晨，推开窗子，看桃花灼灼，花瓣纷扬，让心灵浸染春色，那淡淡的清新沉醉了我的一帘幽梦。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://Xiezhenyu98.github.io/"/>
  <updated>2019-11-29T07:50:56.162Z</updated>
  <id>https://Xiezhenyu98.github.io/</id>
  
  <author>
    <name>谢振瑜</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构和算法-递归</title>
    <link href="https://Xiezhenyu98.github.io/2019/11/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E9%80%92%E5%BD%92/"/>
    <id>https://Xiezhenyu98.github.io/2019/11/29/数据结构和算法-递归/</id>
    <published>2019-11-29T07:49:27.294Z</published>
    <updated>2019-11-29T07:50:56.162Z</updated>
    
    <content type="html"><![CDATA[<p>递归的概念：<br>&emsp;&emsp;简单的说，递归就是方法自己调用自己，每次调用时传入不同的变量，递归有助于编程者解决复杂的问题，同时可以让代码变得简洁。</p><h3 id="递归的调用机制"><a href="#递归的调用机制" class="headerlink" title="递归的调用机制"></a>递归的调用机制</h3><p>递归调用的规则<br>[1]当程序执行到一个方法时，就会开辟一个独立的空间（栈）。<br>[2]每个空间的数据(局部变量)，是独立的。<br>用一个案例，理解递归机制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecursionTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">test(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;<span class="number">2</span>)&#123;</span><br><span class="line">test(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"n="</span>+n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个程序的过程分析<br><img src="https://img-blog.csdnimg.cn/20191127202240456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其在控制台的输出为则为<br>n=2<br>n=3</p><h3 id="递归能解决什么样的问题"><a href="#递归能解决什么样的问题" class="headerlink" title="递归能解决什么样的问题"></a>递归能解决什么样的问题</h3><p>[1]各种数学问题：8皇后问题，汉诺塔，阶乘问题，迷宫问题，球和篮子的问题。<br>[2]各种算法中也会使用到递归，比如快速排序，归并排序，二分查找，分治算法等。<br>[3]将用栈解决的问题–&gt;递归代码比较简洁。</p><h3 id="递归需要遵守的重要规则"><a href="#递归需要遵守的重要规则" class="headerlink" title="递归需要遵守的重要规则"></a>递归需要遵守的重要规则</h3><p>[1]执行一个方法时，就创建一个新的受保护的独立空间（栈空间）。<br>[2]方法的局部变量是独立的，不会相互影响。<br>[3]但是如果方法中使用的是引用类型的变量(比如说是数组)，就会共享该引用类型的数据。<br>[4]递归必须向退出的条件逼近，否则就是无限递归，会出现StackOverflowError(栈溢出)异常。<br>[5]当一个方法执行完毕，或者遇到return，就会返回，遵守谁调用，就将结果返回给谁，同时当方法执行完毕或者返回时，该方法也就执行完毕。</p><h3 id="递归-迷宫问题"><a href="#递归-迷宫问题" class="headerlink" title="递归-迷宫问题"></a>递归-迷宫问题</h3><p>说明：<br>[1]小球得到的路径，和程序员设置的找路策略有关即：找路的上下左右顺序相关。<br>[2]再得到小球路径时，可以先使用(下右上左)，再改成(上右下左)，看看路径是不是有变<br>[3]测试回溯现象。<br>[4]思考：如何得到最短路径？(把所有的策略走的路径算出来，比较最短路径)<br><img src="https://img-blog.csdnimg.cn/20191129135020214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>代码实现上面的走迷宫问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiGong</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//先创建一个二位数组，模拟迷宫</span></span><br><span class="line"><span class="comment">//地图</span></span><br><span class="line"><span class="keyword">int</span>[][] map = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>][<span class="number">7</span>];</span><br><span class="line"><span class="comment">//使用1表示墙</span></span><br><span class="line"><span class="comment">//上下全部置为1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">7</span>;i++)&#123;</span><br><span class="line">map[<span class="number">0</span>][i]=<span class="number">1</span>;map[<span class="number">7</span>][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左右全部置为1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">map[i][<span class="number">0</span>]=<span class="number">1</span>;map[i][<span class="number">6</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置挡板</span></span><br><span class="line">map[<span class="number">3</span>][<span class="number">1</span>]=<span class="number">1</span>;map[<span class="number">3</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//输出地图</span></span><br><span class="line">System.out.println(<span class="string">"地图情况"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">7</span>;j++)&#123;</span><br><span class="line">System.out.print(map[i][j]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用递归回溯给小球找路</span></span><br><span class="line">setWay(map, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">//输出新的地图，小球走过，并标识过的地图</span></span><br><span class="line">System.out.println(<span class="string">"小球走过并标识的地图"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">7</span>;j++)&#123;</span><br><span class="line">System.out.print(map[i][j]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用递归回溯来给小球找路</span></span><br><span class="line"><span class="comment">//说明</span></span><br><span class="line"><span class="comment">//1、map表示地图</span></span><br><span class="line"><span class="comment">//2、i，j表示从地图哪个为止开始出发（1，1）</span></span><br><span class="line"><span class="comment">//3、如果小球能到达map[6][5]位置，则说明通路找到</span></span><br><span class="line"><span class="comment">//4、约定：当map[i][j]为0表示该点没有走过，当为1表示墙，2表示通路可以走，3表示该为止已经走过，但是走不通</span></span><br><span class="line"><span class="comment">//5、在走迷宫时，必须先确定一个策略（方法）：下-&gt;右-&gt;上-&gt;左，如果该点走不通，再回溯</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map 表示地图</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i 从那个位置开始找</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> j 从那个位置开始找</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果找到通路，则返回true，否则返回false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">setWay</span><span class="params">(<span class="keyword">int</span>[][] map,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(map[<span class="number">6</span>][<span class="number">5</span>] == <span class="number">2</span>)&#123;<span class="comment">//通路已经找到</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(map[i][j] == <span class="number">0</span>)&#123;<span class="comment">//如果当前这个点没有走过</span></span><br><span class="line"><span class="comment">//按照策略 下-&gt;右-&gt;上-&gt;左 走</span></span><br><span class="line">map[i][j] = <span class="number">2</span>;<span class="comment">//假定该点是能走通的</span></span><br><span class="line"><span class="keyword">if</span>(setWay(map, i+<span class="number">1</span>, j))&#123;<span class="comment">//向下走</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(setWay(map, i, j+<span class="number">1</span>))&#123;<span class="comment">//向右走</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(setWay(map, i-<span class="number">1</span>, j))&#123;<span class="comment">//向上走</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(setWay(map, i, j-<span class="number">1</span>))&#123;<span class="comment">//向左走</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">map[i][j] = <span class="number">3</span>;<span class="comment">//该点走过了，根本走不通</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//如果map[i][j]!=0，可能是1 ，2，3</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归-八皇后问题（回溯算法）"><a href="#递归-八皇后问题（回溯算法）" class="headerlink" title="递归-八皇后问题（回溯算法）"></a>递归-八皇后问题（回溯算法）</h3><p><img src="https://img-blog.csdnimg.cn/201911291513085.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>八皇后问题：<br>&emsp;&emsp;八皇后问题，是一个古老而著名的问题，是回溯算法的典型案例。该问题是国际西洋棋棋手马克斯·贝瑟尔于1848年提出：在8*8格的国际象棋上摆放八个皇后，使其不能互相攻击，即：任意两个皇后都不能处于同一行，同一列或同一斜线上，问有多少种摆法。<br>八皇后问题算法思路分析：<br>[1]第一个皇后先放在第一行第一列<br>[2]第二个皇后放在第二行第一列、然后判断是否ok，如果不ok，继续放在第二列，第三列，依次把所有列都放完，找到一个合适的。<br>[3]继续第三个皇后，还是第一列，第二列…直到第八个皇后也能放在一个不冲突的位置，算是找到了一个正确解释。<br>[4]当得到一个正确解时，在栈回退到上一个栈时，就会开始回溯，即将第一个皇后，放到第一列的所有正确解，全部得到。<br>[5]然后回头继续第一个皇后放在第二列，后面继续循环执行1，2，3的步骤。<br>说明：理论上应该创建一个二维数组来表示棋盘，但实际上可以通过算法，用一个一维数组即可解决问题。arr[8]={0,4,7,5,2,6,1,3}//对应arr下标表示第几行，即第几个皇后，arr[i]=val 表示第i+1个皇后，方法第i+1行的val+1列。<br>八皇后的代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Queue8</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义一个max表示共有多少个皇后</span></span><br><span class="line"><span class="keyword">int</span> max = <span class="number">8</span>;</span><br><span class="line"><span class="comment">//定义一个数组array，保存皇后放置位置的结果，比如array = &#123;0,4,7,5,2,6,1,3&#125;</span></span><br><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[max];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Queue8 queue8 = <span class="keyword">new</span> Queue8();</span><br><span class="line">queue8.check(<span class="number">0</span>);</span><br><span class="line">System.out.println(<span class="string">"一共有"</span>+count+<span class="string">"种解法。"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编写一个方法，放置第n个皇后</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n == max)&#123;<span class="comment">//n=8,其实八个皇后就已然放好了</span></span><br><span class="line">print();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//依次放入皇后，并判断是否冲突</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;max;i++)&#123;</span><br><span class="line"><span class="comment">//先把当前这个皇后n，放到该行的第1列</span></span><br><span class="line">array[n] = i;</span><br><span class="line"><span class="comment">//判断当放置第n个皇后的第i列时，是否冲突</span></span><br><span class="line"><span class="keyword">if</span>(judge(n))&#123;<span class="comment">//不冲突</span></span><br><span class="line"><span class="comment">//接着放第n+1个皇后，即开始递归</span></span><br><span class="line">check(n+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果冲突，没有关系，就继续执行array[n] = i;即将第n个皇后放置在本行的后移的一个位置</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查看当我们放置第n个皇后时，就去检查该皇后是否和前面已经摆放的皇后冲突</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="comment">//说明：</span></span><br><span class="line"><span class="comment">//1、array[i]==array[n] 表示判断第n个皇后是否和前面的n-1个皇后在同一列</span></span><br><span class="line"><span class="comment">//2、Math.abs(n-i)==Math.abs(array[n]-array[i]) 表示判断第n个皇后和第i个皇后是否在同一斜线</span></span><br><span class="line"><span class="comment">//3、判断是否在同一行，没有必要判断，因为n每次在递增</span></span><br><span class="line"><span class="keyword">if</span>(array[i]==array[n] || Math.abs(n-i)==Math.abs(array[n]-array[i]))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写一个方法，可以将皇后摆放的位置输出</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">00</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">System.out.print(array[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">0 4 7 5 2 6 1 3 </span><br><span class="line">0 5 7 2 6 3 1 4 </span><br><span class="line">0 6 3 5 7 1 4 2 </span><br><span class="line">0 6 4 7 1 3 5 2 </span><br><span class="line">1 3 5 7 2 0 6 4 </span><br><span class="line">1 4 6 0 2 7 5 3 </span><br><span class="line">1 4 6 3 0 7 5 2 </span><br><span class="line">1 5 0 6 3 7 2 4 </span><br><span class="line">1 5 7 2 0 3 6 4 </span><br><span class="line">1 6 2 5 7 4 0 3 </span><br><span class="line">1 6 4 7 0 3 5 2 </span><br><span class="line">1 7 5 0 2 4 6 3 </span><br><span class="line">2 0 6 4 7 1 3 5 </span><br><span class="line">2 4 1 7 0 6 3 5 </span><br><span class="line">2 4 1 7 5 3 6 0 </span><br><span class="line">2 4 6 0 3 1 7 5 </span><br><span class="line">2 4 7 3 0 6 1 5 </span><br><span class="line">2 5 1 4 7 0 6 3 </span><br><span class="line">2 5 1 6 0 3 7 4 </span><br><span class="line">2 5 1 6 4 0 7 3 </span><br><span class="line">2 5 3 0 7 4 6 1 </span><br><span class="line">2 5 3 1 7 4 6 0 </span><br><span class="line">2 5 7 0 3 6 4 1 </span><br><span class="line">2 5 7 0 4 6 1 3 </span><br><span class="line">2 5 7 1 3 0 6 4 </span><br><span class="line">2 6 1 7 4 0 3 5 </span><br><span class="line">2 6 1 7 5 3 0 4 </span><br><span class="line">2 7 3 6 0 5 1 4 </span><br><span class="line">3 0 4 7 1 6 2 5 </span><br><span class="line">3 0 4 7 5 2 6 1 </span><br><span class="line">3 1 4 7 5 0 2 6 </span><br><span class="line">3 1 6 2 5 7 0 4 </span><br><span class="line">3 1 6 2 5 7 4 0 </span><br><span class="line">3 1 6 4 0 7 5 2 </span><br><span class="line">3 1 7 4 6 0 2 5 </span><br><span class="line">3 1 7 5 0 2 4 6 </span><br><span class="line">3 5 0 4 1 7 2 6 </span><br><span class="line">3 5 7 1 6 0 2 4 </span><br><span class="line">3 5 7 2 0 6 4 1 </span><br><span class="line">3 6 0 7 4 1 5 2 </span><br><span class="line">3 6 2 7 1 4 0 5 </span><br><span class="line">3 6 4 1 5 0 2 7 </span><br><span class="line">3 6 4 2 0 5 7 1 </span><br><span class="line">3 7 0 2 5 1 6 4 </span><br><span class="line">3 7 0 4 6 1 5 2 </span><br><span class="line">3 7 4 2 0 6 1 5 </span><br><span class="line">4 0 3 5 7 1 6 2 </span><br><span class="line">4 0 7 3 1 6 2 5 </span><br><span class="line">4 0 7 5 2 6 1 3 </span><br><span class="line">4 1 3 5 7 2 0 6 </span><br><span class="line">4 1 3 6 2 7 5 0 </span><br><span class="line">4 1 5 0 6 3 7 2 </span><br><span class="line">4 1 7 0 3 6 2 5 </span><br><span class="line">4 2 0 5 7 1 3 6 </span><br><span class="line">4 2 0 6 1 7 5 3 </span><br><span class="line">4 2 7 3 6 0 5 1 </span><br><span class="line">4 6 0 2 7 5 3 1 </span><br><span class="line">4 6 0 3 1 7 5 2 </span><br><span class="line">4 6 1 3 7 0 2 5 </span><br><span class="line">4 6 1 5 2 0 3 7 </span><br><span class="line">4 6 1 5 2 0 7 3 </span><br><span class="line">4 6 3 0 2 7 5 1 </span><br><span class="line">4 7 3 0 2 5 1 6 </span><br><span class="line">4 7 3 0 6 1 5 2 </span><br><span class="line">5 0 4 1 7 2 6 3 </span><br><span class="line">5 1 6 0 2 4 7 3 </span><br><span class="line">5 1 6 0 3 7 4 2 </span><br><span class="line">5 2 0 6 4 7 1 3 </span><br><span class="line">5 2 0 7 3 1 6 4 </span><br><span class="line">5 2 0 7 4 1 3 6 </span><br><span class="line">5 2 4 6 0 3 1 7 </span><br><span class="line">5 2 4 7 0 3 1 6 </span><br><span class="line">5 2 6 1 3 7 0 4 </span><br><span class="line">5 2 6 1 7 4 0 3 </span><br><span class="line">5 2 6 3 0 7 1 4 </span><br><span class="line">5 3 0 4 7 1 6 2 </span><br><span class="line">5 3 1 7 4 6 0 2 </span><br><span class="line">5 3 6 0 2 4 1 7 </span><br><span class="line">5 3 6 0 7 1 4 2 </span><br><span class="line">5 7 1 3 0 6 4 2 </span><br><span class="line">6 0 2 7 5 3 1 4 </span><br><span class="line">6 1 3 0 7 4 2 5 </span><br><span class="line">6 1 5 2 0 3 7 4 </span><br><span class="line">6 2 0 5 7 4 1 3 </span><br><span class="line">6 2 7 1 4 0 5 3 </span><br><span class="line">6 3 1 4 7 0 2 5 </span><br><span class="line">6 3 1 7 5 0 2 4 </span><br><span class="line">6 4 2 0 5 7 1 3 </span><br><span class="line">7 1 3 0 6 4 2 5 </span><br><span class="line">7 1 4 2 0 6 3 5 </span><br><span class="line">7 2 0 5 1 4 6 3 </span><br><span class="line">7 3 0 2 5 1 6 4 </span><br><span class="line">一共有92种解法。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;递归的概念：&lt;br&gt;&amp;emsp;&amp;emsp;简单的说，递归就是方法自己调用自己，每次调用时传入不同的变量，递归有助于编程者解决复杂的问题，同时可以让代码变得简洁。&lt;/p&gt;
&lt;h3 id=&quot;递归的调用机制&quot;&gt;&lt;a href=&quot;#递归的调用机制&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://Xiezhenyu98.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://Xiezhenyu98.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://Xiezhenyu98.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法-栈（[逆]波兰表达式）</title>
    <link href="https://Xiezhenyu98.github.io/2019/11/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E6%A0%88%EF%BC%88%5B%E9%80%86%5D%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%89/"/>
    <id>https://Xiezhenyu98.github.io/2019/11/24/数据结构和算法-栈（[逆]波兰表达式）/</id>
    <published>2019-11-24T11:08:45.539Z</published>
    <updated>2019-11-24T11:09:46.363Z</updated>
    
    <content type="html"><![CDATA[<p>什么是栈？<br>[1]栈的英文名为Stack<br>[2]栈是一个先入后出（FILO-Firest In Last Out）的有序列表<br>[3]栈(stack)是限制线性表中元素的插入和删除只能在线性表的同一端进行的一种特殊线性表。允许插入和删除的一端，为变化的一端，称为栈顶，另一端为固定的一端，称为栈底。<br>[4]根据栈的定义可知，最先放入栈的元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除，最先放入的元素最后删除。</p><h3 id="出栈和入栈"><a href="#出栈和入栈" class="headerlink" title="出栈和入栈"></a>出栈和入栈</h3><p>入栈（push）：<br><img src="https://img-blog.csdnimg.cn/20191124133134264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>出栈（pop）：<br><img src="https://img-blog.csdnimg.cn/20191124134225820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="栈的应用场景"><a href="#栈的应用场景" class="headerlink" title="栈的应用场景"></a>栈的应用场景</h3><p>[1]子程序的调用：在跳往子程序前，会先将一下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以回到原来的程序中。<br>[2]处理递归调用：和子程序的调用类似，只是除了存储下一个指令的地址外，也将参数、区域变量等数据存入堆栈中。<br>[3]表达式的转换与求值（实际解决）。<br>[4]二叉树的遍历。<br>[5]图形的深度优先（depth-first）搜索算法。</p><h3 id="栈的快速入门"><a href="#栈的快速入门" class="headerlink" title="栈的快速入门"></a>栈的快速入门</h3><p>用数组模拟栈的使用，由于栈是一种有序列表，当然可以使用数组的结构来存储栈的数据内容。<br>思路分析：<br>[1]使用数组模拟栈<br>[2]定义一个top表示栈顶，初始值为-1<br>[3]入栈的操作，当有数据加入到栈时，top++；stack[top]=data；<br>[4]出栈的操作，int value=stack[top];top–,return value;<br>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个类表示栈结构</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayStack</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize;<span class="comment">//栈的大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] stack;<span class="comment">//数组，模拟栈，数据就放在该数组中</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> top = -<span class="number">1</span>;<span class="comment">//栈顶，初始化为-1</span></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">(<span class="keyword">int</span> maxSize)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">stack = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>.maxSize];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//栈满</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> top == maxSize-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//栈空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> top == -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="comment">//先判断栈是否满</span></span><br><span class="line"><span class="keyword">if</span>(isFull())&#123;</span><br><span class="line">System.out.println(<span class="string">"栈满"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">top++;</span><br><span class="line">stack[top] = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出栈,将栈顶的数组返回</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//先判断栈是否空</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line"><span class="comment">//抛出异常</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"栈空，没有数据~"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> value = stack[top];</span><br><span class="line">top--;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示栈的情况(遍历栈),遍历时，需要从栈顶开始显示数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">System.out.println(<span class="string">"栈空~"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = top;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">System.out.printf(<span class="string">"stack[%d]=%d\n"</span>,i,stack[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈实现综合计算器（中缀表达式）"><a href="#栈实现综合计算器（中缀表达式）" class="headerlink" title="栈实现综合计算器（中缀表达式）"></a>栈实现综合计算器（中缀表达式）</h3><ul><li>中缀表达式：<br>[1]中缀表达式就是常见的运算表达式：如(3+4)X5-6<br>[2]中缀表达式的求值是我们人最熟悉的，但是对于计算机来说却不好操作，因此在计算结果时，往往会将中缀表达式转换成其它表达式来操作</li><li>是用栈完成表达式的计算思路：<br>[1]通过一个index值（索引），来遍历我们的表达式<br>[2]创建两个栈，一个存放数值的栈，一个存放符号的栈<br>[3]如果发现是一个数字，就直接放入数栈<br>[4]如果发现的是一个符号，就分如下情况<br>（1）如果发现当前的符号栈为空，就直接入栈<br>（2）如果符号栈有操作符，就进行比较，如果当前的操作符的有限级小于或者等于栈中的操作符，就需要从数栈栈pop出两个数，在从符号栈中pop出一个符号，进行运算，将得到的结果，入数栈，然后将当前的操作符入符号栈<br>（3）如果当前的操作符的优先级大于栈中的操作符，就直接入符号栈<br>[5]当表达式扫描完毕，就顺序的从数栈和符号栈中pop出相应的数和符号并运行。<br>[6]最后在数栈中只有一个数字，就是表达式的结果。</li><li>代码：<br>栈结构：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayStack2</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize;<span class="comment">//栈的大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] stack;<span class="comment">//数组，模拟栈，数据就放在该数组中</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> top = -<span class="number">1</span>;<span class="comment">//栈顶，初始化为-1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayStack2</span><span class="params">(<span class="keyword">int</span> maxSize)</span></span>&#123;<span class="comment">//构造器</span></span><br><span class="line"><span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">stack = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>.maxSize];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查看栈顶的值，不是真正的出栈</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> stack[top];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;<span class="comment">//栈满</span></span><br><span class="line"><span class="keyword">return</span> top == maxSize-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;<span class="comment">//栈空</span></span><br><span class="line"><span class="keyword">return</span> top == -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;<span class="comment">//入栈</span></span><br><span class="line"><span class="comment">//先判断栈是否满</span></span><br><span class="line"><span class="keyword">if</span>(isFull())&#123;</span><br><span class="line">System.out.println(<span class="string">"栈满"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">top++;</span><br><span class="line">stack[top] = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;<span class="comment">//出栈,将栈顶的数组返回</span></span><br><span class="line"><span class="comment">//先判断栈是否空</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line"><span class="comment">//抛出异常</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"栈空，没有数据~"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> value = stack[top];</span><br><span class="line">top--;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>&#123;<span class="comment">//显示栈的情况(遍历栈),遍历时，需要从栈顶开始显示数据</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">System.out.println(<span class="string">"栈空~"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = top;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">System.out.printf(<span class="string">"stack[%d]=%d\n"</span>,i,stack[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回运算符的优先级，优先级使用数字表示，数字越大优先级越高</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">priority</span><span class="params">(<span class="keyword">int</span> oper)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(oper == <span class="string">'*'</span> || oper == <span class="string">'/'</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(oper == <span class="string">'+'</span> || oper == <span class="string">'-'</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//表达式只有+-*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是不是一个运算符</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOper</span><span class="params">(<span class="keyword">char</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> val == <span class="string">'+'</span> || val == <span class="string">'-'</span> || val == <span class="string">'*'</span> || val == <span class="string">'/'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2,<span class="keyword">int</span> oper)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;<span class="comment">//res用于存放计算结果</span></span><br><span class="line"><span class="keyword">switch</span> (oper) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">res = num1 + num2;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">res = num2 - num1;<span class="comment">//注意顺序</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">res = num1 * num2;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">res = num2 / num1;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//表达式</span></span><br><span class="line">String expression = <span class="string">"3+2*6-2"</span>;</span><br><span class="line"><span class="comment">//创建两个栈，一个是数栈，一个是符号栈</span></span><br><span class="line">ArrayStack2 numStack = <span class="keyword">new</span> ArrayStack2(<span class="number">10</span>);</span><br><span class="line">ArrayStack2 operStack = <span class="keyword">new</span> ArrayStack2(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//定义相关变量</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;<span class="comment">//用于扫描</span></span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> num2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> oper = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">String keepNum=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">char</span> ch = <span class="string">' '</span>;<span class="comment">//将每次扫描得到的结果保存到ch中</span></span><br><span class="line"><span class="comment">//开始while循环扫描</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//依次得到expression的每一个字符</span></span><br><span class="line">ch = expression.substring(index, index+<span class="number">1</span>).charAt(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//判断ch是什么，然后做相应的处理</span></span><br><span class="line"><span class="keyword">if</span>(operStack.isOper(ch))&#123;<span class="comment">//如果是运算符</span></span><br><span class="line"><span class="comment">//判断当前的符号栈是否为空</span></span><br><span class="line"><span class="keyword">if</span>(!operStack.isEmpty())&#123;</span><br><span class="line"><span class="comment">//如果符号栈有操作符，就进行比较，如果当前的操作符的有限级小于或者等于栈中的操作符</span></span><br><span class="line"><span class="comment">//就需要从数栈栈pop出两个数，在从符号栈中pop出一个符号，进行运算</span></span><br><span class="line"><span class="comment">//将得到的结果，入数栈，然后将当前的操作符入符号栈</span></span><br><span class="line"><span class="keyword">if</span>(operStack.priority(ch) &lt;= operStack.priority(operStack.peek()))&#123;</span><br><span class="line">num1 = numStack.pop();</span><br><span class="line">num2 = numStack.pop();</span><br><span class="line">oper = operStack.pop();</span><br><span class="line">res = numStack.cal(num1, num2, oper);</span><br><span class="line"><span class="comment">//把运算的结果入数栈</span></span><br><span class="line">numStack.push(res);</span><br><span class="line"><span class="comment">//然后把当前的操作符入符号栈</span></span><br><span class="line">operStack.push(ch);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//如果当前的操作符的优先级大于栈中的操作符，就直接入符号栈</span></span><br><span class="line">operStack.push(ch);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//如果为空，直接入栈</span></span><br><span class="line">operStack.push(ch);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//如果是数，则直接入数栈</span></span><br><span class="line"><span class="comment">//当处理多为数时，不能发现一个数就直接就入栈，因为可能是多位数】</span></span><br><span class="line"><span class="comment">//在处理数时，需要向expression的表达式的index后再看一位，如果是数就进行扫描，如果是符号就入栈</span></span><br><span class="line"><span class="comment">//因此需要定义一个变量 字符串，用于拼接</span></span><br><span class="line">keepNum += ch;</span><br><span class="line"><span class="comment">//如果ch已经是expression的最后一位，就直接入栈</span></span><br><span class="line"><span class="keyword">if</span>(index == expression.length() - <span class="number">1</span>)&#123;</span><br><span class="line">numStack.push(Integer.parseInt(keepNum));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//判断字符串是不是数字，如果是数字就继续扫描，如果是运算符就入栈</span></span><br><span class="line"><span class="keyword">if</span>(operStack.isOper(expression.substring(index+<span class="number">1</span>,index+<span class="number">2</span>).charAt(<span class="number">0</span>)))&#123;</span><br><span class="line"><span class="comment">//如果后以为是运算符，则入栈</span></span><br><span class="line">numStack.push(Integer.parseInt(keepNum));</span><br><span class="line"><span class="comment">//这里keepNum要置空</span></span><br><span class="line">keepNum=<span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//让index + 1，并判断是否扫描到expression</span></span><br><span class="line">index++;</span><br><span class="line"><span class="keyword">if</span>(index &gt;= expression.length())&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当表达式扫描完毕，就顺序的从数栈和符号栈中pop出相应的数和符号并运行。</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//如果符号栈为空，则计算到最后的结果，数栈只有一个数字，这个就是结果</span></span><br><span class="line"><span class="keyword">if</span>(operStack.isEmpty())<span class="keyword">break</span>;</span><br><span class="line">num1 = numStack.pop();</span><br><span class="line">num2 = numStack.pop();</span><br><span class="line">oper = operStack.pop();</span><br><span class="line">res = numStack.cal(num1, num2, oper);</span><br><span class="line">numStack.push(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将数栈最后的结果pop出来</span></span><br><span class="line">System.out.printf(<span class="string">"表达式%s = %d"</span>,expression,numStack.pop());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表达式3+2*6-2 = 13</span><br></pre></td></tr></table></figure><h3 id="前缀表达式（波兰表达式）"><a href="#前缀表达式（波兰表达式）" class="headerlink" title="前缀表达式（波兰表达式）"></a>前缀表达式（波兰表达式）</h3><ul><li>前缀表达式的计算机求值：<br>&emsp;&emsp;从右向左扫描表达式，遇到数字时，将数字压入栈中，遇到运算符时，弹出栈顶的两个数，用运算符对他们做相应的计算（栈顶元素和次顶元素），并将结果入栈；重复上述过程知道表达式最左端，最后运算得出的值即为表达式的结果。</li><li>例如：(3+4)X5-6对应的前缀表达式就是- X + 3 4 5 6 ,针对前缀表达式求值步骤如下：<br>[1]从右至左扫描，将6、5、4压入堆栈。<br>[2]遇到+运算符，因此弹出3和4（3为栈顶元素，4为次顶元素），计算3+4的值，得7，再将7入栈。<br>[3]接下来是X运算符，因此弹出7和5，计算出7X5=35，将35入栈。<br>[4]最后是-运算符，计算出35-6的值，即29.由此得出最终结果。<h3 id="后缀表达式（逆波兰表达式）"><a href="#后缀表达式（逆波兰表达式）" class="headerlink" title="后缀表达式（逆波兰表达式）"></a>后缀表达式（逆波兰表达式）</h3></li><li>后缀表达式<br>[1]后缀表达式又称逆波兰表达式，与前缀表达式相似，只是运算符位于操作数之后<br>[2]举例说明：(3+4)X5-6对应的后缀表达式就是3 4 + 5 X 6 -<br>[3]再比如<br>a+b 对应的后缀表达式为  a b +<br>a+(b-c) 对应的后缀表达式为  a b c - +<br>a+(b-c)<em>d 对应的后缀表达式为 a b c - d * +<br>a+d</em>(b-c) 对应的后缀表达式为 a d b c - * +<br>a=1+3 对应的后缀表达式为 a 1 3 + =</li><li>后缀表达式的计算机求值<br>从左向右扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（次顶元素和栈顶元素），并将结果入栈；重复上述过程知道表达式最右端，最后运算符得出的值即为表达式的结果。</li><li>例如：(3+4)X5-6对应的后缀表达式就是3 4 + 5 X 6 -，针对后缀表达式求值步骤如下：<br>[1]从左向右扫描，将3和4压入堆栈；<br>[2]遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈；<br>[3]将5入栈；<br>[4]接下来是X运算符，因此弹出5和7，计算7X5=35，将35入栈;<br>[5]将6入栈；<br>[6]最后是-运算符，计算出35-6的值，即29，由此得出最终结果。<h3 id="逆波兰计算器代码实现"><a href="#逆波兰计算器代码实现" class="headerlink" title="逆波兰计算器代码实现"></a>逆波兰计算器代码实现</h3></li><li>逆波兰计算器，完成任务如下：<br>[1]输入一个逆波兰表达式(后缀表达式)，使用栈（Stack），计算其结果<br>[2]支持小括号和多位数整数</li><li>思路：<br>(3+4)X5-6对应的后缀表达式就是3 4 + 5 X 6 -，针对后缀表达式求值步骤如下：<br>[1]从左向右扫描，将3和4压入堆栈；<br>[2]遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈；<br>[3]将5入栈；<br>[4]接下来是X运算符，因此弹出5和7，计算7X5=35，将35入栈;<br>[5]将6入栈；<br>[6]最后是-运算符，计算出35-6的值，即29，由此得出最终结果。</li><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PolandNotation</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义一个逆波兰表达式</span></span><br><span class="line"><span class="comment">//(3+4)x5-6 =&gt; 3 4 + 5 x 6 -</span></span><br><span class="line"><span class="comment">//为了方便，逆波兰表达式中的数字和符号使用空格隔开</span></span><br><span class="line">String suffixExpression = <span class="string">"3 4 + 5 * 6 -"</span>;</span><br><span class="line"><span class="comment">//思路</span></span><br><span class="line"><span class="comment">//1、向将"3 4 + 5 x 6 -" =&gt; 放入ArrayList中</span></span><br><span class="line"><span class="comment">//2、将ArrayList传递给一个方法，遍历ArrayList 配合栈完成计算</span></span><br><span class="line">List&lt;String&gt; list = getListString(suffixExpression);</span><br><span class="line">System.out.println(<span class="string">"rpnList="</span>+list);</span><br><span class="line"><span class="keyword">int</span> res = calculate(list);</span><br><span class="line">System.out.println(<span class="string">"计算的结果为="</span>+res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将一个逆波兰表达式，依次将数据和运算符放入到ArrayList中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getListString</span><span class="params">(String suffixExpression)</span></span>&#123;</span><br><span class="line"><span class="comment">//将suffixExpression分割</span></span><br><span class="line">String[] split = suffixExpression.split(<span class="string">" "</span>);</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="keyword">for</span>(String ele : split)&#123;</span><br><span class="line">list.add(ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 完成对逆波兰表达式的运算</span></span><br><span class="line"><span class="comment"> * (3+4)X5-6对应的后缀表达式就是3 4 + 5 X 6 -，针对后缀表达式求值步骤如下：</span></span><br><span class="line"><span class="comment"> * [1]从左向右扫描，将3和4压入堆栈；</span></span><br><span class="line"><span class="comment"> * [2]遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈；</span></span><br><span class="line"><span class="comment"> * [3]将5入栈；</span></span><br><span class="line"><span class="comment"> * [4]接下来是X运算符，因此弹出5和7，计算7X5=35，将35入栈;</span></span><br><span class="line"><span class="comment"> * [5]将6入栈；</span></span><br><span class="line"><span class="comment"> * [6]最后是-运算符，计算出35-6的值，即29，由此得出最终结果。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(List&lt;String&gt; ls)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建一个栈,只需要一个栈即可</span></span><br><span class="line">Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;String&gt;();</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">for</span>(String item : ls)&#123;</span><br><span class="line"><span class="comment">//这里使用一个正则表达式取出数</span></span><br><span class="line"><span class="keyword">if</span>(item.matches(<span class="string">"\\d+"</span>))&#123;<span class="comment">//匹配的是多位数</span></span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line">stack.push(item);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//pop出两个数，并运算，再入栈</span></span><br><span class="line"><span class="keyword">int</span> num2 = Integer.parseInt(stack.pop());</span><br><span class="line"><span class="keyword">int</span> num1 = Integer.parseInt(stack.pop());</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(item.equals(<span class="string">"+"</span>))&#123;</span><br><span class="line">res = num1 + num2;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">"-"</span>))&#123;</span><br><span class="line">res = num1 - num2;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">"*"</span>))&#123;</span><br><span class="line">res = num1 * num2;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">"/"</span>))&#123;</span><br><span class="line">res = num1 / num2;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"运算符有误"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把res入栈</span></span><br><span class="line">stack.push(res+<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后留在stack中的数据就是运算结果</span></span><br><span class="line"><span class="keyword">return</span> Integer.parseInt(stack.pop());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpnList=[3, 4, +, 5, *, 6, -]</span><br><span class="line">计算的结果为=29</span><br></pre></td></tr></table></figure><h3 id="中缀表达式转换为后缀表达式"><a href="#中缀表达式转换为后缀表达式" class="headerlink" title="中缀表达式转换为后缀表达式"></a>中缀表达式转换为后缀表达式</h3><p>&emsp;&emsp;从上面的案例可以看出，后缀表达式适合计算机进行运算，但是人却不太容易写出来，尤其是表达式很长的情况下，因此在开发中，我们需要将中缀表达式转成后缀表达式。</p><ul><li>具体步骤如下：<br>[1]初始化两个栈：运算符栈s1和储存中间结果的栈s2；<br>[2]从左向右扫描中缀表达式；<br>[3]遇到操作数时，将其压s2；<br>[4]遇到运算符时，比较其与s1栈顶运算符的优先级：<br>（1）如果s1为空，或栈顶运算符为左括号”（“，则直接将此运算符入栈；<br>（2）否则，若优先级比栈顶运算符的高，也将元算符压入s1；<br>（3）否则，将s1栈顶的运算符弹出并压入到s2中，再次转到(4-1)与s1中新的栈顶运算符相比较。<br>[5]遇到括号时：<br>（1）如果是左括号“（”，则直接压入s1；<br>（2）如果是右括号“）”，则异常弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃。<br>[6]重复步骤2-5，直到表达式的最右边；<br>[7]将s1中剩余的运算符依次弹出并压入s2；<br>[8]依次弹出s2中的元素并输出，结果的逆序即为中缀表达式对应的后缀表达式。</li><li>例如：1+((2+3)X4)-5 其转换过程如下表：<br><img src="https://img-blog.csdnimg.cn/2019112416542788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>代码实现：<br>编写一个类Operation 实现可以返回一个运算符对应的优先级数字<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写一个类Operration 可以返回一个运算符对应的优先级</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Operation</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ADD = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> SUB = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MUL = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> DIV = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//写一个方法，返回一个优先级数字</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">(String operation)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (operation) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">result = ADD;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">result = SUB;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">result = MUL;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">result = DIV;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>书写可以将一个中缀表达式字符串转换成字符然后返回List<string>的方法</string></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将中缀表达式转换成对应的List</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">toInfixExpressionList</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line"><span class="comment">//定义一个list，存放中缀表达式对应的内容</span></span><br><span class="line">List&lt;String&gt; ls = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;<span class="comment">//相当于一个指针，用于遍历中缀表达式字符串</span></span><br><span class="line">String str;<span class="comment">//做多为数的拼接</span></span><br><span class="line"><span class="keyword">char</span> c;<span class="comment">//每对应一个字符，就放入c中</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="comment">//如果c是一个非数字，就需要加入到ls</span></span><br><span class="line"><span class="keyword">if</span>((c=s.charAt(i))&lt;<span class="number">48</span>||(c=s.charAt(i))&gt;<span class="number">57</span>)&#123;</span><br><span class="line">ls.add(<span class="string">""</span>+c);</span><br><span class="line">i++;<span class="comment">//i需要后移</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//如果c是一个数字，需要考虑多为数的问题</span></span><br><span class="line">str = <span class="string">""</span>;<span class="comment">//先将str置成空</span></span><br><span class="line"><span class="keyword">while</span>(i &lt; s.length() &amp;&amp; (c=s.charAt(i))&gt;=<span class="number">48</span> &amp;&amp; (c=s.charAt(i))&lt;=<span class="number">57</span>)&#123;</span><br><span class="line">str +=c;<span class="comment">//拼接</span></span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">ls.add(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">while</span>(i&lt;s.length());</span><br><span class="line"><span class="keyword">return</span> ls;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>书写一个可以将中缀表达式对应的List<string>转换成后缀表达式对应的List<string>的方法</string></string></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将中缀表达式转换成对应的后缀表达式</span></span><br><span class="line"><span class="comment">//即ArrayList[1,+,(,(,2,+,3,),*,4,),-,5] =&gt; ArrayList[1,2,3,+,4,*,+,5,-]</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">parseSuffixExpressionList</span><span class="params">(List&lt;String&gt; ls)</span></span>&#123;</span><br><span class="line"><span class="comment">//定义两个栈</span></span><br><span class="line">Stack&lt;String&gt; s1 = <span class="keyword">new</span> Stack&lt;String&gt;();<span class="comment">// 符号栈</span></span><br><span class="line"><span class="comment">//因为s2这个栈，在转换过程中，没有pop操错，后面还要逆序输出，因此可以直接使用List替代</span></span><br><span class="line">List&lt;String&gt; s2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">//存储中间结果的List s2</span></span><br><span class="line"><span class="comment">//遍历ls</span></span><br><span class="line"><span class="keyword">for</span>(String item : ls)&#123;</span><br><span class="line"><span class="comment">//如果是一个数，加入s2</span></span><br><span class="line"><span class="keyword">if</span>(item.matches(<span class="string">"\\d+"</span>))&#123;</span><br><span class="line">s2.add(item);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">"("</span>))&#123;</span><br><span class="line">s1.push(item);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">")"</span>))&#123;</span><br><span class="line"><span class="comment">//如果是右括号“）”，则异常弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃。</span></span><br><span class="line"><span class="keyword">while</span>(!s1.peek().equals(<span class="string">"("</span>))&#123;</span><br><span class="line">s2.add(s1.pop());</span><br><span class="line">&#125;</span><br><span class="line">s1.pop();<span class="comment">//将这个小括号(弹出s1栈，消除小括号</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//当item的优先级小于等于s1栈顶运算符的优先级，将s1栈顶的运算符弹出并加入到s2中，再次转到(4.1)与s1中新的栈顶运算符相比较</span></span><br><span class="line"><span class="keyword">while</span>(s1.size() != <span class="number">0</span> &amp;&amp; Operation.getValue(s1.peek()) &gt;= Operation.getValue(item))&#123;</span><br><span class="line">s2.add(s1.pop());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//还需要将item压入栈中</span></span><br><span class="line">s1.push(item);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将s1中剩余的运算符依次弹出并加入s2</span></span><br><span class="line"><span class="keyword">while</span>(s1.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">s2.add(s1.pop());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s2; <span class="comment">//注意因为是存放到List，因此按顺序输出就是对应的逆波兰表达式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//完成将一个中缀表达式转换成后缀表达式的功能</span></span><br><span class="line"><span class="comment">//说明</span></span><br><span class="line"><span class="comment">//1、1+((3+3)*4)-5 转成 1 2 3 + 4 * + 5 -</span></span><br><span class="line"><span class="comment">//2、因为直接对一个字符串进行操作，不方便，因此先将“1+((3+3)*4)-5”转成中缀表达式对应的List</span></span><br><span class="line"><span class="comment">//   即“1+((3+3)*4)-5” =&gt; ArrayList[1,+,(,(,2,+,3,),*,4,),-,5]</span></span><br><span class="line"><span class="comment">//3、得到的中缀表达式对应的List转成一个后缀表达式的List</span></span><br><span class="line"><span class="comment">//  即ArrayList[1,+,(,(,2,+,3,),*,4,),-,5] =&gt; ArrayList[1,2,3,+,4,*,+,5,-]</span></span><br><span class="line">String expreession = <span class="string">"1+((2+3)*4)-5"</span>;</span><br><span class="line">List&lt;String&gt; infixExpressionList = toInfixExpressionList(expreession);</span><br><span class="line">System.out.println(<span class="string">"中缀表达式对应的List："</span>+infixExpressionList);</span><br><span class="line">List&lt;String&gt; parseSuffixExpressionList = parseSuffixExpressionList(infixExpressionList);</span><br><span class="line">System.out.println(<span class="string">"后缀表达式对应的List："</span>+parseSuffixExpressionList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">中缀表达式对应的List：[1, +, (, (, 2, +, 3, ), *, 4, ), -, 5]</span><br><span class="line">后缀表达式对应的List：[1, 2, 3, +, 4, *, +, 5, -]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;什么是栈？&lt;br&gt;[1]栈的英文名为Stack&lt;br&gt;[2]栈是一个先入后出（FILO-Firest In Last Out）的有序列表&lt;br&gt;[3]栈(stack)是限制线性表中元素的插入和删除只能在线性表的同一端进行的一种特殊线性表。允许插入和删除的一端，为变化的一端，
      
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://Xiezhenyu98.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://Xiezhenyu98.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://Xiezhenyu98.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法-单向环形链表(约瑟夫环问题)</title>
    <link href="https://Xiezhenyu98.github.io/2019/11/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E5%8D%95%E5%90%91%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8(%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E9%97%AE%E9%A2%98)/"/>
    <id>https://Xiezhenyu98.github.io/2019/11/23/数据结构和算法-单向环形链表(约瑟夫环问题)/</id>
    <published>2019-11-23T12:56:37.078Z</published>
    <updated>2019-11-23T12:57:42.146Z</updated>
    
    <content type="html"><![CDATA[<p>Josephu（约瑟夫、约瑟夫环）问题：<br>设编号为1，2，…，n的n个人围坐一圈，约定的编号为k（1&lt;=k&lt;=n）的人从1开始报数，数到的那个人又出列，依此类推，知道所有人出列为止，由此产生一个出队编号的序列。<br>用一个不带头节点的循环链表来处理Josepho问题：<br>先构成一个有n个节点的单循环链表，然后由k节点起从1开始计数，计到m时，对应节点从链表中删除，直到最后一个节点从链表中删除算法结束。</p><h3 id="单向环形链表的介绍"><a href="#单向环形链表的介绍" class="headerlink" title="单向环形链表的介绍"></a>单向环形链表的介绍</h3><p>链表形成一个环状<br><img src="https://img-blog.csdnimg.cn/20191123193952945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="约瑟夫问题的图释"><a href="#约瑟夫问题的图释" class="headerlink" title="约瑟夫问题的图释"></a>约瑟夫问题的图释</h3><p>Josephu（约瑟夫、约瑟夫环）问题：<br>设编号为1，2，…，n的n个人围坐一圈，约定的编号为k（1&lt;=k&lt;=n）的人从1开始报数，数到的那个人又出列，依此类推，知道所有人出列为止，由此产生一个出队编号的序列。<br><img src="https://img-blog.csdnimg.cn/20191123194651111.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>以上图的出队顺序为：<br>2-&gt;4-&gt;1-&gt;5-&gt;3</p><h3 id="约瑟夫问题的代码实现"><a href="#约瑟夫问题的代码实现" class="headerlink" title="约瑟夫问题的代码实现"></a>约瑟夫问题的代码实现</h3><p>思路：<br>构建一个环形链表<br>[1]创建第一个节点，让一个指针(变量)first指向该节点，并形成一个环形<br>[2]后面当我们每创建一个节点，就把该节点，加入到已有的环形链表中即可<br>遍历环形链表<br>[1]先让一个辅助指针(变量)curBoy，指向first节点<br>[2]然后通过一个while循环遍历该环形链表即可<br>[3]当curBoy.next == first 遍历结束<br>代码：<br>书写节点类Boy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个Boy类，表示一个节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> no;<span class="comment">//编号</span></span><br><span class="line"><span class="keyword">private</span> Boy next;<span class="comment">//指向下一个节点，默认为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Boy</span><span class="params">(<span class="keyword">int</span> no)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no=no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNo</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Boy <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Boy next)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个环形单向链表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个环形的单向链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleSingkeLinkedList</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建一个first节点，当前没有编号</span></span><br><span class="line"><span class="keyword">private</span> Boy first = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//添加小孩节点，构成一个环形的链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBoy</span><span class="params">(<span class="keyword">int</span> nums)</span></span>&#123;</span><br><span class="line"><span class="comment">//nums 做一个数据校验</span></span><br><span class="line"><span class="keyword">if</span>(nums&lt;<span class="number">1</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"nums的值不正确"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Boy curBoy = <span class="keyword">null</span>;<span class="comment">//辅助指针，帮助构建环形链表</span></span><br><span class="line"><span class="comment">//使用for循环创建环形链表</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= nums; i++) &#123;</span><br><span class="line"><span class="comment">//根据编号创建小孩节点</span></span><br><span class="line">Boy boy = <span class="keyword">new</span> Boy(i);</span><br><span class="line"><span class="comment">//如果是第一个小孩</span></span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>) &#123;</span><br><span class="line">first = boy;</span><br><span class="line">first.setNext(first);<span class="comment">//构成环</span></span><br><span class="line">curBoy = first;<span class="comment">//让curBoy指向第一个小孩</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">curBoy.setNext(boy);</span><br><span class="line">boy.setNext(first);</span><br><span class="line">curBoy = boy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历当前环形链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showBoy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断链表是否为空</span></span><br><span class="line"><span class="keyword">if</span>(first==<span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"链表为空！"</span>);<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为first不能动，因此仍然使用辅助指针完成遍历</span></span><br><span class="line">Boy curBoy = first;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">System.out.printf(<span class="string">"小孩的编号%d\n"</span>,curBoy.getNo());</span><br><span class="line"><span class="keyword">if</span>(curBoy.getNext()==first)<span class="keyword">break</span>;<span class="comment">//说明已经遍历完毕</span></span><br><span class="line">curBoy = curBoy.getNext();<span class="comment">//curBoy后移</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据用户的输入，生成一个小孩出圈的顺序<br>[1]需要创建一个辅助指针（变量）helper，事先应该指向环形链表的最后这个节点。<br>[2]小孩报数前，先让first和helper移动k-1次<br>[2]当小孩报数时，让first和helper同时移动m-1次<br>[3]这时就可以将first指向的小孩节点出圈<br>first=first.next<br>helper.next=first<br>[4]原来first指向的这个节点就没有任何引用了<br><img src="https://img-blog.csdnimg.cn/20191123203638470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>向环形单向链表类CircleSingkeLinkedList中添加出圈这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据用户的输入，计算小孩出圈的顺序</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> startNo 表示从第几个小孩开始数数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> countNum 表示数几下</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 表示最初有多少小孩在圈中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countBoy</span><span class="params">(<span class="keyword">int</span> startNo,<span class="keyword">int</span> countNum,<span class="keyword">int</span> nums)</span> </span>&#123;</span><br><span class="line"><span class="comment">//先对数据进行校验</span></span><br><span class="line"><span class="keyword">if</span>(first==<span class="keyword">null</span>||startNo&lt;<span class="number">1</span>||startNo&gt;nums)&#123;</span><br><span class="line">System.out.println(<span class="string">"参数输入有误！"</span>);<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个辅助指针，帮助完成小孩出圈</span></span><br><span class="line">Boy helper = first;</span><br><span class="line"><span class="comment">//需要创建一个辅助指针（变量）helper，事先应该指向环形链表的最后这个节点。</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(helper.getNext() == first) &#123; <span class="comment">//说明helper指向最后小孩节点</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">helper = helper.getNext();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//小孩报数前，先让first和helper移动k-1次</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;startNo - <span class="number">1</span>;j++)&#123;</span><br><span class="line">first = first.getNext();</span><br><span class="line">helper = helper.getNext();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当小孩报数时，让first和helper同时移动m-1次,然后出圈</span></span><br><span class="line"><span class="comment">//循环操作，知道圈中只有一个节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(helper == first)<span class="keyword">break</span>;<span class="comment">//说明圈中只有一个节点</span></span><br><span class="line"><span class="comment">//让first和helper同时移动countNum-1次,然后出圈</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;countNum-<span class="number">1</span>;j++) &#123;</span><br><span class="line">first = first.getNext();</span><br><span class="line">helper = helper.getNext();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这是first指向的这个小孩就是要出圈的小孩节点</span></span><br><span class="line">System.out.printf(<span class="string">"小孩%d出圈\n"</span>,first.getNo());</span><br><span class="line"><span class="comment">//这时将first指向的小孩节点出圈</span></span><br><span class="line">first = first.getNext();</span><br><span class="line">helper.setNext(first);</span><br><span class="line">&#125;</span><br><span class="line">System.out.printf(<span class="string">"最后留在圈中的小孩编号%d\n"</span>,first.getNo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">CircleSingkeLinkedList c = <span class="keyword">new</span> CircleSingkeLinkedList();</span><br><span class="line">c.addBoy(<span class="number">5</span>);</span><br><span class="line">c.countBoy(<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">小孩2出圈</span><br><span class="line">小孩4出圈</span><br><span class="line">小孩1出圈</span><br><span class="line">小孩5出圈</span><br><span class="line">最后留在圈中的小孩编号3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Josephu（约瑟夫、约瑟夫环）问题：&lt;br&gt;设编号为1，2，…，n的n个人围坐一圈，约定的编号为k（1&amp;lt;=k&amp;lt;=n）的人从1开始报数，数到的那个人又出列，依此类推，知道所有人出列为止，由此产生一个出队编号的序列。&lt;br&gt;用一个不带头节点的循环链表来处理Jos
      
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://Xiezhenyu98.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://Xiezhenyu98.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://Xiezhenyu98.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法-双向链表</title>
    <link href="https://Xiezhenyu98.github.io/2019/11/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    <id>https://Xiezhenyu98.github.io/2019/11/23/数据结构和算法-双向链表/</id>
    <published>2019-11-23T09:51:56.565Z</published>
    <updated>2019-11-23T09:52:42.026Z</updated>
    
    <content type="html"><![CDATA[<p>在学习单向链表的时候，使用带head头的双向链表实现-水浒英雄排行榜管理单项向链表的缺点分析：<br>[1]单向链表，查找的方向只能是一个方向，而双向链表可以向前或者向后查找。<br>[2]单向链表不能自我删除，需要靠辅助节点，而双向链表，则可以自我删除，所以前面单链表删除节点时，总是找到temp，temp是代删除节点的前一个节点。<br><img src="https://img-blog.csdnimg.cn/20191123164024531.png" alt="在这里插入图片描述"><br>分析 双向链表的遍历，添加，修改，删除的操作思路==》代码实现<br>[1]遍历方式和单链表一样，只是可以向前，也可以向后<br>[2]添加（默认添加到双向链表的最后这个节点）<br>（1）先找到双向链表的最后这个节点<br>（2）temp.next=newHeroNode（使最后这个节点直接指向新的节点）<br>（3）newHeroNode.pre=temp（使新添加进来的节点的pre指向上一个节点）<br>[3]修改思路和原理和单向链表一样<br>[4]删除<br>（1）因为是双向链表，因此，可以自我删除某个节点，而不需要想单链表一样找到前一个节点才能删除<br>（2）直接找到要删除的节点，比如temp<br>（3）temp.pre.next=temp.next（要删除节点的上一个节点指向的下一个节点为要删除节点的下一个节点）<br>（4）temp.next.pre=temp.pre（要删除节点的下一个节点指向的上一个节点为要删除节点的上一个节点）</p><h3 id="双向链表的代码实现"><a href="#双向链表的代码实现" class="headerlink" title="双向链表的代码实现"></a>双向链表的代码实现</h3><p>创建节点类HeroNode</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个节点类HeroNode，每个HeroNode对象就是一个节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroNode</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> no;</span><br><span class="line"><span class="keyword">public</span> String nickname;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> HeroNode next;<span class="comment">// 指向下一个节点</span></span><br><span class="line"><span class="keyword">public</span> HeroNode pre;<span class="comment">// 指向上一个节点</span></span><br><span class="line"><span class="comment">// 构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HeroNode</span><span class="params">(<span class="keyword">int</span> no, String name, String nickname)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.nickname = nickname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"HeroNode [no="</span> + no + <span class="string">", nickname="</span> + nickname + <span class="string">", name="</span></span><br><span class="line">+ name + <span class="string">", next="</span> + next + <span class="string">", pre="</span> + pre + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个双向链表的类DoubleLinkedList</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个双向链表的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubleLinkedList</span> </span>&#123;</span><br><span class="line"><span class="comment">//先初始化一个头节点，头节点不要动，不存放具体的数据</span></span><br><span class="line"><span class="keyword">private</span> HeroNode head = <span class="keyword">new</span> HeroNode(<span class="number">0</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line"><span class="comment">//放回头节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HeroNode <span class="title">getHead</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双向链表的遍历"><a href="#双向链表的遍历" class="headerlink" title="双向链表的遍历"></a>双向链表的遍历</h3><p>双向链表的遍历，和单向链表一样。(在双向链表的类DoubleLinkedList中添加方法list()来显示双向链表)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//判断链表是否为空</span></span><br><span class="line"><span class="keyword">if</span>(head.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"链表为空"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为头节点不能动，因此我们需要一个辅助变量来遍历</span></span><br><span class="line">HeroNode temp = head.next;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//判断是否到最后</span></span><br><span class="line"><span class="keyword">if</span>(temp == <span class="keyword">null</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//输出节点信息</span></span><br><span class="line">System.out.println(temp);</span><br><span class="line"><span class="comment">//将next后移,不后移将会是一个死循环</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双向链表添加节点"><a href="#双向链表添加节点" class="headerlink" title="双向链表添加节点"></a>双向链表添加节点</h3><p>思路：<br>（1）先找到双向链表的最后这个节点<br>（2）temp.next=newHeroNode（使最后这个节点直接指向新的节点）<br>（3）newHeroNode.pre=temp（使新添加进来的节点的pre指向上一个节点）<br>代码实现（在双向链表的类DoubleLinkedList中添加方法add()来向双向链表添加节点）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HeroNode heroNode)</span></span>&#123;</span><br><span class="line"><span class="comment">//应为head节点不能动，因此需要一个辅助变量 temp</span></span><br><span class="line">HeroNode temp = head;</span><br><span class="line"><span class="comment">//遍历链表，找到最后</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//找到最后一个</span></span><br><span class="line"><span class="keyword">if</span>(temp.next==<span class="keyword">null</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//没有找到最后</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当退出while循环时，temp就指向了链表的最后</span></span><br><span class="line"><span class="comment">//形成一个双向链表</span></span><br><span class="line">temp.next = heroNode;</span><br><span class="line">heroNode.pre = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双向链表的修改"><a href="#双向链表的修改" class="headerlink" title="双向链表的修改"></a>双向链表的修改</h3><p>双向链表的节点内容修改，可单向链表的节点内容修改一样，在双向链表的类DoubleLinkedList中添加方法update()来修改双向链表节点内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改双向链表一个节点的内容</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(HeroNode newHeroNode)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"链表为空"</span>);<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找到需要修改的节点，根据no编号</span></span><br><span class="line"><span class="comment">//定义一个辅助变量</span></span><br><span class="line">HeroNode temp = head.next;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//表示是否找到该节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(temp == <span class="keyword">null</span>)<span class="keyword">break</span>;<span class="comment">//已经遍历完这个链表了</span></span><br><span class="line"><span class="keyword">if</span>(temp.no == newHeroNode.no)&#123;<span class="comment">//找到了</span></span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后移，相当于遍历</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据flag判断是否找到要修改的节点</span></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">temp.name = newHeroNode.name;</span><br><span class="line">temp.nickname = newHeroNode.nickname;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.printf(<span class="string">"没有找到编号%d的节点，不能修改"</span>,newHeroNode.no);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双向链表的节点删除"><a href="#双向链表的节点删除" class="headerlink" title="双向链表的节点删除"></a>双向链表的节点删除</h3><p>思路：<br>（1）因为是双向链表，因此，可以自我删除某个节点，而不需要想单链表一样找到前一个节点才能删除<br>（2）直接找到要删除的节点，比如temp<br>（3）temp.pre.next=temp.next（要删除节点的上一个节点指向的下一个节点为要删除节点的下一个节点）<br>（4）temp.next.pre=temp.pre（要删除节点的下一个节点指向的上一个节点为要删除节点的上一个节点）<br>代码实现（在双向链表的类DoubleLinkedList中添加方法del()来表示删除双向链表中的某个节点）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除节点</span></span><br><span class="line"><span class="comment">//对于双向链表，可以直接找到要删除这个节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> no)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前链表是否为空</span></span><br><span class="line"><span class="keyword">if</span>(head.next==<span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"链表为空~！无法删除"</span>);<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HeroNode temp = head.next;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>; <span class="comment">//标志是否找到待删除节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(temp == <span class="keyword">null</span>)<span class="keyword">break</span>;<span class="comment">//已经到链表最后</span></span><br><span class="line"><span class="keyword">if</span>(temp.no == no)&#123;<span class="comment">//找到了待删除节点的前一个节点</span></span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后移，遍历</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;<span class="comment">//可以删除</span></span><br><span class="line">temp.pre.next = temp.next;</span><br><span class="line"><span class="keyword">if</span>(temp.next!=<span class="keyword">null</span>)</span><br><span class="line">temp.next.pre = temp.pre;<span class="comment">//如果是最后一个节点就不需要执行下面这句话，否则会出现空指针异常</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.printf(<span class="string">"要删除的节点%d,不存在"</span>,no);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在学习单向链表的时候，使用带head头的双向链表实现-水浒英雄排行榜管理单项向链表的缺点分析：&lt;br&gt;[1]单向链表，查找的方向只能是一个方向，而双向链表可以向前或者向后查找。&lt;br&gt;[2]单向链表不能自我删除，需要靠辅助节点，而双向链表，则可以自我删除，所以前面单链表删除
      
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://Xiezhenyu98.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://Xiezhenyu98.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://Xiezhenyu98.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法-单链表</title>
    <link href="https://Xiezhenyu98.github.io/2019/11/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    <id>https://Xiezhenyu98.github.io/2019/11/10/数据结构和算法-单链表/</id>
    <published>2019-11-10T12:13:34.814Z</published>
    <updated>2019-11-23T09:52:44.634Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;单链表是一种链式存取的数据结构，用一组地址任意的存储单元存放线性表中的数据元素。链表中的数据是以结点来表示的，每个结点的构成：元素(数据元素的映象) + 指针(指示后继元素存储位置)，元素就是存储数据的存储单元，指针就是连接每个结点的地址数据。</p><h3 id="单链表介绍"><a href="#单链表介绍" class="headerlink" title="单链表介绍"></a>单链表介绍</h3><p>单链表是有序的列表，但它在内存中的存储如下：<br><img src="https://img-blog.csdnimg.cn/20191109155441168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)(1)连接是以节点的方式来存储。<br>(2)每个节点包含data域，next域：指向写一个节点。<br>(3)如上图：链表的各个节点不一定是连续存储。<br>(4)链表分带头节点的链表和没有头节点的链表，根据实际需求来确定。</p><h3 id="单链表节点的添加"><a href="#单链表节点的添加" class="headerlink" title="单链表节点的添加"></a>单链表节点的添加</h3><p>使用带head头的单向链表实现-水浒英雄排行榜管理<br>(1)完成对英雄任务的增删改查操作<br>(2)第一种方法在添加英雄时，直接添加到链表的尾部（不考虑排序等问题）<br>(3)第二种方法在添加英雄时，根据排名将名将英雄插入到指定位置（如果有这个排名，则添加失败，并给出提示）</p><ul><li>第一种方法的实现 { 直接添加到链表的尾部（不考虑排序等问题）}<br><img src="https://img-blog.csdnimg.cn/2019111018563915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>定义HeroNode，每个HeroNode对象就是一个节点<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroNode</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> no;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> String nickname;</span><br><span class="line"><span class="keyword">public</span> HeroNode next;<span class="comment">//指向下一个节点</span></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HeroNode</span><span class="params">(<span class="keyword">int</span> no,String name, String nickname)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.nickname = nickname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"HeroNode [no="</span> + no + <span class="string">", name="</span> + name + <span class="string">", nickname="</span> + nickname + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>定义一个SingleLinkedList 管理节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedList</span></span>&#123;</span><br><span class="line"><span class="comment">//先初始化一个头节点，头节点不要动,不存放具体的数据</span></span><br><span class="line"><span class="keyword">private</span> HeroNode head = <span class="keyword">new</span> HeroNode(<span class="number">0</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加节点到单向链表</span></span><br><span class="line"><span class="comment"> * 当不考虑编号顺序时</span></span><br><span class="line"><span class="comment"> * 1、找到当前链表的最后节点</span></span><br><span class="line"><span class="comment"> * 2、将最后这个节点的next 指向新的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HeroNode heroNode)</span></span>&#123;</span><br><span class="line"><span class="comment">//应为head节点不能动，因此需要一个辅助变量 temp</span></span><br><span class="line">HeroNode temp = head;</span><br><span class="line"><span class="comment">//遍历链表，找到最后</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//找到最后一个</span></span><br><span class="line"><span class="keyword">if</span>(temp.next==<span class="keyword">null</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//没有找到最后</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当退出while循环时，temp就指向了链表的最后</span></span><br><span class="line">temp.next = heroNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示链表（遍历）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//判断链表是否为空</span></span><br><span class="line"><span class="keyword">if</span>(head.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"链表为空"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为头节点不能动，因此我们需要一个辅助变量来遍历</span></span><br><span class="line">HeroNode temp = head.next;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//判断是否到最后</span></span><br><span class="line"><span class="keyword">if</span>(temp == <span class="keyword">null</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//输出节点信息</span></span><br><span class="line">System.out.println(temp);</span><br><span class="line"><span class="comment">//将next后移,不后移将会是一个死循环</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建节点</span></span><br><span class="line">HeroNode hero1 = <span class="keyword">new</span> HeroNode(<span class="number">1</span>,<span class="string">"宋江"</span>,<span class="string">"及时雨"</span>);</span><br><span class="line">HeroNode hero2 = <span class="keyword">new</span> HeroNode(<span class="number">2</span>,<span class="string">"卢俊义"</span>,<span class="string">"及时雨"</span>);</span><br><span class="line">HeroNode hero3 = <span class="keyword">new</span> HeroNode(<span class="number">3</span>,<span class="string">"无用"</span>,<span class="string">"智多星"</span>);</span><br><span class="line">HeroNode hero4 = <span class="keyword">new</span> HeroNode(<span class="number">4</span>,<span class="string">"林冲"</span>,<span class="string">"豹子头"</span>);</span><br><span class="line"><span class="comment">//创建一个链表</span></span><br><span class="line">SingleLinkedList singleLinkedList = <span class="keyword">new</span> SingleLinkedList();</span><br><span class="line"><span class="comment">//加入</span></span><br><span class="line">singleLinkedList.add(hero1);</span><br><span class="line">singleLinkedList.add(hero2);</span><br><span class="line">singleLinkedList.add(hero3);</span><br><span class="line">singleLinkedList.add(hero4);</span><br><span class="line"><span class="comment">//显示</span></span><br><span class="line">singleLinkedList.list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HeroNode [no=1, name=宋江, nickname=及时雨]</span><br><span class="line">HeroNode [no=2, name=卢俊义, nickname=及时雨]</span><br><span class="line">HeroNode [no=3, name=无用, nickname=智多星]</span><br><span class="line">HeroNode [no=4, name=林冲, nickname=豹子头]</span><br></pre></td></tr></table></figure><ul><li>第二种方法的实现 { 根据排名将名将英雄插入到指定位置（如果有这个排名，则添加失败，并给出提示）}<br><img src="https://img-blog.csdnimg.cn/20191110190916725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在上面已经定义的SingleLinkedList管理HeroNode的类中添加方法addByOrder<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addByOrder</span><span class="params">(HeroNode heroNode)</span></span>&#123;</span><br><span class="line"><span class="comment">//因为头节点不能动，因此我们仍然通过一个辅助指针（变量）来帮助找到添加位置</span></span><br><span class="line"><span class="comment">//因为单链表，因此找的temp是位于 添加位置的前一个节点，否则插入不了</span></span><br><span class="line">HeroNode temp = head;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//标识添加的编号是否存在，默认为false</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(temp.next == <span class="keyword">null</span>)<span class="keyword">break</span>;<span class="comment">//说明temp已经在链表最后</span></span><br><span class="line"><span class="keyword">if</span>(temp.next.no &gt; heroNode.no)<span class="keyword">break</span>;<span class="comment">//位置找到了，就在temp后面插入</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(temp.next.no == heroNode.no)&#123;<span class="comment">//说明希望添加的heroNode编号已经存在</span></span><br><span class="line">flag = <span class="keyword">true</span>;<span class="comment">//说明编号存在</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.next;<span class="comment">//后移，遍历当前链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断flag的值</span></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;<span class="comment">//不能添加，说明编号存在</span></span><br><span class="line">System.out.printf(<span class="string">"准备插入的英雄的编号%d已经存在,不能加入。\n"</span>,heroNode.no);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//插入到链表中</span></span><br><span class="line">heroNode.next = temp.next;</span><br><span class="line">temp.next = heroNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="单链表节点的修改"><a href="#单链表节点的修改" class="headerlink" title="单链表节点的修改"></a>单链表节点的修改</h3><p>修改原来节点的name和nickname，只需要在上面定义的SingleLinkedList管理HeroNode的类中添加方法update</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改节点的信息，根据no编号修改，即no不能改</span></span><br><span class="line"><span class="comment">//1、根据newHeroNode的no来修改</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(HeroNode newHeroNode)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"链表为空"</span>);<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找到需要修改的节点，根据no编号</span></span><br><span class="line"><span class="comment">//定义一个辅助变量</span></span><br><span class="line">HeroNode temp = head.next;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//表示是否找到该节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(temp == <span class="keyword">null</span>)<span class="keyword">break</span>;<span class="comment">//已经变量完这个链表了</span></span><br><span class="line"><span class="keyword">if</span>(temp.no == newHeroNode.no)&#123;<span class="comment">//找到了</span></span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后移，相当于遍历</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据flag判断是否找到要修改的节点</span></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">temp.name = newHeroNode.name;</span><br><span class="line">temp.nickname = newHeroNode.nickname;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.printf(<span class="string">"没有找到编号%d的节点，不能修改"</span>,newHeroNode.no);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单链表的节点删除"><a href="#单链表的节点删除" class="headerlink" title="单链表的节点删除"></a>单链表的节点删除</h3><p><img src="https://img-blog.csdnimg.cn/201911101951532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">从单链表中删除一个节点的思路<br>1、找到需要删除的节点的前一个节点temp<br>2、temp.next = temp.next.next<br>3、被删除的节点，将不会有其它应用指向，会被垃圾回收机制回收<br>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除节点</span></span><br><span class="line"><span class="comment">//1、head不能动，因此我们需要一个temp辅助节点找到待删除的节点的前一个节点</span></span><br><span class="line"><span class="comment">//2、说明我们在比较时，是temp.next.no 和需要删除的节点的no比较</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> no)</span></span>&#123;</span><br><span class="line">HeroNode temp = head;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>; <span class="comment">//标志是否找到待删除节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(temp.next == <span class="keyword">null</span>)<span class="keyword">break</span>;<span class="comment">//已经到链表最后</span></span><br><span class="line"><span class="keyword">if</span>(temp.next.no == no)&#123;<span class="comment">//找到了待删除节点的前一个节点</span></span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后移，遍历</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;<span class="comment">//可以删除</span></span><br><span class="line">temp.next = temp.next.next;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.printf(<span class="string">"要删除的节点%d,不存在"</span>,no);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;单链表是一种链式存取的数据结构，用一组地址任意的存储单元存放线性表中的数据元素。链表中的数据是以结点来表示的，每个结点的构成：元素(数据元素的映象) + 指针(指示后继元素存储位置)，元素就是存储数据的存储单元，指针就是连接每个结点的地址数据。&lt;/p
      
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://Xiezhenyu98.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://Xiezhenyu98.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://Xiezhenyu98.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法-队列</title>
    <link href="https://Xiezhenyu98.github.io/2019/11/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E9%98%9F%E5%88%97/"/>
    <id>https://Xiezhenyu98.github.io/2019/11/09/数据结构和算法-队列/</id>
    <published>2019-11-09T07:24:13.170Z</published>
    <updated>2019-11-09T07:25:16.455Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;队列是一种特殊的线性表，特殊之处在于它只允许在表的前端进行删除操作，而在表的后端进行插入操作(先入先出原则)，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。</p><h3 id="队列的使用场景"><a href="#队列的使用场景" class="headerlink" title="队列的使用场景"></a>队列的使用场景</h3><p>银行排队案例：<br><img src="https://img-blog.csdnimg.cn/20191106200745164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">&emsp;&emsp;在银行排队办理业务的时候，如果窗口有人正在办理业务，后面等待的人会按照先后顺序排成一个队列，这个队列的人，先到的先从等待队列中出去办理业务，而后到的人要从这个队列的末尾排队，等待先到的人从这个等待队列出去办理业务之后，后到的人才能从等待队列出去。</p><h3 id="用数组模拟队列思路分析"><a href="#用数组模拟队列思路分析" class="headerlink" title="用数组模拟队列思路分析"></a>用数组模拟队列思路分析</h3><p>&emsp;&emsp;队列本身是有序列表，若使用数组的结构来存储队列的数据，则队列数组的声明如下图所示，其中maxSize是该队列的最大容量。<br>&emsp;&emsp;因为队列的输出、输入是分别从前后端来处理，因此需要两个变量front及rear分别记录队列前后端的下标，front会随着数据输出而改变，而rear则是随着数据输入而改变，如图所示：<br><img src="https://img-blog.csdnimg.cn/20191109143346578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当我们将数据存入队列时称为“addQueue”，addQueue的处理需要有两个步骤：<br>(1)将尾指针往后移：rear+1，当front==rear 时，为空队列。<br>(2)若尾指针rear小于队列的最大下标maxSize-1，则将数据存入rear所指的数组元素中，否则无法存入数据。rear==maxSize-1 时，为队列满。</p><h3 id="数组模拟队列的代码实现"><a href="#数组模拟队列的代码实现" class="headerlink" title="数组模拟队列的代码实现"></a>数组模拟队列的代码实现</h3><p>模拟一个队列实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用数组模拟队列（编写一个ArrayQueue类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize;<span class="comment">//表示数组的最大容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> front;<span class="comment">//队列头</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> rear;<span class="comment">//队列尾</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] arr;<span class="comment">//该数组用于存放队列，模拟的队列</span></span><br><span class="line"><span class="comment">//创建队列构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">(<span class="keyword">int</span> arrMaxSize)</span></span>&#123;</span><br><span class="line">maxSize = arrMaxSize;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">front = -<span class="number">1</span>;<span class="comment">//指向队列头部，分析出front是指向队列头的前一个位置</span></span><br><span class="line">rear = -<span class="number">1</span>;<span class="comment">//指向队列尾部，指向队列尾的数据(就是队列最后一个数据)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断队列是否满</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> rear == maxSize - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> rear == front;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加数据到队列</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="comment">//判断队列是否满</span></span><br><span class="line"><span class="keyword">if</span>(isFull())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列满，不能加入数据！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">rear++;<span class="comment">//让rear后移</span></span><br><span class="line">arr[rear] = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数据出队列</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//判断队列是否空</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line"><span class="comment">//通过抛出异常处理</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列空，不能取数据"</span>);</span><br><span class="line">&#125;</span><br><span class="line">front++;</span><br><span class="line"><span class="keyword">return</span> arr[front];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示队列的所有数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">System.out.println(<span class="string">"队列为空，没有数据！"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;arr.length;i++)&#123;</span><br><span class="line">System.out.printf(<span class="string">"arr[%d]=%d\n"</span>,i,arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示队列的头数据，注意部署去除数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">headQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列空，没有头！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr[front+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayQueueDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建一个队列</span></span><br><span class="line">ArrayQueue arrayQueue = <span class="keyword">new</span> ArrayQueue(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">char</span> key = <span class="string">' '</span>;<span class="comment">//接收用户的输入</span></span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//输出一个菜单</span></span><br><span class="line"><span class="keyword">while</span>(loop)&#123;</span><br><span class="line">System.out.print(<span class="string">"s(show):显示队列;"</span>);</span><br><span class="line">System.out.print(<span class="string">"e(exit):退出程序;"</span>);</span><br><span class="line">System.out.print(<span class="string">"a(add):添加队列;"</span>);</span><br><span class="line">System.out.print(<span class="string">"g(get):从队列取出数据;"</span>);</span><br><span class="line">System.out.println(<span class="string">"h(head):查看队列头的数据。"</span>);</span><br><span class="line">key = scanner.next().charAt(<span class="number">0</span>);<span class="comment">//接收一个字符</span></span><br><span class="line"><span class="keyword">switch</span> (key) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">arrayQueue.showQueue();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line">scanner.close();</span><br><span class="line">loop = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"请输入一个数字："</span>);</span><br><span class="line"><span class="keyword">int</span> value = scanner.nextInt();</span><br><span class="line">arrayQueue.addQueue(value);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'g'</span>:</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">int</span> res = arrayQueue.getQueue();</span><br><span class="line">System.out.printf(<span class="string">"取出的数据是%d\n"</span>,res);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'h'</span>:</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">int</span> head = arrayQueue.headQueue();</span><br><span class="line">System.out.printf(<span class="string">"队列头为%d\n"</span>,head);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"程序退出"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://img-blog.csdnimg.cn/20191106212901601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>目前代码存在的一些问题<br>(1)目前数字使用一次就不能使用，没有达到复用的效果<br>(2)将这个数字使用算法，改成一个环形的数组</p><h3 id="数组模拟环形队列"><a href="#数组模拟环形队列" class="headerlink" title="数组模拟环形队列"></a>数组模拟环形队列</h3><ul><li><p>思路：<br>1、front变量的含义做一个调整：front指向队列的第一个元素，也就是说arr[front]就是队列的第一个元素，front的初始值 = 0<br>2、rear变量的含义也做一个调整：rear指向队列的最后一个元素的后一个位置，因为希望空出一个空间作为一个约定。rear的初始值 = 0<br>3、当队列满时，条件是：( rear + 1 ) % maxSize = front<br>4、当队列为空，条件是：rear == front<br>5、当这样之后，队列中有效的数据的个数为( rear + maxSize - front ) % maxSize</p></li><li><p>代码实现<br>模拟一个环形队列实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用数组模拟环形队列（编写一个CircleQueue类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleArray</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize;<span class="comment">//表示数组的最大容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> front;<span class="comment">//front变量的含义做一个调整：front指向队列的第一个元素，也就是说arr[front]就是队列的第一个元素，front的初始值 = 0</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> rear;<span class="comment">//rear变量的含义也做一个调整：rear指向队列的最后一个元素的后一个位置，因为希望空出一个空间作为一个约定。rear的初始值 = 0</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] arr;<span class="comment">//该数组用于存放队列，模拟的队列</span></span><br><span class="line"><span class="comment">//创建队列构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CircleArray</span><span class="params">(<span class="keyword">int</span> arrMaxSize)</span></span>&#123;</span><br><span class="line">maxSize = arrMaxSize;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断队列是否满</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (rear+<span class="number">1</span>)%maxSize==front;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> rear == front;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加数据到环形队列</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="comment">//判断队列是否满</span></span><br><span class="line"><span class="keyword">if</span>(isFull())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列满，不能加入数据！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">arr[rear] = n;</span><br><span class="line">rear = (rear+<span class="number">1</span>)%maxSize;<span class="comment">//将rear后移，这里必须考虑取模</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数据出队列</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//判断队列是否空</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line"><span class="comment">//通过抛出异常处理</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列空，不能取数据"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//front是指向队列的第一个元素</span></span><br><span class="line"><span class="comment">//1、先把front对应的值保存到一个临时的变量</span></span><br><span class="line"><span class="comment">//2、将front后移</span></span><br><span class="line"><span class="comment">//3、将临时保存的变量返回</span></span><br><span class="line"><span class="keyword">int</span> value = arr[front];</span><br><span class="line">front = (front+<span class="number">1</span>)%maxSize;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示队列的所有数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">System.out.println(<span class="string">"队列为空，没有数据！"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从fron开始遍历，遍历多少个元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = front; i&lt;front+size();i++)&#123;</span><br><span class="line">System.out.printf(<span class="string">"arr[%d]=%d\n"</span>,i%maxSize,arr[i%maxSize]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求出当前队列的有效数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (rear+maxSize-front)%maxSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示队列的头数据，注意不是去除数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">headQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列空，没有头！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr[front];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">System.out.println(<span class="string">"测试环形队列"</span>);</span><br><span class="line"><span class="comment">//创建一个队列</span></span><br><span class="line">CircleArray circleQueue = <span class="keyword">new</span> CircleArray(<span class="number">4</span>);<span class="comment">//起队列的有效数据最大为3</span></span><br><span class="line"><span class="keyword">char</span> key = <span class="string">' '</span>;<span class="comment">//接收用户的输入</span></span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//输出一个菜单</span></span><br><span class="line"><span class="keyword">while</span>(loop)&#123;</span><br><span class="line">System.out.print(<span class="string">"s(show):显示队列;"</span>);</span><br><span class="line">System.out.print(<span class="string">"e(exit):退出程序;"</span>);</span><br><span class="line">System.out.print(<span class="string">"a(add):添加队列;"</span>);</span><br><span class="line">System.out.print(<span class="string">"g(get):从队列取出数据;"</span>);</span><br><span class="line">System.out.println(<span class="string">"h(head):查看队列头的数据。"</span>);</span><br><span class="line">key = scanner.next().charAt(<span class="number">0</span>);<span class="comment">//接收一个字符</span></span><br><span class="line"><span class="keyword">switch</span> (key) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">circleQueue.showQueue();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line">scanner.close();</span><br><span class="line">loop = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"请输入一个数字："</span>);</span><br><span class="line"><span class="keyword">int</span> value = scanner.nextInt();</span><br><span class="line">circleQueue.addQueue(value);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'g'</span>:</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">int</span> res = circleQueue.getQueue();</span><br><span class="line">System.out.printf(<span class="string">"取出的数据是%d\n"</span>,res);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'h'</span>:</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">int</span> head = circleQueue.headQueue();</span><br><span class="line">System.out.printf(<span class="string">"队列头为%d\n"</span>,head);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"程序退出"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://img-blog.csdnimg.cn/20191109151539101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;队列是一种特殊的线性表，特殊之处在于它只允许在表的前端进行删除操作，而在表的后端进行插入操作(先入先出原则)，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。&lt;/p&gt;
&lt;h3 id=&quot;队列的使用场景&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://Xiezhenyu98.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://Xiezhenyu98.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://Xiezhenyu98.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法-稀疏数组</title>
    <link href="https://Xiezhenyu98.github.io/2019/11/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/"/>
    <id>https://Xiezhenyu98.github.io/2019/11/05/数据结构和算法-稀疏数组/</id>
    <published>2019-11-05T13:54:41.952Z</published>
    <updated>2019-11-06T11:18:14.909Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实际需求"><a href="#实际需求" class="headerlink" title="实际需求"></a>实际需求</h3><ul><li>编写的五子棋程序中，有存盘退出和继续上盘的功能<br><img src="https://img-blog.csdnimg.cn/20191105194932380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用二维数组记录棋盘(用1记录玩家1，用2记录玩家2)<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;1&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;2&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0<br>0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0&emsp;0</li><li>分析存在的问题<br>&emsp;&emsp;因为二维数组的很多值都是默认的值0，因此记录了很多没有意义的数据，这个时候就可以使用稀疏数组解决这个问题。<h3 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h3></li><li>基本介绍<br>当一个数组中大部分元素为0，或者为同一个值的数组时，可以使用稀疏数组来保存改数组。<br>稀疏数组的处理方法是：<br>（1）记录数组一共有几行几列，有多少个不同的值<br>（2）把具有不同值的元素行列及值记录在一个小规模得数组中，从而缩小程序得规模</li><li>举例说明<br>实际二维数组<br><img src="https://img-blog.csdnimg.cn/2019110520131992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>转换为稀疏二维数组<br><img src="https://img-blog.csdnimg.cn/20191105201917285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>&emsp;&emsp;从上面两个数组可以看出，原始的二维数组一共记录了42个数据，而转换为稀疏二维数组之后只需要记录27个数据。</li><li>应用实例<br>（1）使用稀疏数组，来保存类似前面的二维数组（棋盘、地图等等）<br>（2）把稀疏数组存盘，并且可以从新恢复原来的二维数组<br>（3）思路分析<br><img src="https://img-blog.csdnimg.cn/20191105211232384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>将原始二维数组转换为稀疏数组的思路<br>①遍历原始的二维数组，得到有效数据的个数sum<br>②根据sum就可以创建稀疏二维数组sparseArr int[sum+1][3]<br>③将原始二维数组的有效数据存入到稀疏数组<br>将稀疏数组转换为原始二维数组的思路<br>①先读取稀疏数组的第一行，根据第一行的数据创建原始的二维数组<br>②在读取稀疏数组后几行的数据，并赋值给原始二维数组即可</li></ul><h3 id="稀疏数组的代码实现"><a href="#稀疏数组的代码实现" class="headerlink" title="稀疏数组的代码实现"></a>稀疏数组的代码实现</h3><p> 此部分是将上面的思路分析转换成代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseArray</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将原始二维数组转换为稀疏数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//创建一个原始的二维数组10 * 10</span></span><br><span class="line"><span class="comment">//0：表示每一棋子，1表示黑棋，2表示白棋</span></span><br><span class="line"><span class="keyword">int</span> chessArr1[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">chessArr1[<span class="number">3</span>][<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">chessArr1[<span class="number">4</span>][<span class="number">4</span>]=<span class="number">2</span>;</span><br><span class="line"><span class="comment">//输出原始的二维数组</span></span><br><span class="line">System.out.println(<span class="string">"原始二维数组："</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>[] row: chessArr1)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> data : row)&#123;</span><br><span class="line">System.out.printf(<span class="string">"%d\t"</span>,data);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将二维数组转换为稀疏数组</span></span><br><span class="line"><span class="comment">//1.先遍历二维数组，得到非0数据的个数</span></span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(chessArr1[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.创建对应的稀疏数组</span></span><br><span class="line"><span class="keyword">int</span> sparseArr[][] = <span class="keyword">new</span> <span class="keyword">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line"><span class="comment">//给稀疏数组赋值</span></span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">10</span>;</span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//遍历原始二维数组，将非0的值存放到sparseArr中</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//count用于记录是第几个非0数据</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(chessArr1[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">count++;</span><br><span class="line">sparseArr[count][<span class="number">0</span>] = i;</span><br><span class="line">sparseArr[count][<span class="number">1</span>] = j;</span><br><span class="line">sparseArr[count][<span class="number">2</span>] = chessArr1[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出稀疏数组的形式</span></span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">"得到的稀疏数组为："</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;sparseArr.length;i++)&#123;</span><br><span class="line">System.out.printf(<span class="string">"%d\t%d\t%d\t"</span>,sparseArr[i][<span class="number">0</span>],sparseArr[i][<span class="number">1</span>],sparseArr[i][<span class="number">2</span>]);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将稀疏数组转换为原始二维数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//1.读取稀疏数组第一行，根据第一行数据创建原始二维数组</span></span><br><span class="line"><span class="keyword">int</span> chessArr2[][] = <span class="keyword">new</span> <span class="keyword">int</span>[sparseArr[<span class="number">0</span>][<span class="number">0</span>]][sparseArr[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"><span class="comment">//2.根据稀疏数组第二行以及之后行的数据赋值给原始二维数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;sparseArr.length;i++)&#123;</span><br><span class="line">chessArr2[sparseArr[i][<span class="number">0</span>]][sparseArr[i][<span class="number">1</span>]] = sparseArr[i][<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出还原的二维数组</span></span><br><span class="line">System.out.println(<span class="string">"恢复之后的二维数组："</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>[] row: chessArr2)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> data : row)&#123;</span><br><span class="line">System.out.printf(<span class="string">"%d\t"</span>,data);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://img-blog.csdnimg.cn/20191105215240430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;实际需求&quot;&gt;&lt;a href=&quot;#实际需求&quot; class=&quot;headerlink&quot; title=&quot;实际需求&quot;&gt;&lt;/a&gt;实际需求&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;编写的五子棋程序中，有存盘退出和继续上盘的功能&lt;br&gt;&lt;img src=&quot;https://img-blog.cs
      
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://Xiezhenyu98.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://Xiezhenyu98.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://Xiezhenyu98.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Maven的核心概念</title>
    <link href="https://Xiezhenyu98.github.io/2019/10/27/Maven%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
    <id>https://Xiezhenyu98.github.io/2019/10/27/Maven的核心概念/</id>
    <published>2019-10-27T13:06:14.588Z</published>
    <updated>2019-11-06T11:25:41.042Z</updated>
    
    <content type="html"><![CDATA[<p>Maven的目录结构，POM，坐标，仓库，依赖，生命周期，继承，聚合分别是什么呢？</p><h3 id="Maven的目录结构"><a href="#Maven的目录结构" class="headerlink" title="Maven的目录结构"></a>Maven的目录结构</h3><p>这一部分的内容在我的上一篇《快速上手Maven》已经讲过，在这就不在过多赘述。<br><img src="https://img-blog.csdnimg.cn/20191026212828155.png" alt="在这里插入图片描述"><br>HelloMaven：根目录（工程名）<br>src：源码<br>pom.xml：Maven工程的核心配置文件<br>main：存放主程序<br>test：存放测试程序<br>java：存放java源文件<br>resources：存放框架或者其它工具的配置文件</p><h3 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h3><p>[1]含义：Project Object Model 项目对象模型，类似与DOM Document Object Model 文档对象模型<br>[2]pom.xml对于Maven工程是核心的配置文件，与构建过程相关的一切设置都在这个文件中进行配置。重要程度相当于web.xml对于动态Web工程。</p><h3 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h3><ul><li><p>在Maven中坐标是使用三个向量在仓库中唯一定位一个Maven工程<br>[1]groupId：公司或者组织的唯一标志，一般用公司或组织域名倒序+项目名</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiezhenyu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  [2]artifactId：模块名，项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HelloMaven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  [3]version：版本号</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Maven坐标与仓库中路径的对应关系<br>如com.xiezhenyu.maven，maven会将该项目打成的jar包放本地仓库路径：/com/xiezhenyu/maven-1.0.jar。我们自己的 Maven 工程必须执行安装操作才会进入仓库，安装的命令是：mvn install。</p><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3></li><li><p>仓库的分类<br>[1]本地仓库：为当前本机电脑上所有的Maven工程服务<br>[2]远程仓库：远程仓库分为私服、中央仓库、中央镜像仓库。私服：架设在当前局域网环境下，为当前局域网范围内的所有Maven工程服务；中央仓库：架设在Internet上，为全世界所有的Maven工程服务；中央仓库镜像：架设在各个大洲上，为中央仓库分担流量。减轻中央仓库的压力，同时更快的响应用户请求。<br>其中仓库的关系可以参照下图：<br><img src="https://img-blog.csdnimg.cn/20191027164811799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>仓库中的文件(仓库中保存的内容)<br>[1]Maven自身所需要的插件<br>[2]第三方框架或工具的jar包<br>[3]我们自己开发的Maven工程</p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3></li><li><p>概念<br>&emsp;&emsp;当 A jar 包用到了 B jar 包中的某些类时，A 就对 B 产生了依赖，这是概念上的描述。Maven解析依赖信息时会到仓库中查找被依赖的jar包。 如果要使用我们自己开发的jar包，要使用mvn install命令安装后就可以进入仓库。</p></li><li><p>依赖的范围</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  在上面<scope>test</scope>就是描述依赖的范围，其值可以有<br>  <img src="https://img-blog.csdnimg.cn/20191027171334782.png" alt="在这里插入图片描述"><br>  其文字描述为：</p><p>  compile范围依赖<br>※对主程序是否有效：有效<br>※对测试程序是否有效：有效<br>※是否参与打包：参与<br>※是否参与部署：参与<br>※典型例子：spring-core</p><p>  test范围依赖<br>  ※对主程序是否有效：无效<br>  ※对测试程序是否有效：有效<br>  ※是否参与打包：不参与<br>  ※是否参与部署：不参与<br>  ※典型例子：Junit</p><p>  从开发和运行这两个阶段理解compile 和 provided 的区别<br>  compile围依赖<br>  <img src="https://img-blog.csdnimg.cn/20191027184251792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  provided 范围依赖<br>  <img src="https://img-blog.csdnimg.cn/20191027184320330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>依赖的传递性<br>&emsp;&emsp;比如A.jar依赖B.jar，B.jar依赖C.jar，A.jar能否使用C.jar呢？这时就需要看B.jar依赖C.jar的范围是不是compile范围的依赖。这就说明，C.jar只是给B.jar单独使用的。</p></li><li><p>依赖的排除<br>&emsp;&emsp;如果我们当前工程中引入了一个依赖是A.jar，而A.jar又依赖了B.jar，那么Maven会自动将A依赖的B引入当前工程，但是个别情况下B.jar有可能是一个不稳定版本，或对当前工程有不良影响。这时我们可以在引入A.jar的时候将B.jar排除。<br>①情景<br><img src="https://img-blog.csdnimg.cn/20191027193223498.png" alt="在这里插入图片描述">②配置方式</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiezhenyu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HelloMaven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置需要排除的依赖信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  ③排除后的结果<br>  <img src="https://img-blog.csdnimg.cn/20191027193618237.png" alt="在这里插入图片描述"></p></li><li><p>依赖的原则，解决jar包冲突<br>①路径最短者优先<br>会根据jar包的路径最短的原则依赖jar包<br><img src="https://img-blog.csdnimg.cn/20191027193954616.png" alt="在这里插入图片描述"><br>②路径相同时先声明者优先，先生命指的是dependency标签声明的顺序。<br><img src="https://img-blog.csdnimg.cn/20191027194115470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>统一管理所依赖的版本<br>&emsp;&emsp;对同一个框架的一组jar包最好使用相同的版本。为了方便升级架构，可以将jar包的版本信息统一提取出来。<br>①统一声明版本号(其中 jackson.version 部分是自定义标签。)</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jackson.version</span>&gt;</span>2.9.6<span class="tag">&lt;/<span class="name">jackson.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  ②引用前面声明的版本号 (在这里就会统一引用声明好的版本号)</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  ③其实properties标签配合自定义标签声明数据的配置并不是只能用于声明依赖的版本号。凡是需要统一声明后再引用的场合都可以使用。</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3></li><li><p>各个构建环节执行的顺序：不能打乱顺序，必须按照既定的正确顺序来执行。</p></li><li><p>Maven的核心程序中定义了抽象的生命周期，生命周期中各个阶段的具体任务是由插件来完成的。</p></li><li><p>Maven核心程序为了更好的实现自动化构建，按照这一特点执行生命周期中各个阶段：不论现在要执行生命周期中的哪一阶段，都是从这个生命周期最初的位置开始执行。</p></li><li><p>Maven有三套相互独立的生命周期，分别是：<br>①Clean Lifecycle 在进行真正的构建之前进行一些清理工作。<br>②Default Lifecycle 构建的核心部分，编译、测试、打包、安装、部署等等。<br>③Site Lifecycle 生成项目报告，站点，发布站点。<br>&emsp;&emsp;他们相互独立。也可以直接运行 mvn clean install site 运行所有这三套生命周期。每套生命周期都由一组阶段(Phase)组成，我们平时在命令行输入的命令总会对应于一个特定的阶段。比如，运行 mvn clean，这个 clean 是 Clean 生命周期的一个阶段。有 Clean 生命周期，也有 clean 阶段。</p></li><li><p>Clean声明周期<br>①pre-clean 执行一些需要在clean之前完成的工作<br>②clean 移除所有上一次构建生成的文件<br>③post-clean 执行一些需要在clean 之后立刻完成的工作</p></li><li><p>Default声明周期<br>Default 生命周期是 Maven 生命周期中最重要的一个，绝大部分工作都发生在这个生命周期中。这里标红一些比较重要和常用的阶段：<br>validate（校验）     校验项目是否正确并且所有必要的信息可以完成项目的构建过程。<br>initialize（初始化）     初始化构建状态，比如设置属性值。<br>generate-sources（生成源代码）     生成包含在编译阶段中的任何源代码。<br>process-sources（处理源代码）     处理源代码，比如说，过滤任意值。<br>generate-resources（生成资源文件）     生成将会包含在项目包中的资源文件。<br>process-resources （处理资源文件）    复制和处理资源到目标目录，为打包阶段最好准备。<br>compile（编译）    编译项目的源代码。<br>process-classes（处理类文件）     处理编译生成的文件，比如说对Java class文件做字节码改善优化。<br>generate-test-sources（生成测试源代码）     生成包含在编译阶段中的任何测试源代码。<br>process-test-sources（处理测试源代码）     处理测试源代码，比如说，过滤任意值。<br>generate-test-resources（生成测试资源文件）     为测试创建资源文件。<br>process-test-resources（处理测试资源文件）     复制和处理测试资源到目标目录。<br>test-compile（编译测试源码）     编译测试源代码到测试目标目录.<br>process-test-classes（处理测试类文件）     处理测试源码编译生成的文件。<br>test（测试）    使用合适的单元测试框架运行测试（Juint是其中之一）。<br>prepare-package（准备打包）     在实际打包之前，执行任何的必要的操作为打包做准备。<br>package（打包）    将编译后的代码打包成可分发格式的文件，比如JAR、WAR或者EAR文件。<br>pre-integration-test（集成测试前）     在执行集成测试前进行必要的动作。比如说，搭建需要的环境。<br>integration-test（集成测试）     处理和部署项目到可以运行集成测试环境中。<br>post-integration-test（集成测试后）     在执行集成测试完成后进行必要的动作。比如说，清理集成测试环境。<br>verify （验证）     运行任意的检查来验证项目包有效且达到质量标准。<br>install（安装）    安装项目包到本地仓库，这样项目包可以用作其他本地项目的依赖。<br>deploy（部署）    将最终的项目包复制到远程仓库中与其他开发者和项目共享。</p></li><li><p>Site生命周期<br>①pre-site 执行一些需要在生成站点文档之前完成的工作<br>②site 生成项目的站点文档<br>③post-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备<br>④site-deploy 将生成的站点文档部署到特定的服务器上</p></li><li><p>插件和目标<br>①生命周期的各个阶段仅仅定义了要执行的任务是生命<br>②各个阶段和插件的目标是对应的<br>③相似的目标由特定的插件来完成<br>例如：compile 就是插件 maven-compiler-plugin 的一个目标；pre-clean 是插件 maven-clean-plugin 的一个目标。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3></li><li><p>现状<br>Hello依赖的Junit：4.0<br>HelloFriend依赖的Junit：4.0<br>MakeFriends依赖的Junit：4.9<br>由于test范围的依赖不能传递，所以必然会分散在各个模块工程中，很容易造成版本不一致。</p></li><li><p>需求：统一管理各个模块工程中对Junit依赖的版本。</p></li><li><p>解决思路：将Junit依赖统一提取到“父”工程中，在子工程中声明Junit依赖是不指定版本，以父工程中统一设定的为准。同时也便于修改。 </p></li><li><p>操作步骤：<br>①创建一个Maven工程作为父工程。注意：打包方式为pom </p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiezhenyu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  ②在子工程中声明对父工程的引用 </p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在子过程中声明父工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiezhenyu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 以当前工程的pom.xml文件为基准的父工程pom.xml文件的相对路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>&gt;</span><span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  ③将子工程的坐标中与父工程坐标中重复的内容删除<br>  ④在父工程中统一管理Junit的依赖</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置依赖的管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  ⑤在子工程中删除Junit依赖的版本号部分<br>  注意：配置集成后，执行安装命令时要先安装父工程。</p><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>&emsp;&emsp;如果我们写了很多模块，在我们安装的时候就需要我们一个个安装，这样就整加了工作量，而聚合可以解决这个问题。</p></li><li><p>聚合作用：一键安装各个模块工程。</p></li><li><p>配置方式：在一个“总的聚合工程”中配置各个参与聚合的模块（比如说在父工程配置）</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置聚合 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置一起安装的各个工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>../Hello<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>../HelloFriend<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>../MakeFriends<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用方式：在聚合工程的pom.xml 上点右键-&gt;run as-&gt;maven install</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Maven的目录结构，POM，坐标，仓库，依赖，生命周期，继承，聚合分别是什么呢？&lt;/p&gt;
&lt;h3 id=&quot;Maven的目录结构&quot;&gt;&lt;a href=&quot;#Maven的目录结构&quot; class=&quot;headerlink&quot; title=&quot;Maven的目录结构&quot;&gt;&lt;/a&gt;Maven的目
      
    
    </summary>
    
    
      <category term="Maven" scheme="https://Xiezhenyu98.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="https://Xiezhenyu98.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>【快速上手】Maven的使用</title>
    <link href="https://Xiezhenyu98.github.io/2019/10/27/%5B%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%5DMaven%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://Xiezhenyu98.github.io/2019/10/27/[快速上手]Maven的使用/</id>
    <published>2019-10-27T05:02:36.618Z</published>
    <updated>2019-11-06T11:16:35.866Z</updated>
    
    <content type="html"><![CDATA[<h3 id="首先需要了解一下为什么要使用Maven"><a href="#首先需要了解一下为什么要使用Maven" class="headerlink" title="首先需要了解一下为什么要使用Maven"></a>首先需要了解一下为什么要使用Maven</h3><ul><li>一个项目就是一个工程<br>&emsp;&emsp;如果一个项目非常庞大，就不适合继续使用Package来划分模块。最好是每一个模块对应一个工程，利于分工协作。而利用Maven就可以将一个项目拆分为多个工程。</li><li>项目中需要jar包必须手动“复制”、“粘贴”到WEB-INF/lib目录下<br>&emsp;&emsp;带来的问题：同样的jar包文件重复出现在不同的项目工程中，一方面浪费存储空间，另外也让工程比较臃肿。借助Maven，可以将jar包仅仅保存在“仓库”中，有需要使用的工程“引用”这个文件接口，并不需要真的把jar包复制过来。</li><li>jar包需要别人替我们准备好，或者到官网下载<br>&emsp;&emsp;不同技术的官网提供的jar包下载方式是不同的，有些jar包我们进不去别人的官网，只能从第三方网站下载，而第三方的网站的jar包可能是不规范的。而借助于Maven我们可以以一种规范的方式下载jar包。因为所有知名的jar包都会以规范的方式下载jar包，内容可靠。</li><li>一个jar包依赖的其它jar包需要自己手动加入工程中<br>&emsp;&emsp;有些jar包会依赖很多个jar包，而被依赖的jar包也可能依赖其它jar包，这些依赖关系我们必须记下来，这样就会使程序员整加学习成本。不然我们把不完整的jar包导入到工程中，将会出现报错。而使用Maven将会自动把依赖的jar包导入进来。<h3 id="我们来了解一下什么是Maven"><a href="#我们来了解一下什么是Maven" class="headerlink" title="我们来了解一下什么是Maven"></a>我们来了解一下什么是Maven</h3>&emsp;&emsp;Maven是一款服务于java平台的自动化构建工具。构建就是以java源文件、框架配置文件、JSP、HTML、图片等资源为原材料，去生产一个可运行的项目的过程。这个过程主要分为编译、部署、搭建。<br>构建的各个环节：<br>[1]清理：将以前编译得到的旧的class字节码文件删除，为下一次编译做准备<br>[2]编译：将Java源程序编译为字节码文件。<br>[3]测试：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性。<br>[4]报告：将每一次测试后以标准的格式记录和展示测试结果。<br>[5]打包：将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java工程对应jar包，Web工程对象war包。<br>[6]安装：在Maven环境下特指将打包的结果——Jar包或War包安装到本地仓库中。<br>[7]部署：将打包的结果部署到远程仓库或将war包部署到服务器上运行。<h3 id="如何使用和创建一个Maven工程"><a href="#如何使用和创建一个Maven工程" class="headerlink" title="如何使用和创建一个Maven工程"></a>如何使用和创建一个Maven工程</h3><ul><li>安装jdk、配置java环境变量</li><li>下载并解压Maven核心程序压缩包 【<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">点击下载http://maven.apache.org/download.cgi</a>】<br><img src="https://img-blog.csdnimg.cn/2019102621024717.png" alt="在这里插入图片描述"></li></ul></li><li>配置Maven环境变量<br>MAVEN_HOME：解压Maven核心程序的路径\apache-maven-3.6.1-bin<br>path：%MAVEN_HOME%\bin</li><li>验证Maven是否配置成功（在控制台输入mvn -v）<br><img src="https://img-blog.csdnimg.cn/20191026210817933.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>创建Maven工程<br>&emsp;&emsp;在创建之前必须要知道Maven所约定的Maven目录结构，我们创建这个工程必须按照这个约定的结构去创建，因为我们写的代码最终是要交给Maven去处理的，比如说java源代码编译，只有按照这个Maven约定好的目录去创建，Maven才知道去哪找java源代码编译。<br>Maven的目录结构：<br><img src="https://img-blog.csdnimg.cn/20191026212828155.png" alt="在这里插入图片描述"><br>HelloMaven：根目录（工程名）<br>src：源码<br>pom.xml：Maven工程的核心配置文件<br>main：存放主程序<br>test：存放测试程序<br>java：存放java源文件<br>resources：存放框架或者其它工具的配置文件</li><li>编写Maven项目<br>[1]编写pom.xml文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span> = <span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span> = <span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span> = <span class="string">"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 模型版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiezhenyu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HelloMaven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 版本号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 依赖的jar包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>[2]编写主程序代码<br>&emsp;&emsp;在src/main/java/com/xiezhenyu/maven（一般以公司域名倒写的方式命名）目录下新建文件HelloMaven.java，其内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiezhenyu.maven;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMaven</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHelloMaven</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"HelloMaven!"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello "</span>+name+<span class="string">"!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[3]编写测试代码<br>&emsp;&emsp;在src/test/java/com/xiezhenyu/maven（一般以公司域名倒写的方式命名）目录下新建文件HelloMavenTest.java，其内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiezhenyu.maven;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> junit.framework.Assert.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMavenTest</span></span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelloMaven</span><span class="params">()</span></span>&#123;</span><br><span class="line">HelloMaven helloMaven = <span class="keyword">new</span> HelloMaven();</span><br><span class="line">String results = helloMaven.sayHelloMaven(<span class="string">"xiezhenyu"</span>);</span><br><span class="line">assertEquals(<span class="string">"Hello xiezhenyu!"</span>,results);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上一个简单的Maven项目就搭建起来了。</p><h3 id="如何测试运行一个Maven项目"><a href="#如何测试运行一个Maven项目" class="headerlink" title="如何测试运行一个Maven项目"></a>如何测试运行一个Maven项目</h3><p>在测试之前先要了解一下Maven的常用命令</p><ul><li><p>注意：执行与构建过程有关的Maven命令的时候，必须进入pom.xml所在的目录</p></li><li><p>常用命令<br>[1]mvn clean : 清理<br>[2]mvn compile : 编译主程序<br>[3]mvn test-compile : 编译测试程序<br>[4]mvn test : 执行测试<br>[5]mvn package : 打包<br>[6]mvn install ： 安装<br>[7]mvn site ：生成站点</p></li><li><p>在编译之前，我们如果是第一次使用maven我们本地仓库中没有项目所需的jar包，我们需要联网<br>[1]Maven 的核心程序中仅仅定义了抽象的生命周期，但是具体的工作必须有特定的插件来完成。而插件本身不包含在Maven核心程序中。<br>[2]当我们执行的Maven命令需要用到某些插件时，Maven核心程序会首先到本地仓库中查找。<br>[3]本地仓库的默认位置：[系统登陆用户的家目录] \ .m2\repository<br>[4]Maven核心程序如果在本地仓库中找不到需要的插件，那么它会自动连接外网，到中央仓库下载。<br>[5]如果此时无法连接外网，则构建失败。<br>[6]修改默认本地仓库的位置可以让Maven核心程序到我们事先准备好的目录下查找插件<br>&emsp;①找到Maven解压目录\conf\settings.xml<br>&emsp;②在setting.xml 文件中找到 localRepository 标签<br>&emsp;③将 &lt; localRepository&gt;/path/to/local/repo&lt; /localRepository&gt;从注释中取出<br>&emsp;④将标签体内容修改为自定义的Maven仓库目录</p></li><li><p>执行mvn compile命令（cmd必须进入pom.xml所在的目录）<br><img src="https://img-blog.csdnimg.cn/20191027120036856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">&emsp;&emsp;可以发现我们在目录中生成了target目录，里面有classes，里面生成的是主程序编译后的结果（其中生成的maven-status目录是maven的状态，保存一些创建和输出的信息等）<br><img src="https://img-blog.csdnimg.cn/20191027121937544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>执行mvn test-compile命令<br><img src="https://img-blog.csdnimg.cn/20191027122727199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">可以发现target目录新加了test-class目录，里面，里面生成的是测试程序编译后的结果</p></li><li><p>执行mvn test命令<br><img src="https://img-blog.csdnimg.cn/20191027123339827.png" alt="在这里插入图片描述"><br>可以发现target目录新加了surefire-reports目录，里面生成的是测试报告相关的文件，控制台输出如下<br><img src="https://img-blog.csdnimg.cn/20191027123942738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">可以发现，我们的测试运行已经成功了。</p></li><li><p>执行mvn package命令<br><img src="https://img-blog.csdnimg.cn/20191027124240357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">&emsp;&emsp;可以发现，在target目录新生成了一个目录和一个jar包，maven-archiver目录存放的是这个jar包的基本信息，jar包是主程序编译结果打成的一个jar包，将jar包解压，我们可以看一下jar包的内容<br><img src="https://img-blog.csdnimg.cn/20191027124720503.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191027124840262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">&emsp;&emsp;我们可以发现打包出来的并没有测试程序的内容，只有主程序的内容，里面也并没有这个工程所依赖的jar包，这样我们的工程就不会显得臃肿，如果我们将我们开发的这个模块导入到其它工程中就会方便很多。<br>我们再看一下执行mvn package命令控制台的输出<br><img src="https://img-blog.csdnimg.cn/20191027125100400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">可以发现我们在执行打包命令时它也执行了测试，这就涉及到Maven的生命周期了。（与本篇无关，详情查看下一篇Maven）</p></li></ul><hr><p>以上就是如何快速使用Maven的方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;首先需要了解一下为什么要使用Maven&quot;&gt;&lt;a href=&quot;#首先需要了解一下为什么要使用Maven&quot; class=&quot;headerlink&quot; title=&quot;首先需要了解一下为什么要使用Maven&quot;&gt;&lt;/a&gt;首先需要了解一下为什么要使用Maven&lt;/h3&gt;&lt;ul&gt;

      
    
    </summary>
    
    
      <category term="Maven" scheme="https://Xiezhenyu98.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="https://Xiezhenyu98.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>学习Python的第一步-卸载Python</title>
    <link href="https://Xiezhenyu98.github.io/2019/10/27/%E5%AD%A6%E4%B9%A0Python%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5-%E5%8D%B8%E8%BD%BDPython/"/>
    <id>https://Xiezhenyu98.github.io/2019/10/27/学习Python的第一步-卸载Python/</id>
    <published>2019-10-27T02:55:14.363Z</published>
    <updated>2019-10-27T02:55:01.362Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;相信很多人都已经听说过或者学过Python了，但是有的人没有坚持下去，过了几个月一年或者更久之后Python的版本发生了很大的变化，我们学习当然要学习最新的内容。而要学习最新的内容就必须把电脑里已经安装过的Python旧版本卸载掉（没有安装过的当我没说）</p><ul><li><p>检查是否安装Python<br>Win+R→输入cmd→打开→在cmd输入python→回车<br><img src="https://img-blog.csdnimg.cn/20191027103901720.png" alt>如果出现这个界面就证明你已经安装了Python，如果没有安装，是windows10系统的话会自动弹出python获取界面或者会出现</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">'python' 不是内部或外部命令，也不是可运行的程序</span><br><span class="line">或批处理文件。</span><br></pre></td></tr></table></figure></li><li><p>卸载Python<br>进入电脑的控制面版。<br><img src="https://img-blog.csdnimg.cn/20191027104723396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>找到Python 3.7.3(或者不是Python的其它不是最新的版本)和Python Launcher，并把这两个卸载掉。<br><img src="https://img-blog.csdnimg.cn/20191027104852703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>Python卸载成功</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;相信很多人都已经听说过或者学过Python了，但是有的人没有坚持下去，过了几个月一年或者更久之后Python的版本发生了很大的变化，我们学习当然要学习最新的内容。而要学习最新的内容就必须把电脑里已经安装过的Python旧版本卸载掉（没有安装过的当我没
      
    
    </summary>
    
    
      <category term="Python" scheme="https://Xiezhenyu98.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://Xiezhenyu98.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Spring的模块</title>
    <link href="https://Xiezhenyu98.github.io/2019/10/20/Spring%E7%9A%84%E6%A8%A1%E5%9D%97/"/>
    <id>https://Xiezhenyu98.github.io/2019/10/20/Spring的模块/</id>
    <published>2019-10-20T09:48:48.999Z</published>
    <updated>2019-10-20T09:51:39.635Z</updated>
    
    <content type="html"><![CDATA[<p>Spring下载：<a href="http://repo.spring.io/release/org/springframework/spring/" target="_blank" rel="noopener">http://repo.spring.io/release/org/springframework/spring/</a><br><img src="https://img-blog.csdnimg.cn/20191020164907243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">    </p><ul><li>Test：Spring的单元测试模块<br>spring-test-5.0.8.RELEASE.jar</li><li>Core Container：核心容器（IOC）；黑色代表这部分的功能由哪些jar包组成，要使用这个部分的完整功能们这些jar都需要导入：<br>spring-beans-5.0.8.RELEASE.jar<br>spring-core-5.0.8.RELEASE.jar<br>spring-context-5.0.8.RELEASE.jar<br>spring-expression-5.0.8.RELEASE.jar</li><li>AOP+Aspects：面向切面编程模块<br>spring-aop-5.0.8.RELEASE.jar<br>spring-aspects-5.0.8.RELEASE.jar</li><li>Data Access/Integration：数据访问（Spring访问数据库的模块）<br>spring-jdbc-5.0.8.RELEASE.jar<br>spring-orm-5.0.8.RELEASE.jar（Object Relation Mapping 对象关系映射）<br>spring-oxm-5.0.8.RELEASE.jar（x表示xml）<br>spring-jms-5.0.8.RELEASE.jar<br>spring-tx-5.0.8.RELEASE.jar</li><li>Web：Spring开发web应用的模块<br>spring-websocket-5.0.8.RELEASE.jar<br>spring-web-5.0.8.RELEASE.jar（和原生的web相关的(servlet)）<br>spring-webmvc-5.0.8.RELEASE.jar（开发web应用的组件集成）</li><li>Instrumentation：该模块提供了为JVM添加代理的功能，该模块包含spring-instrument，spring-instrument-tomcat组件，使用较少，不必过分关注。</li></ul><hr><p>用哪个模块导哪个包</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring下载：&lt;a href=&quot;http://repo.spring.io/release/org/springframework/spring/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://repo.spring.io/release
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://Xiezhenyu98.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://Xiezhenyu98.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis和Spring整合</title>
    <link href="https://Xiezhenyu98.github.io/2019/10/20/Mybatis%E5%92%8CSpring%E6%95%B4%E5%90%88/"/>
    <id>https://Xiezhenyu98.github.io/2019/10/20/Mybatis和Spring整合/</id>
    <published>2019-10-20T06:20:57.133Z</published>
    <updated>2019-10-20T06:23:45.977Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、Mybatis和Spring框架整合"><a href="#1、Mybatis和Spring框架整合" class="headerlink" title="1、Mybatis和Spring框架整合"></a>1、Mybatis和Spring框架整合</h3><h4 id="1-1、导入所需的包"><a href="#1-1、导入所需的包" class="headerlink" title="1.1、导入所需的包"></a>1.1、导入所需的包</h4><p>我所需要的包是<br><img src="https://img-blog.csdnimg.cn/20191019212631478.png" alt="在这里插入图片描述"></p><h4 id="1-2、创建Mybatis主配置文件sqlMapConfig-xml"><a href="#1-2、创建Mybatis主配置文件sqlMapConfig-xml" class="headerlink" title="1.2、创建Mybatis主配置文件sqlMapConfig.xml"></a>1.2、创建Mybatis主配置文件sqlMapConfig.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 类型别名,推荐使用package包的形式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 扫描该包主包及子包下的所有类都起别名,别名为类名,而且大小写不敏感,推荐使用小写 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.xiezhenyu.bean"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-3、创建Spring主配置文件applicationContext-xml"><a href="#1-3、创建Spring主配置文件applicationContext-xml" class="headerlink" title="1.3、创建Spring主配置文件applicationContext.xml"></a>1.3、创建Spring主配置文件applicationContext.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd "</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 读取db.properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"db.properties"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置c3p0连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置MyBatis sqlSessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactoryBean"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 告诉spring mybatis的核心配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:sqlMapConfig.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-4、创建log4j-properties和db-properties"><a href="#1-4、创建log4j-properties和db-properties" class="headerlink" title="1.4、创建log4j.properties和db.properties"></a>1.4、创建log4j.properties和db.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Global logging configuration</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG, stdout</span></span><br><span class="line"><span class="comment"># Console output...</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%5p [%t] - %m%n</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driverClass</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.jdbcUrl</span>=<span class="string">jdbc:mysql://localhost:3306/ssm_mybatis?serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="meta">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">p123456</span></span><br></pre></td></tr></table></figure><h4 id="1-5、测试"><a href="#1-5、测试" class="headerlink" title="1.5、测试"></a>1.5、测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">SqlSessionFactoryBean bean = ac.getBean(SqlSessionFactoryBean.class);</span><br><span class="line">System.out.println(bean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-6、结果"><a href="#1-6、结果" class="headerlink" title="1.6、结果"></a>1.6、结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.mybatis.spring.SqlSessionFactoryBean@708f5957</span><br></pre></td></tr></table></figure><p>输出以上结果代表已经成功！</p><h3 id="2、Dao式开发"><a href="#2、Dao式开发" class="headerlink" title="2、Dao式开发"></a>2、Dao式开发</h3><p>在传统dao层上使用MyBatis和spring整合开发</p><h4 id="2-1、创建实体类"><a href="#2-1、创建实体类" class="headerlink" title="2.1、创建实体类"></a>2.1、创建实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiezhenyu.bean;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer u_id;</span><br><span class="line"><span class="keyword">private</span> String u_username;</span><br><span class="line"><span class="keyword">private</span> String u_password;</span><br><span class="line"><span class="keyword">private</span> String u_sex;</span><br><span class="line"><span class="keyword">private</span> Date u_createTime;</span><br><span class="line"><span class="keyword">private</span> Integer u_cid;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getU_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_id</span><span class="params">(Integer u_id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.u_id = u_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getU_username</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u_username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_username</span><span class="params">(String u_username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.u_username = u_username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getU_password</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u_password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_password</span><span class="params">(String u_password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.u_password = u_password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getU_sex</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u_sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_sex</span><span class="params">(String u_sex)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.u_sex = u_sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getU_createTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u_createTime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_createTime</span><span class="params">(Date u_createTime)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.u_createTime = u_createTime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getU_cid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u_cid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_cid</span><span class="params">(Integer u_cid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.u_cid = u_cid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"User [u_id="</span> + u_id + <span class="string">", u_username="</span> + u_username + <span class="string">", u_password="</span> + u_password + <span class="string">", u_sex="</span> + u_sex</span><br><span class="line">+ <span class="string">", u_createTime="</span> + u_createTime + <span class="string">", u_cid="</span> + u_cid + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2、书写Dao和DaoImpl"><a href="#2-2、书写Dao和DaoImpl" class="headerlink" title="2.2、书写Dao和DaoImpl"></a>2.2、书写Dao和DaoImpl</h4><p>dao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiezhenyu.dao;</span><br><span class="line"><span class="keyword">import</span> com.xiezhenyu.bean.User;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="comment">//根据id查询用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;daoImpl继承SqlSessionDaoSupport，可以通过父类的getSqlSession()方法直接获得session，而父类中的sqlSessionFactory可以通过spring注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiezhenyu.dao;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;</span><br><span class="line"><span class="keyword">import</span> com.xiezhenyu.bean.User;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="comment">//通过父类的方法直接获得session</span></span><br><span class="line">SqlSession session = getSqlSession();</span><br><span class="line"><span class="keyword">return</span> session.selectOne(<span class="string">"UserMapper.selectUserById"</span>,id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3、配置spring配置文件applicationContext-xml"><a href="#2-3、配置spring配置文件applicationContext-xml" class="headerlink" title="2.3、配置spring配置文件applicationContext.xml"></a>2.3、配置spring配置文件applicationContext.xml</h4><p>将工厂注入dao的父类 sqlSessionFactory属性中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将工厂注入dao的父类 sqlSessionFactory属性中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDaoImpl"</span> <span class="attr">class</span>=<span class="string">"com.xiezhenyu.dao.UserDaoImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactoryBean"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-4、配置mybatis配置文件"><a href="#2-4、配置mybatis配置文件" class="headerlink" title="2.4、配置mybatis配置文件"></a>2.4、配置mybatis配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/xiezhenyu/mapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-5、测试"><a href="#2-5、测试" class="headerlink" title="2.5、测试"></a>2.5、测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DaoTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">UserDaoImpl userDao = ac.getBean(UserDaoImpl.class);</span><br><span class="line">User user = userDao.getUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-6、结果"><a href="#2-6、结果" class="headerlink" title="2.6、结果"></a>2.6、结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User [u_id=1, u_username=老王, u_password=123, u_sex=1, u_createTime=null, u_cid=1]</span><br></pre></td></tr></table></figure><h3 id="3、Mapper动态代理开发"><a href="#3、Mapper动态代理开发" class="headerlink" title="3、Mapper动态代理开发"></a>3、Mapper动态代理开发</h3><h4 id="3-1、创建实体类"><a href="#3-1、创建实体类" class="headerlink" title="3.1、创建实体类"></a>3.1、创建实体类</h4><p>该过程和上面dao层开发的实体类一致，就不给出代码。</p><h4 id="3-2、创建UserMapper接口，修改UserMapper-xml"><a href="#3-2、创建UserMapper接口，修改UserMapper-xml" class="headerlink" title="3.2、创建UserMapper接口，修改UserMapper.xml"></a>3.2、创建UserMapper接口，修改UserMapper.xml</h4><p>将UserMapper.xml的namespace修改为UserMapper接口的路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">selectUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.xiezhenyu.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查找用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">select * from user where u_id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-3、让sqlMapConfig-xml以包的形式扫描mapper-xml"><a href="#3-3、让sqlMapConfig-xml以包的形式扫描mapper-xml" class="headerlink" title="3.3、让sqlMapConfig.xml以包的形式扫描mapper.xml"></a>3.3、让sqlMapConfig.xml以包的形式扫描mapper.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.xiezhenyu.mapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-4、配置spring配置文件applicationContext-xml"><a href="#3-4、配置spring配置文件applicationContext-xml" class="headerlink" title="3.4、配置spring配置文件applicationContext.xml"></a>3.4、配置spring配置文件applicationContext.xml</h4><p>&emsp;&emsp;将MapperFactoryBean交给Spring管理。MapperFactoryBean中拥有属性mapperInterface可以配置mapper的接口，而MapperFactoryBean是继承SqlSessionDaoSupport，使用可以注入sqlSessionFactory。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mapper动态代理开发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"UserMapper"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactoryBean"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置接口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperInterface"</span> <span class="attr">value</span>=<span class="string">"com.xiezhenyu.mapper.UserMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-5、编写测试方法"><a href="#3-5、编写测试方法" class="headerlink" title="3.5、编写测试方法"></a>3.5、编写测试方法</h4><p>获取mapper的方法可以用传递applicationContext.xml中id的方法，也可以直接传递接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//获取主配置文件</span></span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="comment">//UserMapper mapper = (UserMapper)ac.getBean("UserMapper");</span></span><br><span class="line">UserMapper mapper = ac.getBean(UserMapper.class);</span><br><span class="line">User user = mapper.selectUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-6、结果"><a href="#3-6、结果" class="headerlink" title="3.6、结果"></a>3.6、结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User [u_id=1, u_username=老王, u_password=123, u_sex=1, u_createTime=null, u_cid=1]</span><br></pre></td></tr></table></figure><h3 id="4、Mapper动态扫描开发-推荐使用"><a href="#4、Mapper动态扫描开发-推荐使用" class="headerlink" title="4、Mapper动态扫描开发(推荐使用)"></a>4、Mapper动态扫描开发(推荐使用)</h3><p>&emsp;&emsp;在mapper动态扫描开发中只需要配置以下即可，他会自动扫描某个包下的全部mapper，它不用手动注入sqlSessionFactory。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mapper动态扫描开发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.xiezhenyu.mapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、Mybatis和Spring框架整合&quot;&gt;&lt;a href=&quot;#1、Mybatis和Spring框架整合&quot; class=&quot;headerlink&quot; title=&quot;1、Mybatis和Spring框架整合&quot;&gt;&lt;/a&gt;1、Mybatis和Spring框架整合&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
      <category term="SSM" scheme="https://Xiezhenyu98.github.io/categories/SSM/"/>
    
    
      <category term="MyBatis" scheme="https://Xiezhenyu98.github.io/tags/MyBatis/"/>
    
      <category term="Spring" scheme="https://Xiezhenyu98.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis动态sql：更方便的拼接sql语句</title>
    <link href="https://Xiezhenyu98.github.io/2019/10/19/MyBatis%E5%8A%A8%E6%80%81sql%EF%BC%9A%E6%9B%B4%E6%96%B9%E4%BE%BF%E7%9A%84%E6%8B%BC%E6%8E%A5sql%E8%AF%AD%E5%8F%A5/"/>
    <id>https://Xiezhenyu98.github.io/2019/10/19/MyBatis动态sql：更方便的拼接sql语句/</id>
    <published>2019-10-19T08:06:18.167Z</published>
    <updated>2019-10-19T08:21:29.634Z</updated>
    
    <content type="html"><![CDATA[<h3 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h3><p>&emsp;&emsp;if标签是最常用的判断语句，相当于java中的if语句。在MyBatis中使用if标签，我们先看一下不使用if标签的时候会有什么情况。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 多条件查询 用过用户对象中的条件查询用户列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserListByUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询用户性别 模糊查询用户名 查询用户cid 国籍id --&gt;</span></span><br><span class="line">select * </span><br><span class="line">from user </span><br><span class="line">where </span><br><span class="line">u_sex = #&#123;u_sex&#125; </span><br><span class="line">and u_username like "%"#&#123;u_username&#125;"%" </span><br><span class="line">and u_cid = #&#123;u_cid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在上面的案例中，多条件查询用户性别u_sex，模糊查询用户名u_username，查询用户国籍c_id，返回一个集合。我们在使用条sql语句的时候，我们必须把所有的参数传过来，如果出现我只有查询用户性别u_sex，模糊查询用户名u_username的情况，我们又必须再写一条sql语句。而使用了if标签之后可以解决这个问题。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 多条件查询 用过用户对象中的条件查询用户列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserListByUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询用户性别 模糊查询用户名 查询用户cid 国籍id --&gt;</span></span><br><span class="line">select * </span><br><span class="line">from user </span><br><span class="line">where </span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_sex!=null"</span>&gt;</span></span><br><span class="line">u_sex = #&#123;u_sex&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span>';l.,</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_username!=null"</span>&gt;</span></span><br><span class="line">and u_username like "%"#&#123;u_username&#125;"%" </span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_cid!=null"</span>&gt;</span></span><br><span class="line">and u_cid = #&#123;u_cid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在上面的案例中，当参数u_username传递进映射器时，如果参数不为空则再sql语句上拼接上对用户名的模糊查询，如果为空，则不拼接。这样我们就可以不用写多条sql语句了。但是，如果我们u_sex为空u_username不为空，在sql语句拼接时就会出现<code>select * from user where and u_username like &quot;%&quot;#{u_username}&quot;%&quot;</code>的错误语法格式。接下来的where标签可以解决这个问题。</p><h3 id="where标签"><a href="#where标签" class="headerlink" title="where标签"></a>where标签</h3><p>&emsp;&emsp;where标签，当标签内的条件成立时，才会加入where这个SQL关键字到组装的SQL里面，否则就不加入，where还可以去掉一些特殊的SQL语法，比如说and、or，它去掉的时前缀的and和or。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserListByUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询用户性别 模糊查询用户名 查询用户cid 国籍id --&gt;</span></span><br><span class="line">select * </span><br><span class="line">from user </span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_sex!=null"</span>&gt;</span></span><br><span class="line">u_sex = #&#123;u_sex&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_username!=null"</span>&gt;</span></span><br><span class="line">and u_username like "%"#&#123;u_username&#125;"%" </span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_cid!=null"</span>&gt;</span></span><br><span class="line">and u_cid = #&#123;u_cid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在上面的案例中，如果and全写在sql拼接语句的后面，当c_cid==null的话，使用where语句就去不掉结尾的and。接下来的trim标签可以解决这个问题。</p><h3 id="trim标签"><a href="#trim标签" class="headerlink" title="trim标签"></a>trim标签</h3><p>&emsp;&emsp;trim标签是要去掉一些特殊的字符串，它又四个属性，prefix、suffix、prefixOverrides、suffixOverrides。下面通过一个例子说一下这四个属性分别代表的意义。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserListByUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询用户性别 模糊查询用户名 查询用户cid 国籍id --&gt;</span></span><br><span class="line">select * </span><br><span class="line">from user </span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">suffixOverrides</span>=<span class="string">"and"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_sex!=null"</span>&gt;</span></span><br><span class="line">u_sex = #&#123;u_sex&#125; and </span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_username!=null"</span>&gt;</span></span><br><span class="line">u_username like "%"#&#123;u_username&#125;"%" and </span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_cid!=null"</span>&gt;</span></span><br><span class="line">u_cid = #&#123;u_cid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;prefix=”where”，的意思是在trim头标签加上where之后再拼接上trim内的SQL语句，如果将其换成suffix=”where”的话，就会在trim内的的SQL语句后面接上where，显然在上面的案例中是不对的。<br>&emsp;&emsp;suffixOverrides=”and”，的意思是去掉拼接语句尾部一些不合法的一些特殊字符，比如说and、or，如果将其换成prefixOverrides=”and”的话，就是去掉拼接语句开头一些不合法的的特殊字符。</p><h3 id="set标签"><a href="#set标签" class="headerlink" title="set标签"></a>set标签</h3><p>set标签在跟新表属性的时候，如果遇上不合法的逗号，会将其去掉。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateSetUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修改用户名和用户密码以及性别以id为限制 --&gt;</span></span><br><span class="line">update user</span><br><span class="line">set</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_username!=null and u_username!=''"</span>&gt;</span></span><br><span class="line">u_username = #&#123;u_username&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_password!=null and u_password!=''"</span>&gt;</span></span><br><span class="line">u_password = #&#123;u_password&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_sex!=null and u_sex!=''"</span>&gt;</span></span><br><span class="line">u_sex = #&#123;u_sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">where u_id = #&#123;u_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在上面这个案例中，如果if语句最后一个不成立而它上一个if语句成立的时候，在拼接SQL语句的时候，就会出现SQL语法的错误，而使用set标签可以很好的解决这个错误。下面是使用set标签的案例。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateSetUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修改用户名和用户密码以及性别以id为限制 --&gt;</span></span><br><span class="line">update user</span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_username!=null and u_username!=''"</span>&gt;</span></span><br><span class="line">u_username = #&#123;u_username&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_password!=null and u_password!=''"</span>&gt;</span></span><br><span class="line">u_password = #&#123;u_password&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_sex!=null and u_sex!=''"</span>&gt;</span></span><br><span class="line">u_sex = #&#123;u_sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">where u_id = #&#123;u_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如果最后一个条件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">### foreach标签</span><br><span class="line">&amp;emsp;&amp;emsp;foreach标签是一个循环语句，它的作用是遍历集合，它能够很好地支持数组和List、Set接口的集合，对此提供遍历的功能。</span><br><span class="line">&amp;emsp;&amp;emsp;比如说，我要查找数据库中id为1、3、5的用户，SQL语句应该这样写```select * from user where u_id in(1,3,5)```只能固定查3个id的用户，如果要查4个，必须再写一条sql语句，而foreach可以很好的解决这个问题。</span><br><span class="line">```xml</span><br><span class="line">&lt;select id=&quot;selectUserListByIds&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">select *</span><br><span class="line">from user</span><br><span class="line">where u_id </span><br><span class="line">in</span><br><span class="line">&lt;foreach collection=&quot;array&quot; item=&quot;id&quot; open=&quot;(&quot; close=&quot;)&quot; separator=&quot;,&quot;&gt;</span><br><span class="line">#&#123;id&#125;</span><br><span class="line">&lt;/foreach&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><ul><li>collection表示传入的是数组还是集合是数组用array，是集合用list、set等，但如果是包装类的话，则需要使用包装类里面数组或集合的字段名。</li><li>item表示用什么表示数据或者集合里面的数，即循环中当前的元素。</li><li>open、close表示用什么元素把集合两端包起来。</li><li>separate表示用什么分隔。</li><li>index表示当前元素在集合中的位置。<h3 id="choose、when、otherwise标签"><a href="#choose、when、otherwise标签" class="headerlink" title="choose、when、otherwise标签"></a>choose、when、otherwise标签</h3>&emsp;&emsp;choose、when、otherwise标签类似于java里面的wsitch…case…default…功能语句。下面是一个简单的案例。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserByUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.xiezhenyu.bean.User"</span> <span class="attr">resultType</span>=<span class="string">"com.xiezhenyu.bean.User"</span>&gt;</span></span><br><span class="line">select *</span><br><span class="line">from user</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"u_id!=null"</span>&gt;</span></span><br><span class="line">and u_id=#&#123;u_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"u_username!=null"</span>&gt;</span></span><br><span class="line">and u_username=#&#123;u_username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">and 1=2</span><br><span class="line"><span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;当传过来的user的id不为空时，按照id为条件去查找，当传过来的id为空而username不为空时按照username去查找，当两个都为空时，查找不到。</p><h3 id="sql标签"><a href="#sql标签" class="headerlink" title="sql标签"></a>sql标签</h3><p>&emsp;&emsp;在写sql语句的时候，有很多重复的语句片段，比如说，<figure class="highlight plain"><figcaption><span>* from user```这句话就被重复了很多次，而使用sql标签可以将这些重复的字段提出来，什么时候用就引入一下就可以了。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">```xml</span><br><span class="line">&lt;sql id=&quot;selectUser&quot;&gt;</span><br><span class="line">select *</span><br><span class="line">from user</span><br><span class="line">&lt;/sql&gt;</span><br><span class="line">&lt;select id=&quot;selectUserListByIds&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">&lt;include refid=&quot;selectUser&quot;/&gt;</span><br><span class="line">where u_id </span><br><span class="line">in</span><br><span class="line">&lt;foreach collection=&quot;array&quot; item=&quot;id&quot; open=&quot;(&quot; close=&quot;)&quot; separator=&quot;,&quot; index=&quot;2&quot;&gt;</span><br><span class="line">#&#123;id&#125;</span><br><span class="line">&lt;/foreach&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><h3 id="bind标签"><a href="#bind标签" class="headerlink" title="bind标签"></a>bind标签</h3><p>&emsp;&emsp;bind标签的作用是用过ONGL表达式去定义一个上下文变量，这样更方便使用，例如在进行模糊查询时，MySQL需要用到%和参数连接。<br>定义接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUserLikeUsername</span><span class="params">(@Param(<span class="string">"str"</span>)</span>String str)</span>;</span><br></pre></td></tr></table></figure><p>定义映射文件和一个新的变量，然后执行模糊查询</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserLikeUsername"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"com.xiezhenyu.bean.User"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">"'%'+str+'%'"</span>/&gt;</span></span><br><span class="line">select *</span><br><span class="line">from user</span><br><span class="line">where</span><br><span class="line">u_username like #&#123;pattern&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test11</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line">InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//需要sqlSessionFactoryBulider</span></span><br><span class="line">SqlSessionFactoryBuilder ssfb = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">//创建sqlSessionFactory</span></span><br><span class="line">SqlSessionFactory ssf = ssfb.build(in);</span><br><span class="line"><span class="comment">//生产一个sqlSession</span></span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line">UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; list = mapper.selectUserLikeUsername(<span class="string">"王"</span>);</span><br><span class="line"><span class="keyword">for</span>(User u : list) &#123;</span><br><span class="line">System.out.println(u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;if标签&quot;&gt;&lt;a href=&quot;#if标签&quot; class=&quot;headerlink&quot; title=&quot;if标签&quot;&gt;&lt;/a&gt;if标签&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;if标签是最常用的判断语句，相当于java中的if语句。在MyBatis中使用if标签，我们先看一下
      
    
    </summary>
    
    
      <category term="SSM" scheme="https://Xiezhenyu98.github.io/categories/SSM/"/>
    
    
      <category term="MyBatis" scheme="https://Xiezhenyu98.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis的输入和输出映射</title>
    <link href="https://Xiezhenyu98.github.io/2019/10/17/MyBatis%E7%9A%84%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA%E6%98%A0%E5%B0%84/"/>
    <id>https://Xiezhenyu98.github.io/2019/10/17/MyBatis的输入和输出映射/</id>
    <published>2019-10-17T11:11:41.165Z</published>
    <updated>2019-10-17T11:11:09.535Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;MyBatis的输入和输出映射，通过parameterType完成输入映射，通过resultType和resultMap完成输出映射。</p><h2 id="1、输入映射parameterType"><a href="#1、输入映射parameterType" class="headerlink" title="1、输入映射parameterType"></a>1、输入映射parameterType</h2><p>&emsp;&emsp;输入映射中，可以给出类的全名，也可以给出类的别名，但是别名必须是MyBatis内部定义或者自定义的，可以选择JavaBean、Map等简单的参数类型传递给SQL。</p><h3 id="1-1基本类型"><a href="#1-1基本类型" class="headerlink" title="1.1基本类型"></a>1.1基本类型</h3><p>&emsp;&emsp;基本类型可以使用别名的方式，如果想要查看常见的 Java 类型内建的相应的类型别名，<a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases" target="_blank" rel="noopener">点击这里</a>，它们都是不区分大小写的。(具体的测试方法可以看我上一篇写的博客)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUserById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">delete from user where u_id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2自定义对象"><a href="#1-2自定义对象" class="headerlink" title="1.2自定义对象"></a>1.2自定义对象</h3><p>&emsp;&emsp;输入类型还可以为自定义的对象，在书写Sql语句获取数值的时候，可以使用”#{对象字段名}”的方式取得数值。以下就是通过输入一个自定义对象的方式将参数传递给SQL，实现修改指定用户名的功能。(具体的测试方法可以看我上一篇写的博客)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"io.xiezhenyu98.bean.User"</span>&gt;</span></span><br><span class="line">update user set u_username = #&#123;u_username&#125; where u_id=#&#123;u_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3自定义包装类"><a href="#1-3自定义包装类" class="headerlink" title="1.3自定义包装类"></a>1.3自定义包装类</h3><p>&emsp;&emsp;输入类型还可以为自定义的包装类，在书写SQL语句获取数值的时候，可以使用”#{包装类字段.被包装类字段}”的方法获得数值。<br>UserVo.java包装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVo</span> </span>&#123;</span><br><span class="line"><span class="comment">//包装类</span></span><br><span class="line"><span class="comment">//需要全部的user对象信息</span></span><br><span class="line"><span class="keyword">private</span> User user;</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.user = user;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需要表B的id name属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserMapper.java接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过UserVo id查询一个用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">selectUserByUserVoId</span><span class="params">(UserVo vo)</span></span>;</span><br></pre></td></tr></table></figure><p>UserMapper.xml映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查找用户UserVo --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserByUserVoId"</span> <span class="attr">parameterType</span>=<span class="string">"UserVo"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">select * from user where u_id = #&#123;user.u_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line">InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//需要sqlSessionFactoryBulider</span></span><br><span class="line">SqlSessionFactoryBuilder ssfb = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">//创建sqlSessionFactory</span></span><br><span class="line">SqlSessionFactory ssf = ssfb.build(in);</span><br><span class="line"><span class="comment">//生产一个sqlSession</span></span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line">UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">UserVo vo = <span class="keyword">new</span> UserVo();</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setU_id(<span class="number">1</span>);</span><br><span class="line">vo.setUser(user);</span><br><span class="line">User resultUser = mapper.selectUserByUserVoId(vo);</span><br><span class="line">System.out.println(resultUser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User [u_id=1, u_username=老王, u_password=123, u_sex=1, u_createTime=null, u_cid=1]</span><br></pre></td></tr></table></figure><h2 id="2、输出映射resultType、resultMap"><a href="#2、输出映射resultType、resultMap" class="headerlink" title="2、输出映射resultType、resultMap"></a>2、输出映射resultType、resultMap</h2><h3 id="2-1resultType"><a href="#2-1resultType" class="headerlink" title="2.1resultType"></a>2.1resultType</h3><p>&emsp;&emsp;resultType，定义类的全路径，在允许自动匹配的情况下，结果集将通过JavaBean的规范映射，数据库中表的字段名和JavaBean中的字段名对应，或定义为int、double、float、map等参数，也可以使用别名，但是要符合别名的规范，且不能和resultMap同时使用。resultType是常用的参数之一，比如统计总条数时可以把它设置为int。</p><h4 id="2-1-1基本类型"><a href="#2-1-1基本类型" class="headerlink" title="2.1.1基本类型"></a>2.1.1基本类型</h4><p>&emsp;&emsp;输出映射的基本类型和输入映射的基本类型一样，可以使用别名的方式，如果想要查看常见的 Java 类型内建的相应的类型别名，<a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases" target="_blank" rel="noopener">点击这里</a>，它们都是不区分大小写的。以下是查询用户总数返回Integer的返回值。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询用户总条数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserCount"</span> <span class="attr">resultType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">select count(*) from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2自定义类型"><a href="#2-1-2自定义类型" class="headerlink" title="2.1.2自定义类型"></a>2.1.2自定义类型</h4><p>输出映射的自定义类型(具体的测试方法可以看我上一篇写的博客)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查找用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">select * from user where u_id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2resultMap"><a href="#2-2resultMap" class="headerlink" title="2.2resultMap"></a>2.2resultMap</h3><p>&emsp;&emsp;resultMap，它是映射集的引用，将执行强大的映射功能。可以使用resultType、resultMap的其中一个，resultMap能提供自定义映射规则的机会，数据库中表的字段名和JavaBean中的字段名不对应，则需要添加自定义映射。resultMap是MyBatis最复杂的元素，可以配置映射规则、级联、typeHandler等等。</p><h4 id="2-2-1Bean对象字段与数据库中字段不匹配"><a href="#2-2-1Bean对象字段与数据库中字段不匹配" class="headerlink" title="2.2.1Bean对象字段与数据库中字段不匹配"></a>2.2.1Bean对象字段与数据库中字段不匹配</h4><p>创建Country实例，实例中Country的id与数据库中的不匹配(数据库中的为c_id)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Country</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String c_countryname;</span><br><span class="line"><span class="keyword">private</span> String c_capital;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getC_countryname</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_countryname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setC_countryname</span><span class="params">(String c_countryname)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.c_countryname = c_countryname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getC_capital</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_capital;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setC_capital</span><span class="params">(String c_capital)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.c_capital = c_capital;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Country [id="</span> + id + <span class="string">", c_countryname="</span> + c_countryname + <span class="string">", c_capital="</span> + c_capital + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建CountryMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> com.siliedu.bean.Country;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CountryMapper</span> </span>&#123;</span><br><span class="line"><span class="comment">//查询所有</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Country&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建CountryMapper映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.siliedu.mapper.CountryMapper"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询所有 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- country为resultMap起一个名字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Country"</span> <span class="attr">id</span>=<span class="string">"country"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id为javaBean中的字段，c_id为数据库中的字段，两个字段不匹配 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"c_id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- country为使用名为country的resultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultMap</span>=<span class="string">"country"</span>&gt;</span></span><br><span class="line">select * from country</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test5</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line">InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//需要sqlSessionFactoryBulider</span></span><br><span class="line">SqlSessionFactoryBuilder ssfb = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">//创建sqlSessionFactory</span></span><br><span class="line">SqlSessionFactory ssf = ssfb.build(in);</span><br><span class="line"><span class="comment">//生产一个sqlSession</span></span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line">CountryMapper mapper = session.getMapper(CountryMapper.class);</span><br><span class="line">List&lt;Country&gt; list = mapper.selectAll();</span><br><span class="line"><span class="keyword">for</span>(Country c : list) &#123;</span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Country [id=1, c_countryname=中国, c_capital=北京]</span><br><span class="line">Country [id=3, c_countryname=美国, c_capital=华盛顿]</span><br><span class="line">Country [id=4, c_countryname=英国, c_capital=伦敦]</span><br><span class="line">Country [id=5, c_countryname=日本, c_capital=东京]</span><br></pre></td></tr></table></figure><p>在这里如果我们将resultMap改成resultType的话，id将查询不到。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"country"</span>&gt;</span></span><br><span class="line">select * from country</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Country [id=null, c_countryname=中国, c_capital=北京]</span><br><span class="line">Country [id=null, c_countryname=美国, c_capital=华盛顿]</span><br><span class="line">Country [id=null, c_countryname=英国, c_capital=伦敦]</span><br><span class="line">Country [id=null, c_countryname=日本, c_capital=东京]</span><br></pre></td></tr></table></figure><h4 id="2-2-2关联查询"><a href="#2-2-2关联查询" class="headerlink" title="2.2.2关联查询"></a>2.2.2关联查询</h4><h5 id="2-2-2-1一对一"><a href="#2-2-2-1一对一" class="headerlink" title="2.2.2.1一对一"></a>2.2.2.1一对一</h5><p>&emsp;&emsp;一个用户只对应一个国家。(在单表查询的时候，javaBean对象的字段和数据库字段一致的时候可以省略但在多表查询的时候，我们要查询什么字段，就必须把什么字段列在映射文件上)<br>UserVo包装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVo</span> <span class="keyword">extends</span> <span class="title">User</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Country country;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Country <span class="title">getCountry</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> country;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCountry</span><span class="params">(Country country)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.country = country;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"UserVo [country="</span> + country + <span class="string">", getU_id()="</span> + getU_id() + <span class="string">", getU_username()="</span> + getU_username()</span><br><span class="line">+ <span class="string">", getU_sex()="</span> + getU_sex() + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询所有用户的包装类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;UserVo&gt; <span class="title">selectAllUserVo</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>UserMapper.xml映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询所有用户的包装类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"UserVo"</span> <span class="attr">id</span>=<span class="string">"uservolist"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在单表查询的时候，javaBean对象的字段和数据库字段一致的时候可以省略</span></span><br><span class="line"><span class="comment"> 但在多表查询的时候，我们要查询什么字段，就必须把什么字段列上去 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"u_id"</span> <span class="attr">column</span>=<span class="string">"u_id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"u_username"</span> <span class="attr">column</span>=<span class="string">"u_username"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"u_sex"</span> <span class="attr">column</span>=<span class="string">"u_sex"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"country"</span> <span class="attr">javaType</span>=<span class="string">"Country"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"c_id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"c_countryname"</span> <span class="attr">column</span>=<span class="string">"c_countryname"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAllUserVo"</span> <span class="attr">resultMap</span>=<span class="string">"uservolist"</span>&gt;</span></span><br><span class="line">select u.u_id,u.u_username,u.u_sex,c.c_id,c.c_countryname from user u left join country c on u.u_cid=c.c_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test6</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line">InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//需要sqlSessionFactoryBulider</span></span><br><span class="line">SqlSessionFactoryBuilder ssfb = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">//创建sqlSessionFactory</span></span><br><span class="line">SqlSessionFactory ssf = ssfb.build(in);</span><br><span class="line"><span class="comment">//生产一个sqlSession</span></span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line">UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">List&lt;UserVo&gt; list = mapper.selectAllUserVo();</span><br><span class="line"><span class="keyword">for</span>(UserVo userVo : list) &#123;</span><br><span class="line">System.out.println(userVo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：查询到了所有的用户，以及用户的国家，没有国家的用户也查询到了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">UserVo [country=Country [id=1, c_countryname=中国, c_capital=null], getU_id()=1, getU_username()=老王, getU_sex()=1]</span><br><span class="line">UserVo [country=Country [id=3, c_countryname=美国, c_capital=null], getU_id()=2, getU_username()=jack, getU_sex()=1]</span><br><span class="line">UserVo [country=Country [id=3, c_countryname=美国, c_capital=null], getU_id()=3, getU_username()=alice, getU_sex()=0]</span><br><span class="line">UserVo [country=Country [id=1, c_countryname=中国, c_capital=null], getU_id()=4, getU_username()=王司机, getU_sex()=1]</span><br><span class="line">UserVo [country=Country [id=4, c_countryname=英国, c_capital=null], getU_id()=5, getU_username()=anna, getU_sex()=0]</span><br><span class="line">UserVo [country=Country [id=1, c_countryname=中国, c_capital=null], getU_id()=6, getU_username()=李师傅, getU_sex()=1]</span><br><span class="line">UserVo [country=Country [id=5, c_countryname=日本, c_capital=null], getU_id()=7, getU_username()=漩涡鸣人, getU_sex()=1]</span><br><span class="line">UserVo [country=Country [id=5, c_countryname=日本, c_capital=null], getU_id()=8, getU_username()=娜美, getU_sex()=0]</span><br><span class="line">UserVo [country=Country [id=1, c_countryname=中国, c_capital=null], getU_id()=9, getU_username()=王五, getU_sex()=1]</span><br><span class="line">UserVo [country=null, getU_id()=10, getU_username()=老赵, getU_sex()=null]</span><br><span class="line">UserVo [country=null, getU_id()=11, getU_username()=老孙, getU_sex()=null]</span><br><span class="line">UserVo [country=null, getU_id()=12, getU_username()=98k, getU_sex()=null]</span><br></pre></td></tr></table></figure><h5 id="2-2-2-1一对多"><a href="#2-2-2-1一对多" class="headerlink" title="2.2.2.1一对多"></a>2.2.2.1一对多</h5><p>一个国家有多个用户。<br>CountryVo包装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountryVo</span> <span class="keyword">extends</span> <span class="title">Country</span></span>&#123;</span><br><span class="line"><span class="comment">//需要维护一个User集合</span></span><br><span class="line"><span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserList</span><span class="params">(List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userList = userList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"CountryVo [userList="</span> + userList + <span class="string">", toString()="</span> + <span class="keyword">super</span>.toString() + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CountryMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询所有的CountryVo</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;CountryVo&gt; <span class="title">selectAllCountryVo</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>CountryMapper映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询所有的CountryVo --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"CountryVo"</span> <span class="attr">id</span>=<span class="string">"countryvo"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"c_id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"c_countryname"</span> <span class="attr">column</span>=<span class="string">"c_countryname"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"c_capital"</span> <span class="attr">column</span>=<span class="string">"c_capital"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 一对多关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"userList"</span> <span class="attr">ofType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"u_id"</span> <span class="attr">column</span>=<span class="string">"u_id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"u_username"</span> <span class="attr">column</span>=<span class="string">"u_username"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAllCountryVo"</span> <span class="attr">resultMap</span>=<span class="string">"countryvo"</span>&gt;</span></span><br><span class="line">select </span><br><span class="line">c.c_id,</span><br><span class="line">c.c_countryname,</span><br><span class="line">c.c_capital,</span><br><span class="line">u.u_id,</span><br><span class="line">u.u_username </span><br><span class="line">from country c </span><br><span class="line">left join </span><br><span class="line">user u on </span><br><span class="line">u.u_cid=c.c_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test7</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line">InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//需要sqlSessionFactoryBulider</span></span><br><span class="line">SqlSessionFactoryBuilder ssfb = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">//创建sqlSessionFactory</span></span><br><span class="line">SqlSessionFactory ssf = ssfb.build(in);</span><br><span class="line"><span class="comment">//生产一个sqlSession</span></span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line">CountryMapper mapper = session.getMapper(CountryMapper.class);</span><br><span class="line">List&lt;CountryVo&gt; list = mapper.selectAllCountryVo();</span><br><span class="line"><span class="keyword">for</span>(CountryVo countryVo : list) &#123;</span><br><span class="line">System.out.println(countryVo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：查询出了，一个国家有几个用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CountryVo [userList=[User [u_id=1, u_username=老王, u_password=null, u_sex=null, u_createTime=null, u_cid=null], User [u_id=4, u_username=王司机, u_password=null, u_sex=null, u_createTime=null, u_cid=null], User [u_id=6, u_username=李师傅, u_password=null, u_sex=null, u_createTime=null, u_cid=null], User [u_id=9, u_username=王五, u_password=null, u_sex=null, u_createTime=null, u_cid=null]], toString()=Country [id=1, c_countryname=中国, c_capital=北京]]</span><br><span class="line">CountryVo [userList=[User [u_id=2, u_username=jack, u_password=null, u_sex=null, u_createTime=null, u_cid=null], User [u_id=3, u_username=alice, u_password=null, u_sex=null, u_createTime=null, u_cid=null]], toString()=Country [id=3, c_countryname=美国, c_capital=华盛顿]]</span><br><span class="line">CountryVo [userList=[User [u_id=5, u_username=anna, u_password=null, u_sex=null, u_createTime=null, u_cid=null]], toString()=Country [id=4, c_countryname=英国, c_capital=伦敦]]</span><br><span class="line">CountryVo [userList=[User [u_id=7, u_username=漩涡鸣人, u_password=null, u_sex=null, u_createTime=null, u_cid=null], User [u_id=8, u_username=娜美, u_password=null, u_sex=null, u_createTime=null, u_cid=null]], toString()=Country [id=5, c_countryname=日本, c_capital=东京]]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;MyBatis的输入和输出映射，通过parameterType完成输入映射，通过resultType和resultMap完成输出映射。&lt;/p&gt;
&lt;h2 id=&quot;1、输入映射parameterType&quot;&gt;&lt;a href=&quot;#1、输入映射paramete
      
    
    </summary>
    
    
      <category term="SSM" scheme="https://Xiezhenyu98.github.io/categories/SSM/"/>
    
    
      <category term="MyBatis" scheme="https://Xiezhenyu98.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MaBatis的Mapper动态代理开发</title>
    <link href="https://Xiezhenyu98.github.io/2019/10/17/MaBatis%E7%9A%84Mapper%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%BC%80%E5%8F%91/"/>
    <id>https://Xiezhenyu98.github.io/2019/10/17/MaBatis的Mapper动态代理开发/</id>
    <published>2019-10-17T03:53:03.885Z</published>
    <updated>2019-10-17T03:52:29.110Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-SqlSession的介绍"><a href="#1-SqlSession的介绍" class="headerlink" title="1 SqlSession的介绍"></a>1 SqlSession的介绍</h3><p>&emsp;&emsp;SqlSession中封装了对数据库的操作，比如：更新、删除、查询等。通过SqlSessionFactory创建SqlSession，而SqlSessionFactory是由SqlSessionFactoryBuilder来创建的。</p><h4 id="1-1-SqlSessionFactoryBuilder"><a href="#1-1-SqlSessionFactoryBuilder" class="headerlink" title="1.1 SqlSessionFactoryBuilder"></a>1.1 SqlSessionFactoryBuilder</h4><p>SqlSessionFactoryBuilder的作用是创建SqlSessionFacoty，SqlSessionFacoty创建了之后就不需要SqlSessionFactoryBuilder了，由于SqlSession是通过SqlSessionFactory生产，所以一般是将SqlSessionFactoryBuilder当成一个工具类使用，需要创建sqlSessionFactory时就new一个 SqlSessionFactoryBuilder，和Spring整合后由Spring以单例方式管理sqlSessionFactory。</p><h4 id="1-2-SqlSessionFactory"><a href="#1-2-SqlSessionFactory" class="headerlink" title="1.2 SqlSessionFactory"></a>1.2 SqlSessionFactory</h4><p>SqlSession是一个面向用户的接口， sqlSession中定义了数据库操作，默认使用DefaultSqlSession实现类。</p><h3 id="2-MaBatis对Dao层的开发方式"><a href="#2-MaBatis对Dao层的开发方式" class="headerlink" title="2 MaBatis对Dao层的开发方式"></a>2 MaBatis对Dao层的开发方式</h3><h4 id="2-1-不使用Mapper动态代理开发"><a href="#2-1-不使用Mapper动态代理开发" class="headerlink" title="2.1 不使用Mapper动态代理开发"></a>2.1 不使用Mapper动态代理开发</h4><p>编写dao层接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="comment">//根据id查询用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写dao层接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="comment">//sqlSession 工厂</span></span><br><span class="line"><span class="keyword">private</span> SqlSessionFactory ssf;</span><br><span class="line"><span class="comment">//通过构造器给ssf赋值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">(SqlSessionFactory ssf)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.ssf = ssf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="comment">//生产一个sqlSession</span></span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line">User user session.selectOne(<span class="string">"UserMapper.selectUserById"</span>,id);</span><br><span class="line">session.close();</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line"><span class="comment">//sqlSession 工厂</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory ssf;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line">InputStream in;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">in = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactoryBuilder ssfb = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">ssf = ssfb.build(in);</span><br><span class="line">in.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DaoTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">UserDao dao = <span class="keyword">new</span> UserDaoImpl(ssf);</span><br><span class="line">User user = dao.getUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;不使用Mapper动态代理开发可以从代码中看到一些问题，每次我们调用SqlSession都要完成打开session、调用session完成与数据库的交互、关闭session，这三步，这些都是重复的代码。</p><h4 id="2-2-使用Mapper动态代理开发"><a href="#2-2-使用Mapper动态代理开发" class="headerlink" title="2.2 使用Mapper动态代理开发"></a>2.2 使用Mapper动态代理开发</h4><p>首先想使用Mapper动态代理开发必须遵循四大原则加一个注意：</p><ul><li>接口方法名需要与mapper.xml的要调用的sql语句的id一致</li><li>接口的形参类型需要与mapper.xml中的parameterType一致</li><li>接口的返回值需要与mapper.xml中的resultType一致</li><li>mapper.xml中的namespace要与接口的全包名一致<br>注意：mapper动态代理开发中，根据返回值类型自动选择方法</li></ul><p>UserMapper接口(mybatis提出mapper接口,相当于dao接口,mapper接口的命名方式建议为表名加Mapper)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"><span class="comment">//通过id查询一个用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">selectUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserMapper映射文件(mapper映射文件的命名方式建议表名加Mapper.xml,namespace指定为mapper接口的全限定名)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mapper.xml中的namespace要与接口的全包名一致 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.xiezhenyu.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查找用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">select * from user where u_id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将mapper.xml在SqlMapConfing.xml中进行注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.xiezhenyu.mapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line">InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//需要sqlSessionFactoryBulider</span></span><br><span class="line">SqlSessionFactoryBuilder ssfb = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">//创建sqlSessionFactory</span></span><br><span class="line">SqlSessionFactory ssf = ssfb.build(in);</span><br><span class="line"><span class="comment">//生产一个sqlSession</span></span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line">UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">User user = mapper.selectUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User [u_id=1, u_username=老王, u_password=123, u_sex=1, u_createTime=null, u_cid=1]</span><br></pre></td></tr></table></figure><p>总结：使用Mapper代理进行开发<br>&emsp;&emsp;优点：可以使我们只需要关注UserMapper.java接口中的方法，它的实现类由Mapper自动为我们生成，带来了很大的方便。<br>&emsp;&emsp;缺点：如果UserMapper.java接口中的方法调用的statement中返回是多条记录，而mapper.java方法的返回值为JavaBean对象，此时代理对象通过selectOne调用，但由于返回的是多条记录所以会报错。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-SqlSession的介绍&quot;&gt;&lt;a href=&quot;#1-SqlSession的介绍&quot; class=&quot;headerlink&quot; title=&quot;1 SqlSession的介绍&quot;&gt;&lt;/a&gt;1 SqlSession的介绍&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;SqlSes
      
    
    </summary>
    
    
      <category term="SSM" scheme="https://Xiezhenyu98.github.io/categories/SSM/"/>
    
    
      <category term="MyBatis" scheme="https://Xiezhenyu98.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>傻瓜式使用MyBatis</title>
    <link href="https://Xiezhenyu98.github.io/2019/10/13/%E5%82%BB%E7%93%9C%E5%BC%8F%E4%BD%BF%E7%94%A8MyBatis/"/>
    <id>https://Xiezhenyu98.github.io/2019/10/13/傻瓜式使用MyBatis/</id>
    <published>2019-10-13T09:59:27.728Z</published>
    <updated>2019-10-13T11:49:12.882Z</updated>
    
    <content type="html"><![CDATA[<p>MyBatis如何快速使用？</p><h2 id="MyBatis框架图"><a href="#MyBatis框架图" class="headerlink" title="MyBatis框架图"></a>MyBatis框架图</h2><p><img src="https://img-blog.csdnimg.cn/20191013190538652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1、下载MyBatis、创建项目、导包"><a href="#1、下载MyBatis、创建项目、导包" class="headerlink" title="1、下载MyBatis、创建项目、导包"></a>1、下载MyBatis、创建项目、导包</h2><p>&emsp;&emsp;下载MyBatis：<a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/releases</a><br><img src="https://img-blog.csdnimg.cn/20191013165040445.png" alt="在这里插入图片描述"><br>&emsp;&emsp;创建项目之后导入MyBatis的核心包和依赖包以及MySQL的连接包</p><h2 id="2、创建测试用例，测试数据库、测试Bean对象"><a href="#2、创建测试用例，测试数据库、测试Bean对象" class="headerlink" title="2、创建测试用例，测试数据库、测试Bean对象"></a>2、创建测试用例，测试数据库、测试Bean对象</h2><p>&emsp;&emsp;创建测试数据库，直接运行以下SQL语句即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">SQLyog Professional v12.08 (64 bit)</span></span><br><span class="line"><span class="comment">MySQL - 5.5.49 : Database - ssm_mybatis</span></span><br><span class="line"><span class="comment">*********************************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*!40101 SET NAMES utf8 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=''*/</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="comment">/*!32312 IF NOT EXISTS*/</span><span class="string">`ssm_mybatis`</span> <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span>;</span><br><span class="line"><span class="keyword">USE</span> <span class="string">`ssm_mybatis`</span>;</span><br><span class="line"><span class="comment">/*Table structure for table `country` */</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`country`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`country`</span> (</span><br><span class="line">  <span class="string">`c_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'国家id'</span>,</span><br><span class="line">  <span class="string">`c_countryname`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'国家名称'</span>,</span><br><span class="line">  <span class="string">`c_capital`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'国家首都名称'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`c_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">6</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"><span class="comment">/*Data for the table `country` */</span></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`country`</span>(<span class="string">`c_id`</span>,<span class="string">`c_countryname`</span>,<span class="string">`c_capital`</span>) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'中国'</span>,<span class="string">'北京'</span>),(<span class="number">3</span>,<span class="string">'美国'</span>,<span class="string">'华盛顿'</span>),(<span class="number">4</span>,<span class="string">'英国'</span>,<span class="string">'伦敦'</span>),(<span class="number">5</span>,<span class="string">'日本'</span>,<span class="string">'东京'</span>);</span><br><span class="line"><span class="comment">/*Table structure for table `user` */</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`u_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'用户id'</span>,</span><br><span class="line">  <span class="string">`u_username`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户名'</span>,</span><br><span class="line">  <span class="string">`u_password`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户密码'</span>,</span><br><span class="line">  <span class="string">`u_sex`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户性别'</span>,</span><br><span class="line">  <span class="string">`u_createTime`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户创建时间'</span>,</span><br><span class="line">  <span class="string">`u_cid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户国家id'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`u_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`FK_user_cid`</span> (<span class="string">`u_cid`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`FK_user_cid`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`u_cid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`country`</span> (<span class="string">`c_Id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">13</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"><span class="comment">/*Data for the table `user` */</span></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`user`</span>(<span class="string">`u_id`</span>,<span class="string">`u_username`</span>,<span class="string">`u_password`</span>,<span class="string">`u_sex`</span>,<span class="string">`u_createTime`</span>,<span class="string">`u_cid`</span>) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'老王'</span>,<span class="string">'123'</span>,<span class="string">'1'</span>,<span class="literal">NULL</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="string">'jack'</span>,<span class="string">'123321'</span>,<span class="string">'1'</span>,<span class="literal">NULL</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="string">'alice'</span>,<span class="string">'ali111'</span>,<span class="string">'0'</span>,<span class="literal">NULL</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="string">'王司机'</span>,<span class="string">'666'</span>,<span class="string">'1'</span>,<span class="literal">NULL</span>,<span class="number">1</span>),(<span class="number">5</span>,<span class="string">'anna'</span>,<span class="string">'ali111'</span>,<span class="string">'0'</span>,<span class="literal">NULL</span>,<span class="number">4</span>),(<span class="number">6</span>,<span class="string">'李师傅'</span>,<span class="string">'222'</span>,<span class="string">'1'</span>,<span class="literal">NULL</span>,<span class="number">1</span>),(<span class="number">7</span>,<span class="string">'漩涡鸣人'</span>,<span class="string">'233'</span>,<span class="string">'1'</span>,<span class="literal">NULL</span>,<span class="number">5</span>),(<span class="number">8</span>,<span class="string">'娜美'</span>,<span class="string">'233'</span>,<span class="string">'0'</span>,<span class="literal">NULL</span>,<span class="number">5</span>),(<span class="number">9</span>,<span class="string">'王五'</span>,<span class="string">'abc'</span>,<span class="string">'1'</span>,<span class="literal">NULL</span>,<span class="number">1</span>),(<span class="number">10</span>,<span class="string">'老赵'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>),(<span class="number">11</span>,<span class="string">'老孙'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>),(<span class="number">12</span>,<span class="string">'98k'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;创建测试Bean对象，与数据库创建的字段一致，并生成GET和SET方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer u_id;</span><br><span class="line"><span class="keyword">private</span> String u_username;</span><br><span class="line"><span class="keyword">private</span> String u_password;</span><br><span class="line"><span class="keyword">private</span> String u_sex;</span><br><span class="line"><span class="keyword">private</span> Date u_createTime;</span><br><span class="line"><span class="keyword">private</span> Integer u_cid;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getU_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_id</span><span class="params">(Integer u_id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.u_id = u_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getU_username</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u_username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_username</span><span class="params">(String u_username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.u_username = u_username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getU_password</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u_password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_password</span><span class="params">(String u_password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.u_password = u_password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getU_sex</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u_sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_sex</span><span class="params">(String u_sex)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.u_sex = u_sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getU_createTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u_createTime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_createTime</span><span class="params">(Date u_createTime)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.u_createTime = u_createTime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getU_cid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u_cid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_cid</span><span class="params">(Integer u_cid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.u_cid = u_cid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"User [u_id="</span> + u_id + <span class="string">", u_username="</span> + u_username + <span class="string">", u_password="</span> + u_password + <span class="string">", u_sex="</span> + u_sex</span><br><span class="line">+ <span class="string">", u_createTime="</span> + u_createTime + <span class="string">", u_cid="</span> + u_cid + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、创建sqlMapConfig-xml主配置文件"><a href="#3、创建sqlMapConfig-xml主配置文件" class="headerlink" title="3、创建sqlMapConfig.xml主配置文件"></a>3、创建sqlMapConfig.xml主配置文件</h2><p>&emsp;&emsp;以下只是sqlMapConfig.xml主配置文件的一部分(会在快速使用MyBatis中使用到的一部分)，如果想要查看完整的配置文件请查看官方文档：<a href="https://mybatis.org/mybatis-3/zh/configuration.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/configuration.html</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在集成spring时不用 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 使用jdbc的事务 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 使用连接池 链接数据库 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ssm_mybatis?serverTimezone=Asia/Shanghai&amp;amp;characterEncoding=utf-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"p123456"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入映射文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4、创建Mapper-xml映射文件"><a href="#4、创建Mapper-xml映射文件" class="headerlink" title="4、创建Mapper.xml映射文件"></a>4、创建Mapper.xml映射文件</h2><p>&emsp;&emsp;Mapper.xml映射文件中可以书写了查找用户、模糊查找用户、添加用户、修改用户、删除用户的sql语句，其中模糊查找中如果用字符串拼接的形式是不安全的，推荐使用占位符模糊查找。<br>&emsp;&emsp;由于使用占位符查找，如果这样使用#{id}，如果传过来的id为1，他会在#{id}这个位置上显示’1’，加上了单引号，我们都知道模糊查找是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> u_username <span class="keyword">like</span> %你%</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如果我们使用占位符的话%’你’%这样是不行的，所以我们书写SQL语句的时候可以这样用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> u_username <span class="keyword">like</span> <span class="string">"%"</span><span class="string">'你'</span><span class="string">"%"</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;以下是Mapper.xml映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"UserMapper"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查找用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"com.siliedu.bean.User"</span>&gt;</span></span><br><span class="line">select * from user where u_id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #&#123;&#125;占位符 尽量选用占位符解决问题 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- $&#123;&#125;字符串拼接 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 模糊查找用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserByName"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultType</span>=<span class="string">"com.siliedu.bean.User"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  select * from user where u_username like '%$&#123;value&#125;%' --&gt;</span></span><br><span class="line">select * from user where u_username like "%"#&#123;name&#125;"%"</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.siliedu.bean.User"</span>&gt;</span></span><br><span class="line">insert into user values(null,#&#123;u_username&#125;,#&#123;u_password&#125;,#&#123;u_sex&#125;,#&#123;u_createTime&#125;,#&#123;u_cid&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修改用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.siliedu.bean.User"</span>&gt;</span></span><br><span class="line">update user set u_username = #&#123;u_username&#125; where u_id=#&#123;u_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 删除用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUserById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">delete from user where u_id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5、书写测试方法"><a href="#5、书写测试方法" class="headerlink" title="5、书写测试方法"></a>5、书写测试方法</h2><h3 id="测试通过id查找用户"><a href="#测试通过id查找用户" class="headerlink" title="测试通过id查找用户"></a>测试通过id查找用户</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//通过ID查询用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line">InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//需要sqlSessionFactoryBulider</span></span><br><span class="line">SqlSessionFactoryBuilder ssfb = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">//创建sqlSessionFactory</span></span><br><span class="line">SqlSessionFactory ssf = ssfb.build(in);</span><br><span class="line"><span class="comment">//生产一个sqlSession</span></span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line"><span class="comment">//操作数据库</span></span><br><span class="line"><span class="comment">//参数1:要操作的sql语句(对应UserMapper.xml里面的namespace.id)  参数2:sql语句的参数</span></span><br><span class="line">User user = session.selectOne(<span class="string">"UserMapper.selectUserById"</span>, <span class="number">1</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试通过名字模糊查询用户"><a href="#测试通过名字模糊查询用户" class="headerlink" title="测试通过名字模糊查询用户"></a>测试通过名字模糊查询用户</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//通过name模糊查询用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line">InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//需要sqlSessionFactoryBulider</span></span><br><span class="line">SqlSessionFactoryBuilder ssfb = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">//创建sqlSessionFactory</span></span><br><span class="line">SqlSessionFactory ssf = ssfb.build(in);</span><br><span class="line"><span class="comment">//生产一个sqlSession</span></span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line"><span class="comment">//操作数据库</span></span><br><span class="line"><span class="comment">//参数1:要操作的sql语句(对应UserMapper.xml里面的namespace.id)  参数2:sql语句的参数</span></span><br><span class="line">List&lt;User&gt; list = session.selectList(<span class="string">"UserMapper.selectUserByName"</span>, <span class="string">"王"</span>);</span><br><span class="line"><span class="keyword">for</span>(User u : list) &#123;</span><br><span class="line">System.out.println(u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试新增用户"><a href="#测试新增用户" class="headerlink" title="测试新增用户"></a>测试新增用户</h3><p>由于对数据库进行了更新，session必须commit才能使事务提交，数据库才会更新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//通过新增用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line">InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//需要sqlSessionFactoryBulider</span></span><br><span class="line">SqlSessionFactoryBuilder ssfb = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">//创建sqlSessionFactory</span></span><br><span class="line">SqlSessionFactory ssf = ssfb.build(in);</span><br><span class="line"><span class="comment">//生产一个sqlSession</span></span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line"><span class="comment">//操作数据库</span></span><br><span class="line"><span class="comment">//参数1:要操作的sql语句(对应UserMapper.xml里面的namespace.id)  参数2:sql语句的参数</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setU_username(<span class="string">"小明"</span>);</span><br><span class="line">user.setU_password(<span class="string">"123456789"</span>);</span><br><span class="line">user.setU_sex(<span class="string">"1"</span>);</span><br><span class="line">user.setU_createTime(<span class="keyword">new</span> Date());</span><br><span class="line">user.setU_cid(<span class="number">1</span>);</span><br><span class="line">session.insert(<span class="string">"UserMapper.insertUser"</span>, user);</span><br><span class="line">session.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试修改用户"><a href="#测试修改用户" class="headerlink" title="测试修改用户"></a>测试修改用户</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//修改用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line">InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//需要sqlSessionFactoryBulider</span></span><br><span class="line">SqlSessionFactoryBuilder ssfb = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">//创建sqlSessionFactory</span></span><br><span class="line">SqlSessionFactory ssf = ssfb.build(in);</span><br><span class="line"><span class="comment">//生产一个sqlSession</span></span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line"><span class="comment">//操作数据库</span></span><br><span class="line"><span class="comment">//参数1:要操作的sql语句(对应UserMapper.xml里面的namespace.id)  参数2:sql语句的参数</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setU_id(<span class="number">13</span>);</span><br><span class="line">user.setU_username(<span class="string">"小刚"</span>);</span><br><span class="line">session.update(<span class="string">"UserMapper.updateUser"</span>, user);</span><br><span class="line">session.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试删除用户"><a href="#测试删除用户" class="headerlink" title="测试删除用户"></a>测试删除用户</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//删除用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test5</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line">InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//需要sqlSessionFactoryBulider</span></span><br><span class="line">SqlSessionFactoryBuilder ssfb = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">//创建sqlSessionFactory</span></span><br><span class="line">SqlSessionFactory ssf = ssfb.build(in);</span><br><span class="line"><span class="comment">//生产一个sqlSession</span></span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line"><span class="comment">//操作数据库</span></span><br><span class="line"><span class="comment">//参数1:要操作的sql语句(对应UserMapper.xml里面的namespace.id)  参数2:sql语句的参数</span></span><br><span class="line">session.delete(<span class="string">"UserMapper.deleteUserById"</span>, <span class="number">13</span>);</span><br><span class="line">session.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>以上就是MyBatis的简单使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MyBatis如何快速使用？&lt;/p&gt;
&lt;h2 id=&quot;MyBatis框架图&quot;&gt;&lt;a href=&quot;#MyBatis框架图&quot; class=&quot;headerlink&quot; title=&quot;MyBatis框架图&quot;&gt;&lt;/a&gt;MyBatis框架图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https:
      
    
    </summary>
    
    
      <category term="SSM" scheme="https://Xiezhenyu98.github.io/categories/SSM/"/>
    
    
      <category term="MyBatis" scheme="https://Xiezhenyu98.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>聊聊struts.xml配置文件-Struts(二)</title>
    <link href="https://Xiezhenyu98.github.io/2019/10/08/%E8%81%8A%E8%81%8Astruts.xml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-Struts(%E4%BA%8C)/"/>
    <id>https://Xiezhenyu98.github.io/2019/10/08/聊聊struts.xml配置文件-Struts(二)/</id>
    <published>2019-10-08T11:47:44.023Z</published>
    <updated>2019-10-08T12:12:43.249Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;上一篇写了一下struts怎么快速上手使用，下面是struts的配置文件struts.xml中一些配置的解释(●’◡’●)。</p><hr><p>&emsp;&emsp;struts.xml是整个程序的工作流程的依据，该文件的根元素是&lt;struts&gt;，其中可以包含4个子元素，分别是：&lt;include&gt;、&lt;constant&gt;、&lt;bean&gt;、&lt;package&gt;</p><h2 id="lt-include-gt-元素"><a href="#lt-include-gt-元素" class="headerlink" title="&lt;include&gt;元素"></a>&lt;include&gt;元素</h2><p>&emsp;&emsp;由于用struts开发一个大型的项目时，struts中的配置信息会越来越多，这样就会使配置文件的可读性和维护性变差，但使用了&lt;include&gt;就会解决这个问题，我们可以按照不同的功能或者模块将配置文件分割成多个配置文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"login.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"register.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="lt-constant-gt-元素"><a href="#lt-constant-gt-元素" class="headerlink" title="&lt;constant&gt;元素"></a>&lt;constant&gt;元素</h2><p>&emsp;&emsp;&lt;constant&gt;元素用于配置一些常量信息，这些常量用于控制struts2的某些特性，相当于当他运行时，给你准备哪些功能。由于&lt;constant&gt;元素的常量值过多，我只列一些常用的，以下例子是&lt;constant&gt;元素使用的常用设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 匹配所有以".action"为后缀的请求都由struts处理，其中action可变</span></span><br><span class="line"><span class="comment">如果需要匹配多个后缀都由struts处理，则使用英文","号分隔，例如value="do,action"</span></span><br><span class="line"><span class="comment">如果不写这一句，则会默认映射Action名字</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.action.extension"</span> <span class="attr">value</span>=<span class="string">"action"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否启用开发者模式，在开发者模式下可打印出更加详细的报错信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当struts配置文件改动后，是否重新加载，默认不写是false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.configuration.xml.reload"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置浏览器是否缓存静态内容，默认不写为true缓存，在开发环境下最好关闭，可以提高开发效率 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.serve.static.browserCache"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置请求参数的编码方式，实际上相当于相当调用HttpServletRequest中的setCharacterEncoding方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.i18n.encoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 每次HTTP请求系统都重新加载资源文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.i18n.reload"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 文件上传的最大值，单位为字节 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.multipart.maxSize"</span> <span class="attr">value</span>=<span class="string">"1024"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 让Struts支持动态方法调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.enable.DynamicMethodInvocation"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在URL中的Action段中是否支持斜线 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.enable.SlashesInActionNames"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 标签中是否支持ognl表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.tag.altSyntax"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="lt-bean-gt-元素"><a href="#lt-bean-gt-元素" class="headerlink" title="&lt;bean&gt;元素"></a>&lt;bean&gt;元素</h2><p>&emsp;&emsp;struts2是一个可扩展的框架，核心组件都是可以配置的，当我们需要扩展或替换struts2的核心组件时，只需要提供自己的组件实现类，并部署到struts2的容器中即可。<br>&emsp;&emsp;例子：使用一个自定义的ObjectFactory替换struts2内置的ObjectFactory：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"myFactory"</span> <span class="attr">type</span>=<span class="string">"com.opensymphony.xwork2.ObjectFactory"</span> <span class="attr">class</span>=<span class="string">"xiezhenyu.ObjectFactory"</span> /&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="lt-package-gt-元素"><a href="#lt-package-gt-元素" class="headerlink" title="&lt;package&gt;元素"></a>&lt;package&gt;元素</h2><p>&emsp;&emsp;&lt;package&gt;元素提供了将多个Action组织为一个模块的方式，package的name在整个struts配置文件中必须是唯一的，并且一个package可以扩展自另一个package。此时改package会在本身配置的基础上加入扩展package的配置，但要注意父package必须在子package前配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">package的属性</span></span><br><span class="line"><span class="comment">name:package名称，作为其他包引用本包的标识，必填属性</span></span><br><span class="line"><span class="comment">extends:继承的父package名称，可选属性。通常设置为struts-default，继承struts-default.xml，它里面定义了许多跳转类型、拦截器等一些常用的东西</span></span><br><span class="line"><span class="comment">abstract:设置package的属性为抽象的，抽象的package不能定义Action，可选属性。</span></span><br><span class="line"><span class="comment">namespace:可选属性。浏览器地址是根据namespace/action名称去访问的action其中namespace可以是虚路径</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"MyStruts"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&lt;package&gt;子元素列表</p><table><thead><tr><th>子元素</th><th>功能</th></tr></thead><tbody><tr><td>default-action-ref</td><td>配置默认的Action</td></tr><tr><td>default-class-ref</td><td>配置默认class</td></tr><tr><td>default-interceptor-ref</td><td>配置默认拦截器，对package范围内的所有Action有效</td></tr><tr><td>global-results</td><td>配置全局结果集，对package范围内的所有Action有效</td></tr><tr><td>global-exception-mapping</td><td>配置全局异常映射，对package范围内的所有Action有效</td></tr><tr><td>result-types</td><td>配置定义返回结果类型</td></tr><tr><td>interceptors</td><td>配置拦截器信息</td></tr><tr><td>action</td><td>配置Action信息</td></tr></tbody></table><h3 id="lt-default-action-ref-gt"><a href="#lt-default-action-ref-gt" class="headerlink" title="&lt;default-action-ref&gt;"></a>&lt;default-action-ref&gt;</h3><p>&emsp;&emsp;&lt;default-action-ref&gt;元素用于配置默认的Action，当一个Action请求在配置文件中找不到时，就会执行这个默认的Action，该元素只有一个name属性。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">default-action-ref</span> <span class="attr">name</span>=<span class="string">"Error"</span>&gt;</span><span class="tag">&lt;/<span class="name">default-action-ref</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-default-class-ref-gt"><a href="#lt-default-class-ref-gt" class="headerlink" title="&lt;default-class-ref&gt;"></a>&lt;default-class-ref&gt;</h3><p>&emsp;&emsp;&lt;default-class-ref&gt;元素用户配置默认的类，在配置Action时，如果没有指定具体的class属性，系统就会使用&lt;default-class-ref&gt;元素中的配置。&lt;default-class-ref&gt;只有一个class属性。当使用&lt;default-class-ref&gt;元素指定了默认类后，Struts原来默认的类会被覆盖，而且默认的Action类必须包含execute()方法。</p><h3 id="lt-default-interceptor-ref-gt"><a href="#lt-default-interceptor-ref-gt" class="headerlink" title="&lt;default-interceptor-ref&gt;"></a>&lt;default-interceptor-ref&gt;</h3><p>&emsp;&emsp;&lt;default-interceptor-ref&gt;元素用于配置默认类拦截器，如果package继承了“struts-default”，那么也会继承父类package的默认拦截器。</p><h3 id="lt-global-result-gt"><a href="#lt-global-result-gt" class="headerlink" title="&lt;global-result&gt;"></a>&lt;global-result&gt;</h3><p>&emsp;&emsp;&lt;global-result&gt;元素用于配置package范围内的全局结果集。他的子元素是&lt;result&gt;。当一个package中多个Action都使用了一个或多个结果的时候，则将其配置在全局结果集中，增强代码的可读性和维护性。例如下面这个案列：当每个Action都返回了error的时候，全都使用这个全局结果去执行。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">global-result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"error"</span>&gt;</span>/error.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">global-result</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-global-exception-mapping-gt"><a href="#lt-global-exception-mapping-gt" class="headerlink" title="&lt;global-exception-mapping&gt;"></a>&lt;global-exception-mapping&gt;</h3><p>&emsp;&emsp;&lt;global-exception-mapping&gt;元素用于配置全局异常映射，如果&lt;action&gt;元素内配置了自己的异常映射，则Action内的优先级高于此配置。他的子元素是&lt;exception-mapping&gt;。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">global-exception-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exception-mapping</span> <span class="attr">result</span>=<span class="string">"error"</span> <span class="attr">exception</span>=<span class="string">"异常类型"</span>&gt;</span><span class="tag">&lt;/<span class="name">exception-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">global-exception-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-result-type-gt"><a href="#lt-result-type-gt" class="headerlink" title="&lt;result-type&gt;"></a>&lt;result-type&gt;</h3><p>&emsp;&emsp;&lt;result-type&gt;元素用于配置自定义返回结果类型，该元素基本不用。</p><h3 id="lt-interceptors-gt"><a href="#lt-interceptors-gt" class="headerlink" title="&lt;interceptors&gt;"></a>&lt;interceptors&gt;</h3><p>&emsp;&emsp;&lt;interceptors&gt;元素用于配置拦截器的拦截器栈，他有两个子元素：&lt;interceptor&gt;和&lt;interceptor-stack&gt;，分别用来定义拦截器和拦截器栈。</p><h3 id="lt-action-gt"><a href="#lt-action-gt" class="headerlink" title="&lt;action&gt;"></a>&lt;action&gt;</h3><p>&lt;action&gt;元素是比较重要的一个元素，也是我们开发中使用最多的一个元素。它有4个属性：</p><ul><li><p>name：必选属性，Action的名字。</p></li><li><p>class：可选属性，Action处理类的名字。</p></li><li><p>method：可选属性，指定Action中的方法。如果没有配置该属性，所有请求都会被转发到execute()方法去处理。如果有多个请求需要分别交给不同的方法去处理，就可以使用该属性来指明。</p></li><li><p>converter：可选属性，指定Action使用的类型转换器。</p><p>&emsp;&emsp;method属性除了可以填固定的函数名外，还可以使用通配符的方法实现动态方法调用，使用它的前提是必须要配置&lt;constant&gt;元素和&lt;global-allowed-methods&gt;，使其能实现动态方法调用和适配所有的方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 让Struts支持动态方法调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.enable.DynamicMethodInvocation"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">package</span>  <span class="attr">name</span>=<span class="string">"Struts"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 适配所有的通配符方法 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">global-allowed-methods</span>&gt;</span>regex:.*<span class="tag">&lt;/<span class="name">global-allowed-methods</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"*User"</span> <span class="attr">class</span>=<span class="string">"xiezhenyu.UserAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;User"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"error"</span>&gt;</span>/error.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如上代码所示，name属性值中的”*“就是通配符，表示所有以User结尾的亲求都会有这个Action处理；method属性值中的“{1}”是表达式，表示name属性中”*“的值，比如请求为loginUser，那么将传递给method属性，这是会调用Action中loginUser()方法。</p><p>&lt;action&gt;中还有以下几个子元素</p></li><li><p>&lt;interceptor-ref&gt;：用于配置拦截器</p></li><li><p>&lt;exception-mapping&gt;：用于配置异常映射</p></li><li><p>&lt;result&gt;：用于配置Action的结果映射，除了常规的结果映射外，也可以像method属性值一样使用表达式，实行动态结果。&lt;result&gt;有两个属性，name、type。name为Action类在处理完成返回的都是字符串类型的结果，这个结果作为逻辑视图存在，对应&lt;result&gt;元素的name属性值，然后找到与之对应的视图资源。type为指定结果的类型，其取值如下表所示。（我们只需要记住dispatcher、redirect和chain三个常用的即可，其它的略作了解）</p></li></ul><table><thead><tr><th>type可取值</th><th>解释</th></tr></thead><tbody><tr><td>dispatcher</td><td>转发，默认结果类型，对应视图为JSP界面</td></tr><tr><td>chain</td><td>将Action和另一个Action链接起来</td></tr><tr><td>freemarker</td><td>返回结果的对应视图为FreeMarker模板</td></tr><tr><td>HttpHeaderResult</td><td>返回一个已配置好的HTTP头信息响应</td></tr><tr><td>redirect</td><td>将用户重定向到一个配置好的URL</td></tr><tr><td>redirectAction</td><td>将用户重定向到一个已定义好的Action</td></tr><tr><td>stream</td><td>将原数据作为流传递会浏览器，一般用于下载</td></tr><tr><td>velocity</td><td>返回结果的对应视图为Velocity模板</td></tr><tr><td>xslt</td><td>呈现XML到浏览器，该XML可以通过XSL模板进行转换</td></tr><tr><td>plaintext</td><td>返回普通文本内容</td></tr></tbody></table><hr><p>以上就是struts2配置文件的大部分内容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;上一篇写了一下struts怎么快速上手使用，下面是struts的配置文件struts.xml中一些配置的解释(●’◡’●)。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;struts.xml是整个程序的工作流程的依据，该文件的根元素是&amp;lt;st
      
    
    </summary>
    
    
      <category term="SSH" scheme="https://Xiezhenyu98.github.io/categories/SSH/"/>
    
    
      <category term="struts" scheme="https://Xiezhenyu98.github.io/tags/struts/"/>
    
  </entry>
  
  <entry>
    <title>傻瓜式使用Struts-Struts(一)</title>
    <link href="https://Xiezhenyu98.github.io/2019/10/07/%E5%82%BB%E7%93%9C%E5%BC%8F%E4%BD%BF%E7%94%A8Struts-Struts(%E4%B8%80)/"/>
    <id>https://Xiezhenyu98.github.io/2019/10/07/傻瓜式使用Struts-Struts(一)/</id>
    <published>2019-10-07T06:53:12.957Z</published>
    <updated>2019-10-07T07:09:53.322Z</updated>
    
    <content type="html"><![CDATA[<p>我现在大三了，很多同学都想转行JAVA(还好我大一就确定目标学java了(●’◡’●))，今天有人问我struts怎么用，为了同学的方便，我写了这篇傻瓜式使用struts框架的博客，希望能让同学们快速使用struts框架。(本篇本着可复现的态度写的，测试可用)</p><h2 id="1、导入strurs需要用到的jar包"><a href="#1、导入strurs需要用到的jar包" class="headerlink" title="1、导入strurs需要用到的jar包"></a>1、导入strurs需要用到的jar包</h2><p>经过本人整理出以下需要用到的一些包<br>commons-fileupload-1.3.3.jar<br>commons-io-2.5.jar<br>commons-lang3-3.6.jar<br>commons-logging-1.1.3.jar<br>freemarker-2.3.26-incubating.jar<br>javassist-3.20.0-GA.jar<br>log4j-api-2.10.0.jar<br>log4j-core-2.11.0.jar<br>ognl-3.1.15.jar<br>struts2-core-2.5.16.jar<br>你可以通过 <a href="http://www.xiezhenyu98.com/zhiyuan/jar/struts.zip" target="_blank" rel="noopener">点击这里</a>下载</p><h2 id="2、配置web-xml"><a href="#2、配置web-xml" class="headerlink" title="2、配置web.xml"></a>2、配置web.xml</h2><p>在web.xml中配置struts(添加filter)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、创建Action"><a href="#3、创建Action" class="headerlink" title="3、创建Action"></a>3、创建Action</h2><p>创建一个Action并继承ActionSupport，从写里面的execute方法或者写一个带有String返回值并抛出一个异常的函数（异常可以抛出也可以不抛出）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SturtsAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"sss"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、配置struts-xml"><a href="#4、配置struts-xml" class="headerlink" title="4、配置struts.xml"></a>4、配置struts.xml</h2><p>struts.xml必须创建在src根目录下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">  "-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"</span></span><br><span class="line"><span class="meta">  "http://struts.apache.org/dtds/struts-2.5.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- name:可以随便写</span></span><br><span class="line"><span class="comment">     namespace:浏览器地址是根据namespace/action名称去访问的action其中namespace可以是虚路径</span></span><br><span class="line"><span class="comment">     extends:struts-default 为继承struts的默认结果集，就是继承struts-default.xml，它里面定义了许多跳转类型、拦截器等一些常用的东西</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"Struts"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name:浏览器访问的路径</span></span><br><span class="line"><span class="comment">       class:这个类的路径</span></span><br><span class="line"><span class="comment">       method:方法名</span></span><br><span class="line"><span class="comment">       这三个连起来可以理解为：浏览器访问的路径是访问的哪个类中的哪个方法</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"StrutsAction"</span> <span class="attr">class</span>=<span class="string">"com.xiezhenyu.web.SturtsAction"</span> <span class="attr">method</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- name:与test方法中返回的字符串对应，后面的是跳转到哪一个页面 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"index"</span>&gt;</span>/index.html<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5、测试struts"><a href="#5、测试struts" class="headerlink" title="5、测试struts"></a>5、测试struts</h2><p>在eclipse跑起来之后输入地址，使用struts成功！！<br><img src="https://img-blog.csdnimg.cn/20191007140310102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzU2OTA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><em>注意：其中struts.xml的配置文件只是其中一部分配置，目前并不能当成万金油使用，本篇只是介绍struts如何快速使用，就不一一介绍struts的详细配置文件，后续我会一一写出。</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我现在大三了，很多同学都想转行JAVA(还好我大一就确定目标学java了(●’◡’●))，今天有人问我struts怎么用，为了同学的方便，我写了这篇傻瓜式使用struts框架的博客，希望能让同学们快速使用struts框架。(本篇本着可复现的态度写的，测试可用)&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="SSH" scheme="https://Xiezhenyu98.github.io/categories/SSH/"/>
    
    
      <category term="struts" scheme="https://Xiezhenyu98.github.io/tags/struts/"/>
    
  </entry>
  
</feed>
